<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="Legacy">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title type="main" xml:lang="sl">Zapuščina napredne informatizacije</title>
            <title type="main" xml:lang="en">The Legacy of Advanced Informatization</title>
            <respStmt>
               <resp>Editor / Urednica</resp>
               <name>Gaja Zornada</name>
            </respStmt>
            <respStmt>
               <resp>Reviewer / Recenzenta</resp>
               <name>Marko Robnik Šikonja</name>
               <name>Matija Marolt</name>
            </respStmt>
            <respStmt>
               <resp>Co-publishers / Sozaložniki</resp>
               <orgName>Inštitut za novejšo zgodovino</orgName>
               <orgName>Društvo Računalniški muzej</orgName>
            </respStmt>
            <respStmt>
               <resp>Represented by / Predstavniki</resp>
               <name>Andrej Pančur</name>
               <name>Gaja Zornada</name>
            </respStmt>
            <respStmt>
               <resp>Cover / Naslovnica</resp>
               <name/>
            </respStmt>
            <respStmt>
               <resp>Lektura / Proofreading</resp>
               <name>Katja Bergles Bricman</name>
            </respStmt>
            <respStmt>
               <resp>Prevod / English Translation</resp>
               <name>Vesna Elikan</name>
            </respStmt>
            <respStmt>
               <resp>TEI Encoding / Kodiranje TEI</resp>
               <name>Mihael Ojsteršek</name>
            </respStmt>
         </titleStmt>
         <editionStmt>
            <edition>Editon 1.0</edition>
         </editionStmt>
         <publicationStmt>
            <authority>Inštitut za novejšo zgodovino</authority>
            <authority>Društvo Računalniški muzej</authority>
            <pubPlace>Ljubljana <date when="2022">2022</date>
            </pubPlace>
            <availability>
               <licence>http://creativecommons.org/licenses/by-nc-nd/4.0/</licence>
               <p style="text-align:justify">To delo je ponujeno pod <ref
                     target="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons
                     Priznanje avtorstva-Nekomercialno-Brez predelav 4.0 Mednarodna licenco</ref>
               </p>
               <p rend="CIP" style="text-align:justify">Kataložni zapis o publikaciji (CIP)
                  pripravili v Narodni in univerzitetni knjižnici v Ljubljani&lt;br&gt;&lt;a
                  href="http://COBISS.SI" target="_blank"&gt;COBISS.SI&lt;/a&gt;-ID &lt;a
                  href="https://plus.cobiss.si/opac7/bib/XXXXXXX"
                  target="_blank"&gt;XXXXXXX&lt;/a&gt;&lt;br&gt;ISBN XXXXX (HTML)&lt;br&gt;</p>
            </availability>
            <idno type="URI">https://sistory.github.io/</idno>
            <idno type="hdl"/>
         </publicationStmt>
         <sourceDesc>
            <p>Converted from a Word document</p>
         </sourceDesc>
      </fileDesc>
      <profileDesc>
         <textClass>
            <keywords xml:lang="en">
               <term/>
               <term/>
               <term/>
               <term/>
               <term/>
               <term/>
               <term/>
            </keywords>
            <keywords xml:lang="sl">
               <term/>
               <term/>
               <term/>
               <term/>
               <term/>
               <term/>
               <term/>
            </keywords>
         </textClass>
         <langUsage>
            <language ident="en">
               <term xml:lang="en">English</term>
               <term xml:lang="sl">angleščina</term>
            </language>
            <language ident="sl">
               <term xml:lang="en">Slovenian</term>
               <term xml:lang="sl">slovenščina</term>
            </language>
         </langUsage>
      </profileDesc>
   </teiHeader>
   <text>
      <front>
         <titlePage>
            <docTitle>
               <titlePart xml:lang="sl">Zapuščina napredne informatizacije</titlePart>
               <titlePart xml:lang="en">The Legacy of Advanced Informatization</titlePart>
            </docTitle>
            <graphic url="cover.jpg"/>
            <docImprint>
               <publisher>Inštitut za novejšo zgodovino</publisher>
               <publisher>Društvo Računalniški muzej</publisher>
               <docDate>2022</docDate>
            </docImprint>
         </titlePage>
         <divGen type="cip" xml:id="cip-sl" xml:lang="sl" corresp="#cip">
            <head>Kolofon</head>
         </divGen>
         <divGen type="cip" xml:id="cip" xml:lang="en" corresp="#cip-sl">
            <head>Colophon</head>
         </divGen>
         <divGen type="toc" xml:id="sl-toc" xml:lang="sl" corresp="#toc">
            <head>Kazalo vsebine</head>
         </divGen>
         <divGen type="toc" xml:id="toc" xml:lang="en" corresp="#sl-toc">
            <head>Table of Contents</head>
         </divGen>
         <divGen type="search" xml:id="sl-search" xml:lang="sl" corresp="#search">
            <head>Iskanje</head>
         </divGen>
         <divGen type="search" xml:id="search" xml:lang="en" corresp="#sl-search">
            <head>Search</head>
         </divGen>
         <div type="preface" xml:id="preface-sl" xml:lang="sl" corresp="#preface-en">
            <head xml:id="Legacy-head-7">Zapuščina napredne informatizacije</head>
            <head xml:id="Legacy-head-8">Predgovor</head>
            <p xml:id="Legacy-p-4">Pričujoči zbornik prispevkov s simpozija o Zapuščini napredne
               informatizacije, ki je potekal v <ref target="https://www.racunalniski-muzej.si/">
                  <hi rend="underline">Računalniškem muzeju</hi>
               </ref> v Ljubljani 13. junija 2022, obravnava raznolike poglede na izzive in potrebe
               po sistematični hrambi programske računalniške dediščine. Obenem pa samo problematiko
               uvaja v sodoben slovenski strokovni diskurz z namenom, da se postavi osnova za
               razmislek o prihodnjih ustrojih, ki bi nam kot družbi pomagali, da zagotovimo
               dolgoživost spomina na digitalni sloj človeškega udejanjanja.</p>
            <p xml:id="Legacy-p-5">V Računalniškem muzeju smo potrebo za ta skupni razmislek
               občutili kot pereč problem v lastnih dejavnostih medijske in digitalne arheologije
               ter v procesih in poskusih rekonstrukcije prelomnih digitalnih odtisov slovenske
               družbe. Simpozij smo sklicali s tezo, da prepogosto prepuščamo pozabi tisto, s čimer
               imamo opravka vsak dan, ko kot uporabniki digitalne tehnologije ignorantsko
               zanemarjamo plast, ki nam omogoča to nič več čudežno, a vendar vedno manj razumljeno
               vmesniško plast med človekom in strojem. Kar se je ohranilo, se je ohranilo tako
               rekoč slučajno. Zahvala gre zavednim posameznicam in posameznikom, ki so delovali
               bodisi znotraj organizacij bodisi v zasebni kapaciteti, zato želimo z izdajo zbornika
               postaviti ilustrativne temelje za nadaljnjo obravnavo in usmeritev v iskanje
               sistematičnega nagovora k ohranjanju tistega, kar iz nežive strojne opreme ustvari
               digitalno človeško izkušnjo.</p>
            <p xml:id="Legacy-p-6">Nabor strokovnjakov, ki so sodelovali na posvetu, je bil namenoma
               raznolik, zato da smo zajeli širino pogledov in razmislekov od prvoosebnih izrazov
               ustvarjalcev. Ti so s svojim delovanjem prispevali k naboru izjemno pomembnih
               prelomnih trenutkov softverskega razvoja v Ljubljani in Sloveniji, vključno s
               humanističnimi interpretacijami in dobrimi praksami, ki so morda že vzpostavljene v
               drugih segmentih raziskovalnega dela ali v posameznih visoko reguliranih industrijah.
               Odprli smo pravna vprašanja, povezana z nejasno opredelitvijo programske
               intelektualne lastnine, ter izpostavili učinke, ki jih je povezano neprekinjeno
               delovanje na tem področju prineslo razvoju mesta in nenazadnje samozavesti današnjih
               razvijalcev programskih rešitev, ki so se kalili v okolju z bogato razvejano
               institucionalno in samoniklo softversko dejavnostjo.</p>
            <p xml:id="Legacy-p-7">V nagovorni predstavitvi dr. Roberto di Cosmo uokviri namen
               posveta s predstavitvijo geneze in delovanja fundacije UNESCO Software Heritage,
               katere ambasadorji smo tudi v Računalniškem muzeju. Poda izhodiščne zagovore za
               oblikovanje statusa softverske nesnovne dediščine, kot ga vidi UNESCO, in demonstrira
               določen del na praktičnem prikazu iz hrambe SWH. Praktične prikaze in pregled
               večdesetletnega delovanja na področju razvoja softverskih rešitev prispevajo dr. Saša
               Divjak s področja računalniški ved, dr. Primož Jakopin s področja jezikoslovja in
               Franc Zakrajšek s področja urbanističnega načrtovanja in digitalizacije arhitekturne
               kulturne dediščine. Divjak se osredotoča na preglavice, ki jih povzroča sprotno
               zastaranje programskih rešitev, Jakopin pa odpre vprašanja arhiviranja z vidika
               poznejše muzejske predstavitve. Poglobljen pregled razvoja digitalizacije
               specifičnega področja – urbanizma – nam predstavi Zakrajšek, ki skozi tehnološke
               rešitve jasno prikaže, kako je razvoj v Ljubljani držal korak s časom. Nadalje mag.
               Silvana Žorž poveže teoretske in praktične iztočnice v prispevku o vrednotah v
               softverskem razvoju, kot sledijo iz analize poslovne in programerske kulture podjetja
               HERMES SoftLab, in odpre vprašanje zmožnosti ohranjanja tako neotipljive, a vendar
               bistvene zapuščine, kot je vrednostni sistem. To človeško noto nagovori tudi Boštjan
               Špetič v prispevku o rekonstrukciji računalnika Iskra Delta Partner, arheoloških
               najdbah s trdega diska in dejanskem učinku prezentacije iz muzejske prakse. Dr.
               Andrej Pančur osvetljuje dobre prakse in regulativne okvire na področju digitalne
               humanistike. Dr. Nataša Milić-Frayling pa ilustrira dobre prakse na področju
               dolgotrajne hrambe softvera skozi primer iz visoko reguliranega industrijskega okolja
               ter zahtevnega umetniškega okolja, kjer je istovetnost uporabniške izkušnje na prvem
               mestu. Matija Šuklje pa nam oriše kompleksnost pravnih interpretacij programja, ki se
               jih moramo zavedati ob razmisleku o sistematični hrambi, rekonstrukciji in
               predstavljanju javnosti.</p>
            <p xml:id="Legacy-p-8">Posvet je vprašanja odpiral, a obenem ponudil nastavke za
               oblikovanje zaključkov. Vodilna misel, ki se je prepletala skozi vsa predstavljena
               stališča, pa je bila izjemno človeška.</p>
            <p xml:id="Legacy-p-9">Softver je minljiv.</p>
            <p xml:id="Legacy-p-10">Softver je minljiv, a obenem nesmrten v svoji ideji, udejanjanju
               človeške iznajdljivosti, enkapsuliranju duha določenega časa in vrednostnih sistemov
               določene skupine ljudi. Je izraz naše kulture. Je naša dediščina.</p>
            <p xml:id="Legacy-p-11">V Sloveniji je prostora za izboljšavo na področju hrambe,
               evidentiranja, konzervacije, restavriranja softverske dediščine in nenazadnje
               interpretacij in prezentacij za javnost še ogromno. Prvi korak pa je zagotovo narejen
               s tem, ko se zavemo, da gre tudi pri programju za nesnovno kulturno dediščino, vredno
               celostne obravnave ali pa za vedno zapisano pozabi. Zgodovina, o kateri razpravljajo
               avtorji, je resnično nedavna, stara komaj več kot pol stoletja. Izgublja pa se s
               svetlobno hitrostjo. Z vsako nadgradnjo uporabniškega sistema, z vsako novo
               generacijo strojne opreme. Zato je zdaj pravi čas, da se vprašamo, kaj bomo lahko
               pokazali zanamcem čez naslednjih 50 let. Jim bomo brez istovetnih interaktivnih
               prikazov res lahko dovolj dobro razložili, kako so nas kot družbo oblikovale
               digitalne interakcije? Bomo kolektivno pozabili nanje?</p>
            <p xml:id="Legacy-p-12">Gaja Zornada,</p>
            <p xml:id="Legacy-p-13">vodja Računalniškega muzeja, Ljubljana, julij 2022</p>
         </div>
         <div type="preface" xml:id="preface-en" xml:lang="en" corresp="#preface-sl">
            <head xml:id="Legacy-head-9">The Legacy of Advanced Informatization</head>
            <head xml:id="Legacy-head-10">Preface</head>
            <p xml:id="Legacy-p-14">The present proceedings from the Symposium on the Legacy of
               Advanced Informatization, which was held at the Computer History Museum in Ljubljana
               on June 13 2022, represents an account of a variety of views on the challenges and
               the need for the systematic storage of software heritage. It introduces the topic
               into Slovenia’s contemporary professional discourse, with a view to laying the
               foundations for future frameworks that could help our society preserve the memory of
               the digital layer of human activity.</p>
            <p xml:id="Legacy-p-15">At the Computer History Museum, we have felt the need for such a
               broad discussion as a burning problem in our own work in media and digital
               archaeology, processes and attempts to reconstruct the ground-breaking digital
               imprints of Slovenian society. Our thesis for the expert panel was that all too often
               we let slip into oblivion what we interact with on a daily basis when we, the users
               of digital technologies, willfully ignore the layer that enables the no longer
               miraculous yet increasingly complex and misunderstood interface between humans and
               machines. What has been preserved has actually been preserved by chance thanks to
               conscientious individuals who were active either within organizations or privately.
               The goal behind this collection of papers is to prepare illustrative groundwork for
               future elaboration and suggest a more systematic approach to preserving what creates
               the digital human experience from inanimate hardware.</p>
            <p xml:id="Legacy-p-16">We intentionally invited a very diverse group of experts to the
               symposium to ensure a wide array of perspectives and thoughts, from the very
               developers of ground-breaking software in Ljubljana and Slovenia to authors of
               humanist interpretations and good practices that have been established in other
               segments of research or certain highly regulated industries. We opened legal
               questions regarding the vague definition of software intellectual property, and
               pointed to the effects of constant joint efforts in the development of the city and
               also on the confidence of software developers who grew in an environment boasting a
               distinct institutional and grassroots software activity.</p>
            <p xml:id="Legacy-p-17">In the introduction Dr Roberto di Cosmo frames the purpose of
               the symposium by presenting the genesis and work of the UNESCO Software Heritage
               foundation t, of which the Computer History Museum is an ambassador. He provides the
               principal arguments for recognizing the status of software as a form of intangible
               heritage as perceived by UNESCO, and discusses a practical example of software
               heritage archiving. Practical examples and an overview of decades of software
               development are offered by Dr Saša Divjak in computer sciences, Dr Primož Jakopin in
               linguistics, and Franc Zakrajšek in urban planning and digitalization of
               architectural cultural heritage. Divjak discusses the issues of software solutions
               obsolescence, while Jakopin explores the issues of archiving from the viewpoint of
               subsequent museum display. Zakrajšek delves into the development of digitalization in
               a specific field – urban planning – and uses various technological solutions to
               illustrate how development in Ljubljana kept up with global trends. Furtheron,
               Silvana Žorž, MA, connects the theoretical and practical aspects of the importance of
               values in software development based on an analysis of the company business and
               engineering culture in HERMES SoftLab, thus opening a discussion about the ability to
               preserve such intangible yet crucial heritage as a values system. This very human
               aspect is addressed also by Boštjan Špetič in an article uncovering insights into the
               reconstruction of the Iskra Delta Partner computer, archaeological findings from a
               hard drive, and the actual effects of presentation in the museum. <hi
                  rend="background(magenta)">Dr Andrej Pančur highlights best practices and
                  regulatory frameworks in the digital humanities</hi>, while Dr Nataša
               Milić-Frayling illustrates best practices through examples of long-term software
               storage in a highly regulated industry environment, and in a demanding artistic
               environment where the authenticity of the user experience is of paramount importance.
               Matija Šuklje discusses the complexity of legal interpretations of software which
               should be taken into account in organizing systematic storage, reconstruction and
               presentation to the public.</p>
            <p xml:id="Legacy-p-18">The expert panel raised questions yet also offered starting
               points for forming conclusions. The underlying idea intertwining all points of view
               was outstandingly human.</p>
            <p xml:id="Legacy-p-19">Software is transient.</p>
            <p xml:id="Legacy-p-20">Software is transient yet immortal in its idea, in the
               materialization of human inventiveness, the encapsulation of the spirit of a certain
               era, and the value systems of specific groups of people. It is an expression of our
               culture. It is our heritage.</p>
            <p xml:id="Legacy-p-21">In Slovenia there is ample room for improvement in terms of the
               storage, registering, conservation, and restoration of software heritage and also for
               different interpretations and presentations to the public. The first step will be
               taken as soon as we realize that software is our intangible cultural heritage and as
               such deserves a thorough treatment to avoid it disappearing forever. The history
               being discussed here is truly recent, barely more than half a century old. But it is
               vanishing rapidly with each update of user systems, and with each generation of
               hardware. Hence now is the right time to wonder what will be left for us to show
               future generations in the next 50 years. Will we truly be able to properly explain
               how digital interactions shaped our society without authentic, interactive
               experiences? Will we collectively forget about them?</p>
            <p xml:id="Legacy-p-22">Gaja Zornada,</p>
            <p xml:id="Legacy-p-23">Head of Computer History Museum, Ljubljana, July 2022</p>
         </div>
      </front>
      <body>
         <div type="chapter" xml:id="ch01" xml:lang="sl" corresp="#ch01-en">
            <head xml:id="Legacy-head-11">1. Dediščina programske opreme: svetovni arhiv izvornih
               kod programske opreme</head>
            <docAuthor xml:id="Legacy-docAuthor-1">
               <ref target="#study01.1"> Roberto Di Cosmo </ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-24">Programska oprema ni le gonilo naše
               panoge in inovacij, temveč tudi bistveno sredstvo komunikacije. Omogoča nam boljše
               življenje, izvajanje kakršnih koli transakcij in dejavnosti, medsebojno organizacijo
               v družbi in oblikovanje političnih mnenj. Programska oprema je ključna za delovanje
               gospodarskih, družbenih in političnih organizacij, ne glede na to, ali so javnega ali
               zasebnega značaja oziroma delujejo na mobilnih napravah ali v oblaku. Igra
               nepogrešljivo vlogo posrednika, ki omogoča dostop do vseh digitalnih informacij,
               poleg člankov in podatkov pa predstavlja tudi enega od stebrov sodobnega raziskovanja
               (Noorden et al., 2014).</p>
            <p style="text-align:justify;" xml:id="Legacy-p-25">Programska oprema je torej <hi
                  rend="italic">pomemben del</hi> naše znanstvene, tehnične in industrijske
               dediščine.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-26">Ob pozornem opazovanju lahko
               ugotovimo, da se pravo znanje hranjeno v programski opremi ne skriva v izvršljivih
               programih, temveč v »izvorni kodi«, ki v skladu z definicijo v licenci GPL
               predstavlja »zaželeni način, s katerim razvijalec spremeni program.«<note
                  place="foot" xml:id="ftn1" n="1">GNU91. Splošno dovoljenje GNU, različica 2, 1991.
                  Pridobljeno septembra 2015. </note> Izvorna koda je posebna oblika znanja:
               ustvarjena je tako, da jo <hi rend="italic">razume človek</hi>, torej razvijalec, in
               da se jo lahko strojno prevede v obliko, s pomočjo katere je <hi rend="italic"
                  >izvršljiva</hi> neposredno na napravi. Zgovorno je že samo izrazoslovje, ki ga
               uporablja računalniška skupnost: »programski jeziki« se uporabljajo za »pisanje«
               programja. Harold Habelson je že leta 1985 zapisal, da je »programe treba najprej
               napisati, da jih lahko preberejo drugi ljudje«. (Abelson &amp; Sussman, 1985)</p>
            <p style="text-align:justify;" xml:id="Legacy-p-28">Izvorna koda programske opreme je
               torej <hi rend="italic">človeška stvaritev, ki je ustvarjena na povsem enak
                  način</hi> kot drugi pisni dokumenti, zato si razvijalci programske opreme
               zaslužijo enako mero spoštovanja kot drugi ustvarjalci.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-29">Izvorna koda programske opreme je
               dragocena dediščina, kar sta trdila že Len Shustek (v odličnem članku iz leta 2006
               (Shustek, 2006)) in Donald Knuth (Knuth, 1984), zato je bistvenega pomena, da jo
               poskušamo ohraniti.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-30">Poslanstvo pobude Software Heritage,
               ki je nastala leta 2015 s podporo inštituta Inria,<note place="foot" xml:id="ftn2"
                  n="2">Inria je javna znanstvena in tehnološka ustanova, specializirana za
                  matematiko in računalništvo, ki je bila ustanovljena leta 1967. Deluje pod
                  nadzorom francoskega Ministrstva za visoko šolstvo, raziskave in inovacije ter
                  Ministrstva za gospodarstvo in finance. </note> je <hi rend="italic">zbirati,
                  organizirati in ohranjati </hi>vso javno dostopno <hi rend="italic">izvorno kodo
               </hi>na planetu ter <hi rend="italic">jo narediti javno dostopno</hi>, ne glede na
               to, kje in kako je bila razvita ali distribuirana.</p>
            <div type="subchapter" xml:id="ch01-sub01" xml:lang="sl" corresp="#ch01-sub01-en">
               <head xml:id="Legacy-head-12">Večplastna naloga</head>
               <p style="text-align:justify;" xml:id="Legacy-p-32">Arhiviranje celotne izvorne kode,
                  ki je dostopna, je večplastna naloga. V članku (Abramatic et al., 2018) je
                  podrobno opisano, da je treba uporabiti različne strategije, odvisno od tega, ali
                  želite zbrati odprto ali lastniško izvorno kodo, poleg tega pa je treba izvorno
                  kodo, ki je že dostopna prek spleta, drugače obravnavati kot izvorno kodo, ki je
                  nameščena na starejših fizičnih medijih.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-33">Za zbiranje odprte izvorne kode,
                  ki je že dostopna na spletu, je najustrezneje razviti zbiralnik, ki samodejno
                  zbira vsebino z najrazličnejših platform za sodelovanje, kot so GitHub, GitLab.com
                  ali BitBucket, ali s platform za distribucijo paketov programske opreme, kot so
                  Debian, NPM. CRAN ali Pypi.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-34">Za zbiranje izvorne kode stare
                  programske opreme je treba vzpostaviti pravi postopek računalniške arheologije. V
                  sodelovanju z Univerzo v Pisi in UNESCOM smo že pričeli z delom in tako je nastal
                  proces <ref target="https://www.softwareheritage.org/swhap">
                     <hi rend="underline">SWHAP</hi>
                  </ref>. Uporabili smo ga za iskanje, dokumentiranje in arhiviranje programske
                  opreme, ki je igrala pomembno vlogo v zgodovini računalništva v Italiji. Nedavno
                  smo ga razširili v sklopu projekta <ref
                     target="https://stories.softwareheritage.org">
                     <hi rend="underline">Software Stories</hi>
                  </ref>, ki poskuša izpostaviti vse zgodovinske elemente v zvezi s programsko
                  opremo, katere izvorna koda je bila najdena.</p>
            </div>
            <div type="subchapter" xml:id="ch01-sub02" xml:lang="sl" corresp="#ch01-sub02-en">
               <head xml:id="Legacy-head-13">Svetovno poslanstvo</head>
               <p style="text-align:justify;" xml:id="Legacy-p-35">Temeljna načela Software Heritage
                  so (Abramatic et al., 2018; Di Cosmo in Zacchiroli, 2017): sistematična uporaba
                  odprtokodne programske opreme za razvijanje infrastrukture za Software Heritage,
                  zato da je njeno delovanje mogoče razumeti in ga po potrebi ponoviti; izgradnja
                  globalne mreže neodvisnih zrcalnih kopij arhiva, saj je veliko število kopij
                  najboljša zaščita pred izgubo in napadi; izbira neprofitne in mednarodne strukture
                  z več deležniki, s čimer se zmanjša tveganje za obstoj posameznih mest okvar ter
                  zagotovi, da bo pobuda Software Heritage resnično služila vsem.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-36">Za izpolnitev takega poslanstva
                  sta potrebni institucionalna legitimnost kot tudi resnična sposobnost širokega
                  konsenza. Okvirni sporazum, ki sta ga Inria in UNESCO podpisala 3. aprila 2017 in
                  obnovila novembra 2021, je ključnega pomena.</p>
            </div>
            <div type="subchapter" xml:id="ch01-sub03" xml:lang="sl" corresp="#ch01-sub03-en">
               <head xml:id="Legacy-head-14">Preteklost, sedanjost in prihodnost: veliko več kot
                  arhiv!</head>
               <p style="text-align:justify;" xml:id="Legacy-p-37">Software Heritage poseduje
                  infrastrukturo, ki raste iz dneva v dan. Arhiv večinoma sestavljajo vsebine, ki so
                  bile pridobljene s postopkom samodejnega zbiranja, pričenjamo pa dodajati tudi
                  bisere, pridobljene s potrpežljivim obnavljanjem starejše programske opreme s
                  postopkom zajemanja, ki je bil razvit v sodelovanju Univerze v Pisi in
                     UNESCA.<note place="foot" xml:id="ftn3" n="3">Glej SWHAP na spletnem mestu
                     https://www.softwareheritage.org/swhap. </note>
               </p>
               <figure xml:id="Legacy-figure-1">
                  <graphic url="media/cosmo1.png"/>
                  <head>
                     <hi rend="italic">Slika 1: Število projektov, izvornih datotek in različic, ki
                        so bili od junija 2022 arhivirani v </hi>
                     <ref target="https://www.softwareheritate.org/archive">
                        <hi rend="italic underline">Software Heritage</hi>
                     </ref>
                     <hi rend="italic">.</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-39">Čeprav izčrpnost še zdaleč ni
                  dosežena, arhiv že sedaj vsebuje največji korpus izvorne kode na svetu z več kot
                  180 milijoni arhiviranih izvorov za več kot 12 milijard edinstvenih datotek z
                  izvorno kodo, vsaka od njih pa je opremljena z intrinzičnim identifikatorjem, ki
                  temelji na kriptografskih zgoščenih vrednostih (Di Cosmo et al., 2018).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-40">Ta edinstvena infrastruktura ima
                  več poslanstev. Seveda je namen ohraniti izvorne kode iz <hi rend="italic"
                     >preteklosti</hi>, ki so zapisale zgodovino računalništva in informacijske
                  družbe, za prihodnje generacije. Vseeno pa predvsem poskušamo zgraditi <hi
                     rend="italic">velikanski teleskop</hi>, ki nam bo pomagal pri raziskovanju <hi
                     rend="italic">sedanjega </hi>razvoja <hi rend="italic">galaksije programske
                     opreme</hi>, da bi jo bolje razumeli in izboljšali ter tako ustvarili boljšo
                  tehnološko <hi rend="italic">prihodnost.</hi>
               </p>
            </div>
            <div type="subchapter" xml:id="ch01-sub04" xml:lang="sl" corresp="#ch01-sub04-en">
               <head xml:id="Legacy-head-16">Strateško vprašanje, ki ga moramo poznati</head>
               <p style="text-align:justify;" xml:id="Legacy-p-41">Arhiv Software Heritage je že
                  sedaj najpomembnejša zbirka izvorne kode na svetu, a pred nami je še dolga pot:
                  združiti je treba še številne deležnike, od kulturne dediščine do industrije in od
                  raziskovalnih ustanov do javne uprave. Računamo, da bomo to dosegli s pomočjo
                  rastoče mreže <ref target="https://softwareheritage.org/ambassadors/">
                     <hi rend="underline">ambasadorjev</hi>
                  </ref> vključno z Računalniškim muzejem v Ljubljani.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-42">Jasno je, da je programska oprema
                  postala bistven sestavni del vseh človekovih dejavnosti, zato neomejen dostop do
                  javno dostopnih izvornih kod programske opreme postaja vprašanje digitalne
                  suverenosti vseh narodov.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-43">Edinstvena infrastruktura, ki jo
                  z univerzalnim pristopom gradi Software Heritage, je ključnega pomena za doseganje
                  zahtevnega cilja digitalne suverenosti ob ohranjanju dimenzije arhiva za skupno
                  dobro.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-44">Zato je izjemno pomembno, da se
                  odločevalci na ravni institucij, panoge, znanosti in civilne družbe pričnejo
                  zavedati, kako pomembna so ta vprašanja. Poleg tega bi morala Evropska unija hitro
                  zavzeti svoja stališče in pričeti zagotavljati potrebna sredstva, zaradi katerih
                  bo lahko pobuda Software Heritage rasla in trajala. S tem bi se postavili ob bok
                  drugim mednarodnim akterjem, ki so se k pobudi že zavezali, in podprli ustanovitev
                  mednarodne neprofitne ustanove, ki bo dolgoročno izvajala to poslanstvo.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch01-en" xml:lang="en" corresp="#ch01">
            <head xml:id="Legacy-head-17">1. Software Heritage: the universal archive of software
               source codes</head>
            <docAuthor xml:id="Legacy-docAuthor-2">
               <ref target="#study01.1-en">Roberto Di Cosmo</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-45">Software is the engine of our
               industry, the fuel of innovation, the essential instrument we use to communicate, to
               maintain ourselves, to perform any kind of transaction and operation, to organize
               ourselves in society and form our political opinions. Software is crucial to the
               functioning of economic, social and political organizations, whether public or
               private, whether on mobile devices or in the cloud. It is also the indispensable
               mediator that enables access to all digital information, and it is, along with
               articles and data, one of the pillars of modern research (Noorden et al., 2014)</p>
            <p style="text-align:justify;" xml:id="Legacy-p-46">Software therefore represents <hi
                  rend="italic">an important part </hi>of our scientific, technical and industrial
               heritage.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-47">If one looks closely, it is easy to
               see that the real knowledge that is contained in software is not in the executable
               programs, but in the "source code", which according to the definition used in the GPL
               , is "the preferred form for a developer to make a change to a program."<note
                  place="foot" xml:id="ftn1-en" n="1">GNU91. GNU general public license, version 2,
                  1991. Retrieved September 2015. </note> Source code is a special form of
               knowledge: it is made to be <hi rend="italic">understood by a human being</hi>, the
               developer, and can be mechanically translated into a form to be <hi rend="italic"
                  >executed </hi>directly on a machine. The very terminology used by the computing
               community is telling: "programming languages" are used to "write" software. As Harold
               Habelson wrote as early as 1985, "programs must be written first so that other human
               beings can read them" (Abelson &amp; Sussman, 1985).</p>
            <p style="text-align:justify;" xml:id="Legacy-p-49">The source code of software is
               therefore a <hi rend="italic">human creation in the same way as </hi>other written
               documents, and software developers deserve the same respect as other creators.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-50">Software source code is therefore
               valuable heritage, as already argued by Len Shustek in a fine 2006 article (Shustek,
               2006) as well as by Donald Knuth (Knuth, 1984), and it is thus essential to work on
               its preservation.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-51">This is one of the missions of
               Software Heritage, an initiative launched in 2015 with the support of Inria,<note
                  place="foot" xml:id="ftn2-en" n="2">Created in 1967, Inria is a public scientific
                  and technological institution specialized in mathematics and computer science,
                  under the dual supervision of the French Ministry of Higher Education, Research
                  and Innovation and the Ministry of Economy and Finance. </note> to <hi
                  rend="italic">collect, organize, preserve and make easily accessible </hi>all
               publicly available <hi rend="italic">source code on the planet</hi>, regardless of
               where and how it was developed or distributed.</p>
            <div type="subchapter" xml:id="ch01-sub01-en" xml:lang="en" corresp="#ch01-sub01">
               <head xml:id="Legacy-head-18">A complex task</head>
               <p style="text-align:justify;" xml:id="Legacy-p-53">Archiving all available source
                  code is a complex task, and as detailed in the literature (Abramatic et al., 2018)
                  one must deploy different strategies depending on whether one seeks to collect
                  open- or proprietary source code, and one does not treat source code that is
                  readily available online in the same way as source code that resides on older
                  physical media.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-54">For open-source code that is
                  readily available online, the most appropriate approach is to build a harvester
                  that automatically collects content from a wide variety of collaborative
                  development platforms, such as GitHub, GitLab.com, or BitBucket, or from software
                  package distribution platforms, such as Debian, NPM. CRAN or Pypi.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-55">For the source code of old
                  software, a real process of computer archaeology must be set up, and we have
                  already started this work in a collaboration with the University of Pisa and
                  UNESCO that has resulted in the <ref
                     target="https://www.softwareheritage.org/swhap">SWHAP</ref> process that has
                  been used to find, document and archive software that is important in the history
                  of computing in Italy, and which has recently been extended with the <ref
                     target="https://stories.softwareheritage.org">Software Stories</ref> project,
                  which aims to highlight all the historical elements around software whose source
                  code has been found.</p>
            </div>
            <div type="subchapter" xml:id="ch01-sub02-en" xml:lang="en" corresp="#ch01-sub02">
               <head xml:id="Legacy-head-19">A universal mission</head>
               <p style="text-align:justify;" xml:id="Legacy-p-56">The founding principles of
                  Software Heritage are (Abramatic et al., 2018; Di Cosmo &amp; Zacchiroli, 2017):
                  the systematic use of open-source software to build the Software Heritage
                  infrastructure, so that its operation can be understood, and replicated if
                  necessary; the construction of a global network of independent mirrors of the
                  archive, because a large number of copies is the best protection against loss and
                  attack; to have a non-profit, international, multi-stakeholder structure, to
                  minimize the risk of having single points of failure, and to ensure that Software
                  Heritage will indeed serve all.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-57">For such a mission, institutional
                  legitimacy is required, as well as a real capacity for openness to enable a broad
                  consensus. The framework agreement signed between Inria and UNESCO on April 3,
                  2017, and renewed in November 2021, is essential in this regard.</p>
            </div>
            <div type="subchapter" xml:id="ch01-sub03-en" xml:lang="en" corresp="#ch01-sub03">
               <head xml:id="Legacy-head-20">Past, present, future: much more than an
                  archive!</head>
               <p style="text-align:justify;" xml:id="Legacy-p-58">Software Heritage now has an
                  infrastructure that grows day by day, and if the bulk of the archive's content is
                  the result of automatic harvesting, some real treasures are beginning to be
                  uncovered through the patient work of recovering significant historical software,
                  following an acquisition process that has been developed in collaboration with the
                  University of Pisa and UNESCO.<note place="foot" xml:id="ftn3-en" n="3">See SWHAP
                     at https://www.softwareheritage.org/swhap. </note>
               </p>
               <figure xml:id="Legacy-figure-2">
                  <graphic url="media/cosmo1.png"/>
                  <head>Figure 1: Number of projects, source files, and versions archived in <ref
                        target="https://www.softwareheritate.org/archive">Software Heritage</ref> as
                     of June 2022</head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-60">While exhaustiveness is still far
                  from being achieved, the archive already contains the largest corpus of source
                  code available on the planet, with more than 180 million archived origins, for
                  over 12 billion unique source files, each equipped with an intrinsic identifier
                  based on cryptographic hashes (Di Cosmo et al., 2018)</p>
               <p style="text-align:justify;" xml:id="Legacy-p-61">This unique infrastructure has a
                  multiple mission: of course, it is about preserving for future generations the
                  source code of the <hi rend="italic">past </hi>that made the history of Computer
                  Science and the Information Society, but also, and above all, we are trying to
                  build a <hi rend="italic">very large telescope </hi>that will allow us to explore
                  the <hi rend="italic">present </hi>evolution of the <hi rend="italic">software
                     development galaxy</hi>, in order to better understand it, to improve it, and
                  to build a better technological <hi rend="italic">future.</hi>
               </p>
            </div>
            <div type="subchapter" xml:id="ch01-sub04-en" xml:lang="en" corresp="#ch01-sub04">
               <head xml:id="Legacy-head-22">A strategic issue, which needs to be known</head>
               <p style="text-align:justify;" xml:id="Legacy-p-62">The Software Heritage archive is
                  already the most important collection of source code in the world, but there is
                  still a lot of work to do, and a wide range of players, from those working in
                  cultural heritage to industry, from research to public administration, must be
                  brought together to achieve this. To make this possible we are counting on a
                  growing network of <ref target="https://softwareheritage.org/ambassadors/"
                     >ambassadors</ref>, including the Computer History Museum in Ljubljana,
                  Slovenia.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-63">It is clear that software has now
                  become an essential component of all human activity, and therefore unrestricted
                  access to publicly available software source codes is becoming a digital
                  sovereignty issue for all nations.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-64">The unique infrastructure that
                  Software Heritage is building, and its universal approach, is an essential element
                  to meet the challenges of digital sovereignty while preserving the common good
                  dimension of the archive.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-65">It is therefore of the utmost
                  importance that institutional, industrial, academic and civil society actors grasp
                  the importance of these issues, and that Europe positions itself quickly, by
                  providing the necessary resources to make Software Heritage grow and last, by
                  taking their place alongside other international actors who are already committed
                  to this project, and by supporting the creation of an international non-profit
                  institution that will carry out this mission over the long term.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch02" xml:lang="sl" corresp="#ch02-en">
            <head xml:id="Legacy-head-23">2. Razvoj in zastaranje programov – izziv in nočna mora
               programerjev</head>
            <docAuthor xml:id="Legacy-docAuthor-3">
               <ref target="#study01.5">Saša Divjak</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-66">Sam sodim v starejšo generacijo, saj
               sem svoje prve programerske izkušnje pridobil leta 1967 na legendarnem računalniku
               Zuse Z32. Začetek 70. let prejšnjega stoletja je bilo obdobje luknjanih kartic in
               perforiranega traku. Takrat je programiranje prvih mikro-, včasih pa tudi
               miniračunalnikov potekalo na zanimiv način. Kot periferno enoto računalnika smo
               uporabljali »Teletype«, ki je poleg tipkanja in tiskanja združeval še čitalnik in
               luknjač papirnega traku. Priprava in izvedba programa je potekala tako:</p>
            <p style="text-align:justify;" xml:id="Legacy-p-67">Najprej si moral v računalnik vnesti
               urejevalnik teksta, ki je bil pomnjen v binarni kodi na traku. Zatem si napisal svoj
               program in to izvorno kodo (pogosto v zbirnem jeziku) naluknjal na nov trak. Sledilo
               je branje zbirnika (angl. <hi rend="italic">assembler</hi>), seveda spet binarno
               zakodiranega na drugem traku. In nato branje »svojega« programa v izvorni kodi.
               Kolikor se spomnim, je tudi to branje potekalo v dveh korakih, saj zbirnik za svoje
               delo potrebuje vsaj dve fazi. In končno, če je bilo (skoraj) vse v redu, si lahko
               naluknjal nov trak, tokrat s svojim programom v binarni kodi. Sledila sta branje
               binarno kodiranega novega programčka in njegova izvedba. Za to, kar danes naredimo v
               drobcu sekunde, si potreboval kar nekaj minut in upal, da se nisi kaj zmotil. Sicer
               si moral celoten postopek praktično ponoviti.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-68">Pri programiranju mikroračunalnikov
               si svoj strojno zakodirani program običajno še »zapekel« v EPROM (integrirano vezje,
               ki je predstavljalo del pomnilnika mikroračunalnika). Tako smo razvijali različne
               mikroračunalniško podprte avtomatizacije. Programerji pa se radi motimo. Ker je
               celoten ciklus potreboval kar nekaj časa, smo pogosto (če se je dalo) popravke vnesli
               kar v strojno kodo in preskočili zamudno luknjanje traku. Posledično smo imeli na
               koncu pravilno delujoč program v EPROMU, izvorna koda pa temu ni več povsem
               ustrezala. Seveda je to zelo narobe.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-69">Miselno prehajanje med programi v
               zbirnem jeziku in njihovo strojno kodo je bilo nekaj vsakdanjega. Nenazadnje smo v
               tistih časih pogosto vpisovali zagonski nalagalnik (t. i. <hi rend="italic">bootstrap
                  loader)</hi> kar prek stikal na konzoli računalnika. In, ker smo to pogosto
               počeli, ni bilo nič nenavadnega, da smo si na pamet zapomnili tudi zaporedja več 10
               ukazov na strojnem nivoju. Take so bile na primer moje izkušnje s prvimi računalniki
               iz družine Digital PDP 11 v 70. letih prejšnjega stoletja.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-70">Pred nadaljevanjem naj povem, da sem
               na Fakulteti za računalništvo in informatiko predaval predmete s področja
               programiranja, sistemske programske opreme in operacijskih sistemov. In, kar me je še
               posebej veselilo, računalniške grafike. To se odraža tudi v nekaterih spominih, ki
               jih bom navedel v nadaljevanju.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-71">Danes je na svetu registriranih več
               kot 9.000 različnih programskih jezikov in tudi načini programiranja so se zelo
               spremenili. Na takratni Fakulteti za elektrotehniko in računalništvo na študijskem
               programu računalništva in informatike smo v 80. letih pri programiranju uvedli
               programski jezik C, ki je še danes »latinščina« in dobra osnova za marsikateri drugi
               programski jezik. V letu 1997 pa smo uvedli še programiranje v programskem jeziku
               Java. Kot nosilca predmeta me je vedno skrbel stalen razvoj tega, takrat še novega
               programskega jezika, ki je v naslednjih letih doživel kar nekaj bistvenih sprememb,
               saj smo aktualne jezike uporabljali tudi v okviru različnih projektov.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-72">Po drugi strani smo pri razvoju
               spletnih aplikacij že v poznih 90. letih uporabljali še danes popularni JavaScript.
               Objektno usmerjenemu programiranju so se pozneje pridružili drugi pristopi. Med njimi
               je pomembno komponentno programiranje, ki pomeni uporabo različnih problemsko
               usmerjenih knjižnic in tako sestavljanje novih aplikacij s kombiniranjem lastne
               razvojne kode in funkcionalnih modulov, ki jih take knjižnice nudijo. Zakaj bi
               izumljali toplo vodo, če pa nekatere rešitve že obstajajo, na primer za podporo 2D in
               3D računalniške grafike, pa za izvajanje različnih bolj ali manj kompleksnih, že
               preskušenih in računsko učinkovitih rutin. Tak pristop po eni strani predvideva
               poznavanje tako imenovanih API-jev (Application Programming Interfaces), hkrati pa
               zelo pospešuje razvojno delo. Vendar hkrati skriva tudi pasti, ki jih predstavlja
               razvoj novih in novih verzij, kar sčasoma nujno pripelje do neskladja posameznih
               komponent naših aplikacij in posledično zastarelosti našega programja. V tem smislu
               je posebej nevarno »mešanje« tehnologij različnih proizvajalcev, saj vsak sledi
               svojim standardom in usmeritvam. Kot primer naj navedem danes že praktično pozabljeni
               VRML (Virtual Reality Markup Language), ki se je pojavil sočasno s programskim
               jezikom JavaScript in je omogočal za tiste čase kar spodobno 3D-vizualizacijo in
               animacijo 3D-scen. Kombiniranje jezikov VRML in JavaScript je omogočalo izdelavo zelo
               atraktivnih 3D-vizualizacij in interaktivnih simulacij naravoslovnih pojavov. Danes
               so ti primeri že povsem zastareli in jih ne moremo več kazati (res pa je, da je
               današnja 3D-grafika vse kaj drugega). Spomnimo se še javanskih apletov, ki so
               omogočali raznovrstne aplikacije (in tudi 3D-vizualizacije) v naših brkljalnikih. Pa
               so ugotovili, da ima taka tehnologija preveč varnostnih lukenj, saj je omogočala tudi
               delovanje izven oglaševanega varnega »peskovnika«. Ponudniki brkljalnikov so to
               začeli drug za drugim onemogočati v novejših verzijah. Danes si lahko to ogledamo le
               na računalnikih, ki imajo v ta namen nameščene za današnje razmere zastarele
               operacijske sisteme in brkljalnike. Pri tem si pogosto pomagamo z »virtualkami«
               (navideznimi napravami) na našem računalniku. Razvijalci smo nujno iskali rešitve v
               sorodnih tehnologijah v upanju, da bomo sedaj pa imeli mir. Tako je marsikdo
               »preklopil« na nekdaj popularni Flash in na njegov programski jezik ActionScript. V
               nekaterih primerih je lahko tako ohranil tudi do 80 % svoje programske kode. Kasneje
               smo lahko ugotovili, da smo se »ušteli«. Danes je Flash (in s tem ActionScript) že
               izumrl. Prava usmeritev je bila v JavaScript oziroma v jQuery zaradi večje
               programerske učinkovitosti. Spet si običajno pomagamo z različnimi knjižnicami za
               učinkovito in poenoteno pripravo grafičnih uporabniških vmesnikov ipd.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-73">Dandanes se srečujemo s številnimi
               mobilnimi napravami, od pametnih telefonov prek tablic do večjih ali manjših
               prenosnih in namiznih računalnikov. Zaradi raznolikosti zaslonov se je uveljavil
               »odzivni dizajn« (angl. <hi rend="italic">responsive design</hi>), ki omogoča enako
               uporabniško izkušnjo na različnih napravah ne glede na velikost in resolucijo našega
               zaslona. Kako si lahko pomagamo pri razvoju takih aplikacij? Nekako logičen korak se
               zdi uporaba knjižnice jQuery Mobile, ki omogoča načrtovanje grafičnih uporabniških
               vmesnikov, ki so primerni za različne naprave. No, obstajajo tudi druge možnosti, na
               primer popularni Bootstrap. Vse lepo in prav, a le nekaj časa. jQuery je iz verzije 1
               prešel v naslednje verzije (v času pisanja tega prispevka obstaja verzija 3). In
               razvojna orodja kar naenkrat razvijalcu pošiljajo opozorila (angl. <hi rend="italic"
                  >warning</hi>), da so delci naše kode zastareli (angl. <hi rend="italic">obsolete,
                  deprecated</hi>). Če drugega ne, je to grdo in nas mora skrbeti, saj postaja naša
               koda stara in bo verjetno sčasoma neuporabna. Dobro, pa bomo izvedli migracijo
               (spremembo) naše kode, da bo ta skladna z novimi napotki. Posebno pri daljših
               programih se nam to zamudno delo upira, saj terja sistematičnost, a je nujno, če
               želimo slediti razvoju. A tu se skriva še kakšna dodatna past. Tako se je na primer
               razvoj pri jQuery Mobile ustavil in novim različicam jQuery ni več sledil. Preostane
               nam še dodaten prehod oziroma opustitev kode, ki jo predstavlja taka zastarana
               knjižnica.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-74">Danes govorimo o izumrlih jezikih in
               delo programerja se ne zaustavi pri razvoju morda atraktivne aplikacije. Njeno
               vzdrževanje z leti terja dodaten napor.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-75">Eno od vprašanj, ki se programerju
               poraja, je, komu sploh zaupati in slediti, da ne bo njegovo vloženo delo prehitro
               zastaralo. Gotovo so to »veliki svetovni igralci«, pa še tu se včasih zatakne. Če se
               povrnem na 3D-grafiko, se spomnim Microsoftove tehnologije Silverlight, ki je nudila
               možnost zelo lepih vizualizacij 3D-svetov in njihovih animacij. Past, ki se je pri
               tem skrivala, je bila ta, da je bil to pač Microsoftov izdelek. Ali mu bodo sledili
               tudi drugi? Poleg MS Windows imamo tudi druge operacijske sisteme. In res,
               Silverlight se ni prijel in je danes opuščen.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-76">In tudi sedaj se razvijalci
               srečujemo s podobnimi dilemami. Nedvomno je zaradi popularnosti mobilnih naprav
               zanimiv razvoj aplikacij za operacijske sisteme Android in iOS. Kar nekaj
               razvijalskih platform najdemo na Internetu. Kateri naj zaupamo, katera se bo obdržala
               vsaj malce dlje? Katera pa bo hitro izumrla? Je to React? Ali pa morda Flutter, ki
               spet temelji na novem jeziku (Dart)? Le zakaj je to potrebno? Beremo forume,
               ustvarjamo svoje vtise in upamo, da gremo v pravo smer.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-77">Če nek projekt začenjamo na novo, si
               moramo prej dobro ogledati, kateri trendi so danes uveljavljeni. Prevladujejo spletne
               aplikacije in čedalje bolj računalništvo v oblaku. Že kar nekaj časa je uveljavljena
               uporaba jezikov HTML5, pa CSS in AJAX/JSON. Jezik JavaScript (ali bolje JQuery) je
               izpodrinil Flash. Apleti so že davno izumrli.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-78">Tudi načini razvoja programov so se
               spremenili. Uveljavljajo se metode hitrega inkrementalnega razvoja, ki zamenjujejo
               sekvenčni pristop. V sklopu istega projekta včasih uporabljamo po več jezikov in
               poznati moramo različne aplikacijske programske vmesnike (API). Kompleksnost
               programov se povečuje.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-79">Zaznamo lahko polarizacijo
               programiranja: po eni strani uporabljamo visokonivojske programske jezike, ki
               omogočajo večjo produktivnost programerjev, pa tudi paralelizacijo in delo v oblaku.
               Po drugi strani so včasih pomembni učinkovitost kode in večanje hitrosti izvajanja
               ter uporaba asimetričnega računanja (tudi zaradi večjedrnih sistemov). Hkrati
               zasledimo »demokratično« računalništvo, ki pomeni, da si lahko kaj malega sprogramira
               ali vsaj priredi tudi vsak manj poučen (a motiviran) uporabnik. In omenimo še
               »nevarno računalništvo«. Če nekaj postane prekompleksno, si pač omislimo novo ogrodje
               (angl. <hi rend="italic">framework</hi>), ki morda nadgrajuje nekaj prejšnjega. Stvar
               se kopiči podobno kot sklad umazane posode ali krožnikov in v sebi skriva
               neučinkovitost kode, pa tudi kakšne varnostne luknje.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-80">Sprašujemo se lahko, kaj je še pred
               nami. Še vedno se moramo spomniti na znani Moorov zakon, ki govori o tem, da se
               število tranzistorjev (torej gostota integriranih vezij) podvaja vsaki dve leti. A
               kaj, ko obstajajo tako imenovani štirje Nathanovi zakoni, ki govorijo o tem, kaj se
               dogaja s programi. Že davnega leta 1997 jih je postavil Nathan Myhrvold, nekdanji
               glavni tehnološki direktor pri Microsoftu. Pri teh zakonih dobimo zanimivo asociacijo
               na Newtonove zakone, a le poimensko. Oglejmo si jih:</p>
            <p style="text-align:justify;" xml:id="Legacy-p-81">1. Nathanov zakon: Programje je kot
               plin.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-82">Programska oprema se vedno razširi
               tako, da na koncu zasede katerikoli vsebnik (torej kapaciteto računalnika), v katerem
               je shranjena. Primere take rasti zasledimo pri novih in novih verzijah operacijskih
               sistemov, kot sta Windows in Linux, pa tudi pri razraščanju kode brkljalnikov.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-83">2. Nathanov zakon: Programska oprema
               raste, dokler je ne omeji Moorov zakon.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-84">Sprva se širi hitro, podobno kot se
               širi plin. A rast neizogibno upočasni zmožnost aparaturne opreme. Zato sleherni
               procesor prej ali slej poklekne. To se običajno zgodi malo pred pojavom novih
               modelov.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-85">3. Nathanov zakon: Rast programov
               omogoča Moorov zakon.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-86">Zato neprestano kupujemo nove
               računalnike. Integrirana vezja v njih so čedalje hitrejša, a cena računalnikov se
               bistveno ne spreminja. Več dobimo za isti denar. Ta fenomen se ponavlja, ker se
               pojavljajo novi in novi programi.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-87">4. Nathanov zakon: Programe
               omejujejo le človeške ambicije oziroma pričakovanja.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-88">Nikdar nam ni dovolj. Srečujemo se z
               novimi aplikacijami. In novimi pogledi, kaj je moderno.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-89">Programi in tudi samo programiranje
               je tako venomer v krizi. Kar koli dosežemo, običajno ne dosega pričakovanj
               uporabnikov. Lestvica pričakovanj se neprestano dviguje.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-90">Programiranje je umsko zahtevno tudi
               za izkušene programerje. Stalno preslikavamo med različnimi miselnimi modeli v naših
               glavah in pretvarjamo različne predstavitve v kodo in nazaj. Programi so pravzaprav
               abstrakcije in pri njihovem razumevanju si pogosto pomagamo s konkretnimi
               primeri.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-91">Pomagamo si s pristopi, kot je
               objektno usmerjeno programiranje, in z uporabo višjih programskih jezikov. Pogosta
               praksa je tudi pristop kopiraj/prilepi, ki temelji na uporabi »izrezkov kode« (angl.
                  <hi rend="italic">code snippets</hi>).</p>
            <p style="text-align:justify;" xml:id="Legacy-p-92">Vemo, da še otroci bolje razumejo
               nekaj, kar vidijo, v primerjavi s tem, kar le slišijo. Kar čutimo, takoj razumemo,
               besede pa moramo najprej analizirati, če želimo vedeti njihov pomen. To ni problem
               pri kratkih stavkih. Dolga besedila pa terjajo več časa in napora. Tako je tudi s
               programsko kodo. Nekateri izvorni programi so težko razumljivi in včasih je
               enostavnejše, da jih razvijemo kar znova.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-93">Bo kar držalo, da so programski
               jeziki namenjeni ljudem in ne računalnikom in da smo še v zgodnjem obdobju zgodovine
               programiranja. Velik premik je predstavljal prehod od luknjanih kartic in trakov na
               interaktivno delo za računalniškimi zasloni. Naslednji premik pa bo moral upoštevati,
               da v nekaj desetletjih pričakujemo razvoj tako sposobnih računalnikov, ki bodo
               dosegli inteligenčno raven ljudi. Le kako bomo take računalnike programirali? Ali se
               bodo takih veščin učili sami? Si bodo sami izmišljali nove standarde? Bodočnost bo
               vznemirljiva. Morda pa nas mora skrbeti.</p>
         </div>
         <div type="chapter" xml:id="ch02-en" xml:lang="en" corresp="#ch02">
            <head xml:id="Legacy-head-24">2. Development and obsolescence of programs – the
               programmer’s challenge and nightmare</head>
            <docAuthor xml:id="Legacy-docAuthor-4">
               <ref target="#study01.5-en">Saša Divjak</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-94">I belong to the older generation of
               programmers, with my first programming experience dating back to 1967 and the
               legendary Zuse Z32 computer. The beginning of the 1970s was marked by punched cards
               and perforated tape. Micro- and sometimes minicomputers were programmed in an
               interesting way back then. Computers were equipped with a teletype, a peripheral unit
               that allowed typing, printing, paper tape reading and punching. Software was prepared
               and run in this order:</p>
            <p style="text-align:justify;" xml:id="Legacy-p-95">The first step was to set the
               computer up with the text editor, saved as binary code on the tape. Then you wrote a
               program and punched the source code (often in assembly language) to a new tape. Next
               was reading of the assembler, which was again coded in binary form on a separate
               tape. And then reading of “your own” program in the source code could follow. As far
               as I can remember, reading was done in two steps as well because the assembler needed
               at least two phases to complete the process. Finally, if everything went (fairly)
               well, you could punch a new tape with your own program in binary code. Then came
               reading of the new binary program and its execution. What now takes a fraction of a
               second used to take quite a few minutes and you could only hope you hadn’t made a
               mistake, or the whole process had to be repeated.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-96">When programming microcomputers,
               your own machine code program was usually “burned” into EPROM (an integrated circuit
               which formed part of the microcomputer’s memory). This is how we developed various
               microcomputer-supported automation protocols. But programmers tend to get things
               wrong. Because the whole cycle took a while to complete, we often (whenever possible)
               made corrections directly in the machine code, thus skipping the time-consuming
               punching process. As a result, the program worked correctly in EPROM, but the source
               code did not match anymore. Which is very wrong, of course.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-97">Mentally jumping back and forth from
               assembly language to the machine code of the program was nothing special. Afterall
               back then , we often entered the bootstrap loader using the switches of the computer
               console. It became a habit, and it’s perhaps no surprise that we knew sequences of
               dozens of commands at the machine level by heart. This is an example of the kind of
               experience I had with the first generation of Digital PDP 11 computers in the
               1970s.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-98">Before I continue, I would like to
               point out that I lectured, at the Faculty of Computer and Information Science, on
               programming, systems software and operating systems, and, what I loved the most,
               computer graphics. This is reflected in some of the memories I mention further
               on.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-99">There are now over 9,000 registered
               programming languages in the world, and the way we program computers has changed
               significantly. In the 1980s, we introduced the C programming language to the computer
               and information science study course at the then Faculty of Electrical Engineering
               and Computer Science, and to this day it serves as our “Latin”, and a solid
               foundation for many other programming languages. In 1997 we introduced the Java
               programming language. Being the main lecturer, I always worried about the constant
               development of this fresh programming language, which actually went through some
               major transformation in the following years. We used these programming languages for
               various projects.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-100">On the other hand, in the late
               1990s we already used JavaScript for programming web applications, and it is still
               just as popular. Later on object-oriented programming was joined by other approaches
               as they emerged. Among them was component-oriented programming, which used various
               problem-oriented libraries to build new applications by combining their own source
               code and function modules offered by the libraries. Why reinvent the wheel when
               solutions are already available? For instance, supporting 2D and 3D graphics or
               running various more or less complex, tested and effective routines? This type of
               approach requires the knowledge of APIs (Application Programming Interfaces), but
               speeds up the development process quite substantially. As a consequence, the rapid
               development of new versions eventually always leads to different components of our
               applications being incompatible with each other, therefore making the software
               obsolete. Particularly dangerous is the “mixing” of different technologies from
               different developers, who each follow their own standards and guidelines. One of the
               examples would be the now-forgotten Virtual Reality Markup Language (VRML), which
               emerged along with JavaScript and enabled quite decent 3D visualization and 3D scene
               animation at the time. Combining VRML and JavaScript languages enabled creating very
               attractive 3D visualizations and interactive simulations of natural phenomena. These
               examples are now completely obsolete, and can no longer be displayed (truth be told
               modern 3D graphics are something completely different). You may remember the Java
               applets, which enabled various applications (and 3D visualizations) in our browsers.
               Then it transpired that such technology had too many security flaws, because it could
               work outside of the advertised supposedly safe “sandbox”. One browser after another
               disabled these applets in their upgraded versions. Today it is only possible to see
               them only on computers with purposefully installed obsolete operating systems and
               browsers. Often we can achieve this using virtual machines on the computer.
               Developers were eager to find solutions in similar technologies in order to urgently
               address this issue. Many of them therefore switched back to the once-popular Flash
               and its programming language, called ActionScript. In some cases that helped preserve
               up to 80% of their code. Later it transpired we were hopelessly wrong. Flash, and
               ActionScript along with it, are now extinct. JavaScript and jQuery were the way to
               go, due to their high programming efficiency. Once again various libraries came in
               handy for the effective and uniform development of user interfaces and similar
               systems etc..</p>
            <p style="text-align:justify;" xml:id="Legacy-p-101">Nowadays we are surrounded by
               numerous mobile devices, such as smartphones, tablets and large or small laptops and
               desktop computers. Due to a large variety in screens, responsive design was developed
               to enable a similar user experience across all devices, regardless of the size and
               resolution of the screen. What is helpful in developing such applications? The jQuery
               Mobile library seems like a logical step, because it enables the planning of graphic
               user interfaces that can suit various devices. But there are other options, such as
               the popular Bootstrap. This was all well and good, but only for a short while, and
               jQuery was upgraded to the next versions (version 3 at the time of writing this
               paper). Development tools are suddenly able to send the developer warnings about
               parts of the code being obsolete or deprecated. If nothing else this is rather
               unpleasant, and we should worry about code that is becoming old and will probably
               become unusable over time. Well, we could migrate the code to comply with the new
               rules. This task, although time-consuming and painfully tedious because it requires a
               systematic approach, is necessary to keep track of progress. But there is a trap or
               two behind the corner. The development of jQuery Mobile stopped, for instance, and it
               no longer followed new versions of jQuery. We could do another migration or abandon
               the code of such an obsolete library.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-102">Today we talk about extinct
               languages, and a programmer’s work is far from finished after an attractive
               application is complete. Its maintenance over time requires extra effort.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-103">One of the questions a programmer
               may have is who to trust and follow so that his or her efforts do not go to waste too
               fast. Certain giant, global players could offer some answers, but even this is not
               risk-free. If I recall 3D graphics, I remember Microsoft’s Silverlight technology,
               which offered an array of beautiful 3D worlds and their animation. The trap this time
               was that it was a Microsoft product. Will others follow? Other operating systems
               exist beside Microsoft Windows. And so it happened that Silverlight did not catch on,
               and is now abandoned.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-104">The dilemmas developers face
               nowadays are no different. The development of Android and iOS applications is very
               attractive due to the popularity of mobile devices. There are quite a few developer
               platforms available on the internet. But which ones do we think will last at least a
               little bit longer? And which will die out quickly? Is it React, or perhaps Flutter,
               which is based on a brand-new language called Dart? Why is this even necessary? We
               read forums and shape our opinions in the hope that our direction is the right
               one.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-105">If we start a project from scratch,
               the first thing to do is to analyze the prevailing trends. Web applications and
               increasingly cloud computing are the most popular. For a while HTML5, CSS and
               AJAX/JSON have been the principal languages to use. JavaScript (or better yet JQuery)
               has superseded Flash. Applets have been long gone.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-106">And program development has
               changed. Rapid incremental development with a sequential approach is gaining
               momentum. When designing one single project, programmers sometimes use various
               languages and have to know different APIs. Programs are increasingly complex.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-107">One can observe the polarization of
               programming: On the one hand, we use high-level programming languages boosting
               programmers’ productivity, parallelization and ability to work in cloud environments.
               On the other hand, code effectiveness, execution speed and asymmetric calculations
               (also due to multi-core systems) can sometimes be important as well. Then there is
               “democratic” computing, which means that even a less knowledgeable (but motivated)
               user can develop a small segment, or at least tailor it to their needs. We must also
               not forget about “dangerous” computing. If something gets too complex a new framework
               can be designed, and it may upgrade the previous one. In this way, stacking looks a
               lot like a stack of dirty dishes, with ineffective code or security vulnerabilities
               somewhere within.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-108">We may wonder what lies ahead. Let
               us not forget Moore’s famous law, which says that the number of transistors (i.e. the
               density of integrated circuits) doubles every two years. Then there are four laws
               postulated in 1997 by Nathan Myhrvold, formerly Chief Technology Officer at
               Microsoft, that discuss what is happening to programs. His laws of software spark off
               an interesting association with Newton’s laws. Let’s take a look.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-109">1st Nathan’s law: Software is a
               gas.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-110">It always expands to fit whatever
               container it is stored in (i.e. the computer’s capacity). Such expansion can be
               observed in numerous new versions of operating systems, such as Windows and Linux,
               and in the ever-growing length of browsers’ code.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-111">2nd Nathan’s law: Software grows
               until it becomes limited by Moore’s law.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-112">The growth of software is initially
               rapid, like a gas expanding, but is inevitably limited by the rate of increase in
               hardware speed. So every processor fails at one point. This usually happens just
               before new models see the light of day.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-113">3rd Nathan’s law: Software growth
               makes Moore’s law possible.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-114">People buy new hardware because the
               software requires it. Integrated circuits are faster than ever, but the price of
               computers remains more or less the same. We get better value for our money. This
               phenomenon goes on and on, because new programs emerge all the time.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-115">4th Nathan’s law: Software is
               limited only by human ambition and expectation.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-116">We never get enough. We get to work
               with new applications and new ideas of what is popular.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-117">Programs and programming are always
               in a state of crisis. Whatever we achieve rarely meets the expectations of the users.
               The bar of expectation is constantly rising.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-118">Programming is challenging even for
               experienced programmers. We constantly switch from one thought model to another, and
               translate various solutions to the code and back. In fact, programs are abstractions,
               and we often use concrete examples to understand them.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-119">Also helpful are approaches such as
               object-oriented programming, and the use of high-level programming languages. Another
               common practice is the copy/paste approach, which is based on using code
               snippets.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-120">It is a well-known fact that even
               children can understand something better with a visual example. We can easily
               understand what we feel, but words have to be analyzed first to get to their meaning.
               Short sentences are not a problem. Long texts, however, are more time-consuming and
               exhausting. And program code is no different. Some source programs are difficult to
               understand and sometimes it is easier to develop them from scratch.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-121">It is true that programming
               languages are intended for people, not computers, and that we are still at the dawn
               of the history of programming. We took a leap from punched cards and tapes to
               interactive work behind computer screens. The next shift will have to take into
               account the fact that in a few decades we expect computers to have a human
               intelligence level. How will we program such computers? Will they learn the skills by
               themselves? Will they come up with new standards? The future will be exciting. And
               perhaps we should be worried.</p>
         </div>
         <div type="chapter" xml:id="ch03" xml:lang="sl" corresp="#ch03-en">
            <head xml:id="Legacy-head-25">3. Od BESS do EVA, arhivski izziv</head>
            <docAuthor xml:id="Legacy-docAuthor-5">
               <ref target="#study01.2">Primož Jakopin</ref>
            </docAuthor>
            <div type="subchapter" xml:id="ch03-sub01" xml:lang="sl" corresp="#ch03-sub01-en">
               <head xml:id="Legacy-head-27">1. Uvod</head>
               <p style="text-align:justify;" xml:id="Legacy-p-122"> Slovenski Računalniški muzej je
                  ob zelo primernem času podal pobudo za organizacijo okrogle mize o dediščini
                  informacijskih orodij (izključno naprednih), katere najpomembnejši del je
                  programje. Leta 1960 je izšel prvi glasnik računalniške dobe v Sloveniji, in sicer
                  knjiga profesorja Franceta Križaniča z naslovom <hi rend="italic">Elektronski
                     aritmetični računalniki</hi>, ki je temeljila na njegovih izkušnjah pri delu z
                  računalnikom <ref target="https://en.wikipedia.org/wiki/Ural_(computer)">
                     <hi rend="underline">Ural-1</hi>
                  </ref> na Državni univerzi v Moskvi (MGU). Leta 1962 je v Sloveniji začel delovati
                  prvi računalnik <ref target="https://en.wikipedia.org/wiki/Z23_(computer)">
                     <hi rend="underline">Zuse Z23</hi>
                  </ref> in na srečo je z nami še kar nekaj njegovih uporabnikov, ki lahko
                  prispevajo svoje izkušnje iz prve roke. </p>
               <p style="text-align:justify;" xml:id="Legacy-p-123">V članku so prikazane avtorjeve
                  izkušnje na njegovi poklicni poti po prehodu z velikih računalnikov na osebne
                  mikroračunalnike, pa tudi področje urejevalnikov besedil z orodji za jezikovne
                  tehnologije in korpusno jezikoslovje, vključno z leksikalnim spletnim iskalnikom.
                  Predstavitvi avtorjevega dela je na koncu dodan tudi avtorjev predlog za razvoj
                  spletnega muzejskega eksponata v obliki rešitve, ki bila zasnovana na podoben
                  način kot vikipedija.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub02" xml:lang="sl" corresp="#ch03-sub02-en">
               <head xml:id="Legacy-head-28">2. STRUCTRAN</head>
               <p style="text-align:justify;" xml:id="Legacy-p-124"> Ob koncu šestdesetih let in
                  zlasti v zgodnjih sedemdesetih letih 20. stoletja je postalo jasno, da so
                  programski jeziki tistega časa, kot sta na področju znanosti in tehnologije
                  predvsem <ref target="https://en.wikipedia.org/wiki/Fortran">
                     <hi rend="underline">FORTRAN</hi>
                  </ref>, v poslovnem okolju pa <ref target="https://en.wikipedia.org/wiki/COBOL">
                     <hi rend="underline">COBOL</hi>
                  </ref>, manj primerni za vse kompleksnejše projekte. Dolgi in zapleteni algoritmi
                  so imeli za posledico orjaške količine izvorne kode, ki jo je bilo vedno težje
                  posodabljati in vzdrževati. Glavni razlog težav je bilo to, da so bili tedanji
                  programski jeziki bližje strojni kodi in niso bili dovolj abstraktni oz.
                  strukturirani. Profesor Edsger Dijkstra je leta 1968 objavil pismo z naslovom <ref
                     target="https://en.wikipedia.org/wiki/Considered_harmful">
                     <hi rend="italic underline">Stavek Go To je škodljiv (angl. Go To Statement
                        Considered Harmful)</hi>
                  </ref>. Zaradi preskakovanja gor in dol po kodi se hitro izgubi nit, kaj je hotel
                  programer, tudi njemu samemu, še posebej nekaj tednov ali mesecev pozneje. Ta
                  zamisel je vodila do razvoja strukturiranega programiranja, torej kodiranja brez
                  stavkov Go To, ki so jih nadomestili s krmilnimi strukturami z začetkom in koncem,
                  kot je IF ELSE ENDIF, ter z zankami, kot so FOR ENDFOR, REPEAT ENDREPEAT, WHILE
                  ENDWHILE.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-125">Ker je razvijanje prevajalnika
                  zelo dolgotrajno in zamudno, je Vladimir Batagelj z Oddelka za matematiko na
                  Fakulteti za naravoslovje in tehnologijo <ref
                     target="https://en.wikipedia.org/wiki/University_of_Ljubljana">
                     <hi rend="underline">Univerze v Ljubljani</hi>
                  </ref> predlagal razvoj predprocesorja STRUCTRAN, ki bi strukturirano kodo
                  prevedel v standardni FORTRAN, njegov prevajalnik pa v izvršljivo datoteko po
                  običajnem postopku. Vladimir Batagelj in Egon Zakrajšek sta zamisel leta 1975
                  opisala v članku z naslovom <ref
                     target="http://vladowiki.fmf.uni-lj.si/lib/exe/fetch.php?media=vlado:pub:conf:structran.pdf">
                     <hi rend="underline">STRUCTRAN</hi>
                  </ref>. Projekt naj bi izvedli študentje pri predmetu programiranje v šolskem letu
                  1975/76. Ker rezultati niso bili uporabni, je Egon Zakrajšek v 14 dneh pred koncem
                  šolskega leta razvil končno različico kode, in sicer na računalniku Control Data
                  Cyber 72, takrat največjem in osrednjem računalniku v Sloveniji, med njegovimi
                  uporabniki je bila tudi Univerza v Ljubljani.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-126">V spodnjem primeru je desni
                  stolpec izvzet iz prispevka Batagelja in Zakrajška – opombe so izpuščene, da je
                  besedilo čim krajše in jasnejše. Gre za <ref
                     target="https://en.wikipedia.org/wiki/Bubble_sort">
                     <hi rend="underline">najenostavnejši</hi>
                  </ref> podprogram za razvrščanje seznama celih števil, ki so vsebovana v nizu
                  tabeli TAB dolžine LENGTH. Kot pri programskem jeziku FORTRAN so vse spremenljivke
                  z imeni, ki se začnejo s črkami I, J, K, L, M in N, cela števila, razen če ni
                  določeno drugače – vnaprej so deklarirane le spremenljivke BOUND, CHANGE in TAB.
                  Različica v programskem jeziku FORTRAN (levi stolpec) ne vsebuje stavkov Go To,
                  preskoki so izvedeni s stavki IF. Izrazita premoč strukturiranega programiranja bi
                  morala biti očitna tudi osebam, ki s programiranjem nimajo izkušenj.</p>
               <figure xml:id="Legacy-figure-3">
                  <graphic url="media/jakopin1.jpg"/>
                  <head>Tabela 1: Podprogram za mehurčno razvrščanjev programskih jezikih FORTRAN in
                     STRUCTURAN</head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-127">STRUCTRAN je bilo prvo splošno
                  uporabljeno programje, ki je bilo razvito v Sloveniji. Mnogim programerjem je
                  precej olajšalo poklicno življenje, med drugim tudi avtorju tega prispevka.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub03" xml:lang="sl" corresp="#ch03-sub03-en">
               <head xml:id="Legacy-head-30">3. Od BESS do EVE EVA</head>
               <p style="text-align:justify;" xml:id="Legacy-p-128">
                  <ref target="https://en.wikipedia.org/wiki/History_of_personal_computers">
                     <hi rend="underline">Mikroračunalniška revolucija</hi>
                  </ref> se je v 70. letih začela na drugi strani Atlantika in večino starega sveta
                  je v vsej svoji razsežnosti dosegla v zgodnjih 90. letih. Čeprav so prvi osebni
                  računalniki prišli do, oprostite izrazu, širokih ljudskih množic, predvsem kot
                  stroji za igrice, so računalniški strokovnjaki v njih videli povsem nekaj drugega,
                  možnost, da bi računalnik postavili na svojo mizo, torej ne v obliki <ref
                     target="https://en.wikipedia.org/wiki/Computer_terminal">
                     <hi rend="underline">terminala</hi>
                  </ref>, prek katerega bi lahko dostopali do osrednjega računalnika, ki bi si ga
                  delili z množico drugih uporabnikov. Leta 1981 oz. na začetku leta 1982 je Saša
                  Albert, kolega iz <ref
                     target="https://sl.wikipedia.org/wiki/Narodna_in_univerzitetna_knji%C5%BEnica">
                     <hi rend="underline">Narodne in univerzitetne knjižnice</hi>
                  </ref> in vsestranski tehnični mojster, prišel do mikroračunalnika <ref
                     target="https://en.wikipedia.org/wiki/ZX81">
                     <hi rend="underline">Sinclair ZX81</hi>
                  </ref> z 1 kB spomina, snemalnikom <ref
                     target="https://en.wikipedia.org/wiki/Cassette_tape">
                     <hi rend="underline">kaset</hi>
                  </ref> kot zunanjim pomnilnikom in <ref
                     target="https://en.wikipedia.org/wiki/BASIC_interpreter">
                     <hi rend="underline">interpreterjem (sprotnim prevajalnikom) za BASIC</hi>
                  </ref>. Avtorju prispevka, ki je bil v tistem času znan programer, ga je za nekaj
                  dni posodil, da bi slednji preveril, ali bi se dalo s tem strojčkom narediti kaj
                  uporabnega. Kot monitor je uporabil svoj manjši TV-sprejemnik. Koda v BASICu za
                  izračun koordinat x, y in z jamskega poligona (jamarji merijo jame tako, da po
                  tleh postavijo točke in med njimi merijo razdalje, azimute in naklone)CAVE SURVEY
                  POINTS, ki je bila hitro zapisana na papir, je vsega skupaj obsegala en list A4 in
                  še približno deset vrstic na drugem list. Prvo stran je bilo še mogoče shraniti v
                  pomnilnik, naslednjih desetih vrstic pa ne. Saši je avtor napravo vrnil z oceno: z
                  računalnikom bi se dalo narediti kaj praktično uporabnega, vendar bi potrebovali
                  vsaj 2 kB spomina.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-129">Naslednji računalnik je bil <ref
                     target="https://en.wikipedia.org/wiki/ZX_Spectrum">
                     <hi rend="underline">Sinclair ZX Spectrum</hi>
                  </ref> z 48 kB spomina. Franci Ambrožič, kolega s Fakultete za telesno kulturo, je
                  imel v Veliki Britaniji znance, ki so mu julija leta 1982 v njegovem imenu
                  naročili računalnik. Povpraševanje je bilo tako veliko, da je izvozna cena, ki jo
                  je Ambrožič moral plačati, znašala 228 £ v primerjavi z britansko domačo ceno
                  175 £, poleg tega pa je za tuje kupce veljal skoraj šestmesečni dobavni rok.
                  Decembra 1982 so računalnik pretihotapili iz Anglije v Jugoslavijo, kjer ga je
                  Franci Ambrožič z veseljem uporabljal nekaj časa, nato pa ga je med novoletnimi
                  prazniki tako kot Saša Albert posodil avtorju prispevka, da bi presodil, ali bi ga
                  lahko uporabili za kaj konkretnega. Tokrat je bil odgovor pritrdilen. Ker naprava
                  ni imela urejevalnika besedil, ga je razvil kar avtor sam. V približno enem tednu
                  je spravil skupaj urejevalnik besedil BESS (angl. Basic Editor for the Sinclair
                  Spectrum). V celoti je bil napisan v programskem jeziku BASIC, na zaslonu pa je
                  bilo prikazanih 24 vrstic po 32 znakov. Interpreterska narava programa BASIC je
                  bila najbolj opazna med iskanjem po besedilu, saj je trajalo približno eno minuto
                  na stran (2 kB). Ker zbirni jezik še ni bil na voljo, je avtor napisal podprogram
                  za iskanje po besedilu kar neposredno v strojni kodi, dolg je bil 50 bajtov, v
                  0,05 sekunde pa je preiskal 20 kB besedila. V letih 1983 in 1984 je zasnoval
                  urejevalnik besedil TESS (urejevalnik besedil za računalnik Sinclair Spectrum,
                  angl. <hi rend="italic">Text Editor for the Sinclair Spectrum</hi>), 80 % ga je
                  bilo že v zbirnem jeziku mikroprocesorja Zilog Z80. Leta 1985 pa je nastal
                  urejevalnik INES (angl. INformation Editing System), ki je bil na voljo za široko
                  uporabo predvsem v Sloveniji, pa tudi v drugih delih Jugoslavije. Skoraj v celoti
                  je bil napisan v zbirnem jeziku in podpiral je datoteke do dolžine 21 kB. V
                  urejevalniku je bilo 24 vrstic po 64 znakov (vsak v matrici 5 x 8 pikslov), imel
                  je nastavitev za bele znake na črnem ozadju (ali obratno), tako da je le 8 %
                  TV-zaslona oddajalo škodljive žarke, in kurzor, ki ni utripal. Poleg tega na
                  zaslonu niso bile prikazane stalne moteče informacije, imel je gladko drsenje
                  vrstic po zaslonu in nova stran besedila je prepisala prejšnjo (ni bila prikazana
                  na novem praznem zaslonu). Program INES je lahko vrstice z besedilom obravnaval
                  kot zapise podatkov, pri čemer je omogočal razvrščanje, iskanje, sestavljanje
                  dopisnih seznamov (angl. mailing list) in še nekaj drugih možnosti obdelave
                  podatkov. Črno-bele slike so bile v besedilo vključene kot ubežne sekvence. Na
                  voljo je bil slovenski uporabniški priročnik na 68 straneh, za urejevalnik pa so
                  bili na voljo še dodatne programi, npr. za vnos podatkov in za razvrščanje večjih
                  datotek do velikosti 37 kB. Program in priročnik sta bila prevedena v angleški in
                  nemški jezik ter poslana računalniškim revijam v Nemčiji in Veliki Britaniji. V
                  začetku leta 1986 je programu INES sledil program EVE (Event Editor), ki je
                  omogočal še več funkcionalnosti, vendar je bil zanj narejen le kratek seznam
                  ukazov, na nekaj straneh. Nadaljnji razvoj je bil ustavljen, ker se je medtem
                  pojavil <ref target="https://en.wikipedia.org/wiki/Atari_ST">
                     <hi rend="underline">računalnik ATARI ST</hi>
                  </ref> s čudovitim, neprierno močnejšim procesorjem <ref
                     target="https://en.wikipedia.org/wiki/Motorola_68000">
                     <hi rend="underline">Motorola 68000</hi>
                  </ref>, ki je imel šestnajst 32-bitnih registri.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-130">Program EVE je nasledil STEVE
                  (ST EVent Editor, za Atari ST). Njegovo ime je bilo kot pri predhodnih programih
                  tudi v obliki kratice, vendar tokrat drugega spola. Tako kot pri <ref
                     target="https://catamaranguru.com/why-are-boats-named-after-women/">
                     <hi rend="underline">imenih ladij</hi>
                  </ref> je tudi tukaj šlo za izjemo od pravila, BESS, TESS, INES, EVA in NEVA - EVA
                  je bila EVE za PC-kompatibilne računalnike. Pri programu INES se je avtor spomnil
                  še ene znane izjave profesorja Djikstra, in sicer: <ref
                     target="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD634.html">
                     <hi rend="underline">»Mikroračunalniki niso dobri (angl. </hi>
                  </ref>
                  <ref
                     target="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD634.html">
                     <hi rend="italic underline">Microcomputers are not great</hi>
                  </ref>
                  <ref
                     target="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD634.html">
                     <hi rend="underline">).«</hi>
                  </ref> (IFIP 1977) Da bi kar najbolje izkoristili naprave, ki jih poganjajo
                  mikroprocesorji (da bi hitrost programja povečali vsaj za trikrat), so morali
                  programerji tu programirati v strojnem jeziku. Program STEVE je bil iz 75.000
                  vrstic takšne kode, ki je registre obravnavala neposredno, brez elegance in
                  preprostosti strukturiranega programiranja.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-131">Slovenska različica programa
                  STEVE je bila skupaj s priročnikom na 248 straneh pripravljena leta 1986 (drugi
                  priročnik na 290 straneh je leta 1989 napisal Hinko Muren). Nato sta leta 1987
                  sledila hrvaški in nemški prevod (nemškega je prevedel Günther Weber), drugi
                  nemški priročnik sta leta 1988 pripravila Klaus Detlef Olof in Peter Wieser (na
                  356 straneh), dokončni priročnik <ref
                     target="https://jakopin.net/steve/STEve_Reference_Manual.php">
                     <hi rend="underline">STEVE Reference Manual</hi>
                  </ref> na 608 straneh pa je v angleščini izšel leta 1989. Računalnik Atari ST je z
                  več megabajti linearnega spomina, disketo in trdim diskom ter odličnim monitorjem
                  odpiral nova obzorja in omogočal uresničevanje idej, ki so presegale zmogljivosti
                  osrednjih računalnikov. Program STEVE je prinesel kar nekaj novosti. Med drugim so
                  bili vsi njegovi viri, tj. od sporočil na zaslonu, postavitve tipkovnice, pisav na
                  zaslonu in tiskalniku do okrajšav ukazov, shranjeni v ločeni datoteki virov z
                  imenom STEVE.RSF, ki jo je bilo mogoče urejati z urejevalnikom samim, s programom
                  STEVE. Če omenimo še nekaj drugih lastnosti: velikost datoteke je bila omejena le
                  z razpoložljivim pomnilnikom, vrstice urejevalnika so lahko vsebovale besedilo ali
                  črno-belo grafiko, na voljo sta bila dva grafična urejevalnika, zbirke podatkov je
                  znal STEVE obdelovati tudi kot verige datotek, kjer je edino omejitev
                  predstavljala velikost prostora na disku. Obstajali so tudi lastno namizno
                  založništvo, računalniško podprte učne ure (angl. Computer Aided Instruction) in
                  tudi lasten <ref target="https://en.wikipedia.org/wiki/Graphical_user_interface">
                     <hi rend="underline">grafični uporabniški vmesnik</hi>
                  </ref>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-132">STEVE je bil na razpolago v
                  Jugoslaviji, Nemčiji, Avstriji, Švici, državah Beneluksa in Skandinaviji.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-133">V zgodnjih 90. letih je znamka
                  ATARI propadla, zato je moral avtor zamenjati računalniško platformo in pričel je
                  pisati za <ref target="https://en.wikipedia.org/wiki/IBM_PC_compatible">
                     <hi rend="underline">osebni računalnik tipa IBM PC)</hi>
                  </ref>. V tistem času so bili osebni računalniki zasnovani na osnovi
                  mikroprocesorja <ref target="https://en.wikipedia.org/wiki/Intel_80286">
                     <hi rend="underline">Intel 80286</hi>
                  </ref>, ki je bil neprimerno slabši od Motorole 68000. Avtorju se je to zdelo zelo
                  žalostno in izkazalo se je, da ga tudi ni bilo smiselno programirati v strojnem
                  jeziku. Primeren operacijski sistem za uporabo na osebnih računalnikih z grafičnim
                  uporabniškim vmesnikom za PC (Windows 95), primerljiv z računalniki Atari ST ali
                     <ref target="https://en.wikipedia.org/wiki/Macintosh">
                     <hi rend="underline">računalniki Apple Macintosh</hi>
                  </ref>, je bil na voljo šele leta <ref
                     target="https://en.wikipedia.org/wiki/Windows_95">
                     <hi rend="underline">1995</hi>
                  </ref>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-134">Čeprav bi prenos programa STEVE
                  in njegove obsežne baze strank na osebni računalnik v povsem nespremenjeni obliki
                  predstavljal takrat najboljšo poslovno idejo, pa ljudje, zlasti razvijalci, vedno
                  poskušajo ustvariti nekaj novega, boljšega in bolj vznemirljivega. Zato se je
                  avtor na podlagi svojih dotedanjih izkušenj odločil narediti nov in močno
                  izboljšan urejevalnik, v katerem je obdržal vse uporabne vidike programa STEVE in
                  dodal nova orodja, ki bi jih lahko dobro izkoristil v nadaljnjem poklicnem
                  življenju, potem ko bi prenehal delati kot samostojni razvijalec. Novi program, ki
                  ga je poimenoval EVA, tokrat ni bil v obliki kratice, EVA kar tako. Leta 1992 se
                  je najprej imenoval EVA za DOS, za operacijski sistem Windows pa je bil prilagojen
                  leta 1996. Napisan je bil v programskem jeziku C tako kot tudi primeri v knjigi
                  avtorja <ref target="https://en.wikipedia.org/wiki/Charles_Petzold">
                     <hi rend="underline">Charlesa Petzolda</hi>
                  </ref> z naslovom <hi rend="italic">Programming Windows 95</hi>. S programskim
                  jezikom C++ se avtor ni mogel dovolj približati računalniku, da bi lahko izvedel
                  vse, kar je želel, predvsem pri uporabniškem vmesniku. Program EVA ima
                  preprostejši grafični urejevalnik, je brez računalniško podprtih učnih ur in ima
                  precej omejeno namizno založništvo. Po drugi strani pa ima pravi 16-bitni nabor
                  znakov z 2500 implementiranimi znaki, vrstice, ki lahko vsebujejo 8-bitno
                  besedilo, 16-bitno besedilo, stisnjene črno-bele grafike in enovrstične bitne
                  slike v obliki črno-belih grafik, razširjene možnosti obdelovanja podatkovnih
                  zbirk, tudi za podatkovni format XML, optično prepoznavanje znakov (OCR) kot
                  standard (pri programu STEVE je bilo to treba doplačati), oblikoslovno označevanje
                  (angl. <hi rend="italic">POS tagging</hi>) in mnoga druga jezikovnotehnološka
                  orodja, kot na primer statistično modeliranje jezika. Ena od glavnih zanimivosti
                  programa STEVE, ki je ohranjena v programu EVA, so velike enoširinske bele črke na
                  temnem ozadju. Po njihovi zaslugi je avtor ohranil svoj vid, čeprav je računalnik
                  uporabljal večino časa, med drugim tudi za izdelavo in posodabljanje spletnih
                  strani. Mnogi njegovi kolegi take sreče niso imeli, če so njihovi poklici
                  zahtevali celodnevno delo pred računalniškim zaslonom. Skoraj vsi zdaj nosijo
                  očala in zdravniki so jim priporočili uporabo računalnika eno uro ali manj na
                  dan.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-135">V juniju 2022 je bila izvorna
                  koda programa EVA dolga 158.211 vrstic, imela je 2.684 funkcij in podprogramov.
                  Program STEVE ima 414 ukazov, program EVA pa 1.385.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub04" xml:lang="sl" corresp="#ch03-sub04-en">
               <head xml:id="Legacy-head-31">4. NEVA</head>
               <p style="text-align:justify;" xml:id="Legacy-p-136">Ko je avtor leta 1998
                  zaključeval svojo doktorsko disertacijo z naslovom <ref
                     target="https://www.jakopin.net/primoz/disertacija/izvlecek.php">
                     <hi rend="underline">Zgornja meja entropije pri leposlovnih besedilih v
                        slovenskem jeziku</hi>
                  </ref> na Fakulteti za elektrotehniko Univerze v Ljubljani, ga je njegov glavni
                  mentor prof. Nikola Pavešić opozoril, da besedilo ne sme presegati 200 strani.
                  Avtor je v disertaciji obravnaval besedilni korpus s tremi milijoni besed in v
                  priloge je želel vključiti več zanimivih izvlečkov. To pa bi bistveno preseglo
                  omejitev na 200 strani, zato so mu svetovali, naj priloge objavi na spletu.
                  Predstavitev korpusa bi lepo popestrila možnost iskanja, zato se je avtor naučil
                  uporabljati vmesnik <ref
                     target="https://en.wikipedia.org/wiki/Common_Gateway_Interface">
                     <hi rend="underline">Common Gateway Interface</hi>
                  </ref> in njegov skriptni jezik. Napisal je iskalnik (angl. search engine) za
                  strežniško platformo Windows, ki je prav tako napisan v programskem jeziku C. Gre
                  za podmnožico programa EVA, ki vsebuje predvsem ustrezna podatkovna orodja z
                  izboljšanim dopisnim seznamom za izdelavo spletnih strani z rezultati iskanja.
                  Program je poimenoval NEVA (Networked EVA) in v juniju 2022 je imel 491 postopkov
                  v 25.306 vrsticah kode.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-137">Avtor se je po zaključenem
                  doktoratu leta 1999 med zaposlitvijo na <ref target="https://www.ff.uni-lj.si/">
                     <hi rend="underline">Filozofski fakulteti</hi>
                  </ref>
                  <ref target="https://sl.wikipedia.org/wiki/Univerza_v_Ljubljani">
                     <hi rend="underline">Univerze v Ljubljani</hi>
                  </ref> odločil, da bo osnovni korpus s tremi milijoni leposlovnih besedil v
                  slovenščini, ki je bil nameščen na strežniku fakultete, povečal in vanj vključil
                  dodatna besedila, ki so bila večinoma iz časnika <ref
                     target="https://en.wikipedia.org/wiki/Delo_(newspaper)">
                     <hi rend="underline">DELO</hi>
                  </ref>. Pri DELU so razvili e-poštno storitev za slabovidne (DELO za slepe), ki so
                  vsako jutro prejeli na svoj računalnik izvod v obliki besedila. Z dovoljenjem za
                  uporabo v raziskovalne in izobraževalne namene mu je uspelo velikost korpusa, ki
                  se je zdaj imenoval CORTES (CORpus of TExts in Slovenian, leta 1999), v začetku
                  leta 2000 povečati na 28 milijonov besed. Korpus je pritegnil pozornost <ref
                     target="https://isjfr.zrc-sazu.si/sl/predstavitev">
                     <hi rend="underline">Inštituta za slovenski jezik Frana Ramovša ZRC SAZU </hi>
                  </ref>(ISJ), kjer je bil avtor zaposlen s polovičnim delovnim časom. Ker
                  Filozofska fakulteta ni mogla zagotoviti institucionalnega okvira za korpus CORTES
                  in ker sta obe ustanovi tudi sicer zelo povezani, avtorja ni bilo težko
                  prepričati, da korpus prenese na strežnik <ref target="https://zrc-sazu.si/sl">
                     <hi rend="underline">Raziskovalnega centra Slovenske akademije znanosti in
                        umetnosti</hi>
                  </ref>, katerega član je tudi ISJ. Maja leta 2020 je bil korpus preimenovan v Nova
                  beseda, celotno spletno mesto pa v <ref target="http://bos.zrc-sazu.si/index.html">
                     <hi rend="underline">BOS – Bank of Slovenian (Vsenarodni korpus besedil v
                        slovenskem jeziku)</hi>
                  </ref>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-138">Avtor se je preselil na
                  Inštitut, kjer je vodil novoustanovljeni Laboratorij za korpus slovenskega jezika,
                  na Filozofski fakulteti pa je še naprej, s polovico delovnega časa poučeval
                  jezikovne tehnologije.</p>
               <figure xml:id="Legacy-figure-4">
                  <graphic url="media/BOS_si.jpg"/>
                  <p style="text-align:justify;">
                     <hi rend="italic">Slika 1: Spletni portal </hi>
                     <ref target="http://bos.zrc-sazu.si">
                        <hi rend="italic underline">http://bos.zrc-sazu.si</hi>
                     </ref>
                  </p>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-140">Sčasoma so mnogi leksikalni viri
                  Inštituta postali dostopni prek spletnega mesta BOS, nekateri izmed njih tudi v
                  angleščini (leta 2015 je bilo vzpostavljeno novo spletno mesto <ref
                     target="https://fran.si/">
                     <hi rend="underline">Fran</hi>
                  </ref> kot glavno slovarsko spletno mesto Inštituta v slovenščini). Najpomembnejši
                  in najpogosteje uporabljeni so bili Slovar slovenskega knjižnega jezika (SSKJ,
                  1970–1991, 93.500 gesel), Besedišče slovenskega jezika (BSJ, 2006, 356.000 gesel)
                  in besedilni korpus Nova beseda (2010, 318 milijonov besed). Medtem ko je SSKJ
                  reprezentativni enojezični slovar slovenskega jezika, pa BSJ, ki ga sestavljajo
                  SSKJ, po gradivu za slovar sodobnega knjižnega jezika zbrane besede, ki niso bile
                  sprejete v Slovar slovenskega knjižnega jezika (178.457 enot), besedilni korpus
                  Nova beseda in indeks slovenskega spletnega iskalnika <ref
                     target="http://www.najdi.si/">
                     <hi rend="underline">NAJDI.SI</hi>
                  </ref>, kaže živahnost in prilagodljivost slovenščine pri tvorjenju novih besed.
                  Velikost slovarja BSJ je smiselna tudi v primerjavi s <ref
                     target="https://www.merriam-webster.com/help/faq-how-many-english-words">
                     <hi rend="underline">številom besed v angleščini</hi>
                  </ref>. Spodnja primera ponazarjata uporabo programa NEVA pri proučevanju dveh
                  komponent imena (slovenskega) Računalniškega muzeja.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-141">Tabela 2: Rezultat iskanja
                  »muzea« ali »muzej« na seznamu slovenskih besed</p>
               <p style="text-align:justify;" xml:id="Legacy-p-142">Prikazanih je 32 besed, izmed
                  katerih je 9 besed poudarjenih – te besede so navedene tudi v SSKJ. Izmed vseh teh
                  besed je 20 samostalnikov, 10 pridevnikov in dva glagola. Zanimivo izstopata dve
                  posebni vrsti muzejev, in sicer ekomuzej in fotomuzej.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-143">Tabela 3: Rezultat iskanja
                  »računal« na seznamu slovenskih besed</p>
               <p style="text-align:justify;" xml:id="Legacy-p-144">Prikazanih je 82 besed, izmed
                  katerih je le 6 besed navedenih v SSKJ, saj je slovar nastajal do leta 1991, kar
                  je bilo obdobje pred vzponom spleta. Nenavaden je le en vnos, in sicer
                  obračunalec. Beseda bi lahko imela neračunalniški pomen, a se je po podrobnem
                  pregledu izkazalo, da izhaja iz besednih iger.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub05" xml:lang="sl" corresp="#ch03-sub05-en">
               <head xml:id="Legacy-head-32">5. Arhivski izziv</head>
               <p style="text-align:justify;" xml:id="Legacy-p-145">Vsak muzejski eksponat, še
                  posebej če so ga ustvarile človeške roke in srce, vzbudi številne občutke, vtise
                  in misli, pa naj gre za <ref
                     target="https://commons.wikimedia.org/wiki/File:Venus_of_Tan-Tan.jpg">
                     <hi rend="underline">prvi kipec Venere</hi>
                  </ref>, <ref target="https://en.wikipedia.org/wiki/Divje_Babe_flute">
                     <hi rend="underline">55.000 let staro piščal</hi>
                  </ref> ali modernejši <ref target="https://cdny.de/p/t/5/088/4469638.jpg">
                     <hi rend="underline">uhan iz dragih kamnov</hi>
                  </ref>. Kako ga je avtor izdelal? Kaj ga je pripeljalo do te odločitve? Kdo ga je
                  uporabljal? Vsa ta vprašanja so še bolj izrazita pri računalniških eksponatih, vse
                  od posameznih kosov strojne opreme in prvih znanilcev digitalne dobe do programja,
                  katerega namen je čim boljše uporabiti starejše in tudi novejše kibernetske
                  stroje.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-146">Avtorjeve izkušnje z razvojem
                  praktično istega izdelka bodo proti koncu tega leta štele 40 let. Počasi je ta
                  urejevalnik besedil pod svoje okrilje vzel številna orodja, ki so avtorju pomagala
                  rešiti nešteto nalog, s katerimi se je srečeval v poklicnem življenju in med
                  obštudijskimi dejavnostmi. Prve različice, od BESS do INES in v manjši meri tudi
                  STEVE, so kar najbolje izkoristile mikroprocesor računalnika. Pozneje je strojna
                  oprema postala dovolj hitra, da je omogočala strukturirano programiranje v
                  visokonivojskem jeziku, program pa je bilo lažje vzdrževati in dopolnjevati. Pri
                  razvoju je bilo upoštevanih mnogo potreb in predlogov uporabnikov. Spremembe so se
                  v prvem desetletju vrstile zelo hitro, drugo desetletje so zaznamovali vzponi in
                  padci, v tretjem desetletju je bilo število sprememb zmernejše, v četrtem pa je do
                  njih prihajalo le občasno. Koda zgodnjih različic programov BESS, TESS in INES je
                  bolj ali manj izgubljena. Med pogostimi selitvami se je sled za številnimi
                  starejšimi mediji izgubila, kasete Sinclair ZX Microdrive pa niso bile posebej
                  zanesljive in bile so tudi zelo majhne. Programa STEVE in EVA za diskovni
                  operacijski sistem DOS sta bila shranjena na disketah, ki so še vedno pri avtorju,
                  vendar njihovo stanje ni znano. Format disket z računalnika ATARI ST, ni berljiv
                  na osebnih računalnikih (PC), zato bi bila pomoč Računalniškega muzeja dobrodošla
                  pri pripravi kataloga te zbirke. Izvorni referenčni priročnik STEVE v formatu
                  STEVE DTP, ki ga je lahko bral tudi program EVA, se je na srečo ohranil, zato je
                  bil med pripravami na okroglo mizo simpozija Računalniškega muzeja junija 2022
                  pretvorjen v obliko HTML in <ref
                     target="https://jakopin.net/steve/STEve_Reference_Manual.php">
                     <hi rend="underline">objavljen na spletu</hi>
                  </ref>. Izvorni kodi programov EVA in NEVA, ki sta bili razviti in vzdrževani v
                  okoljih <ref target="https://visualstudio.microsoft.com/vs/community/">
                     <hi rend="underline">Microsoft Visual C</hi>
                  </ref> in <ref target="https://www.bloodshed.net/">
                     <hi rend="underline">Bloodshed's Dev-C++</hi>
                  </ref>, še vedno hrani avtor.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-147">Kako najbolje ohraniti to
                  dediščino? Kako jo ustrezno predstaviti v Računalniškem muzeju? In kako eksponat
                  prenesti v spletno okolje? Za začetek bi bila ena od možnosti vključitev v <ref
                     target="https://archive.org/details/software">
                     <hi rend="underline">spletni arhiv The Internet Archive Software
                        Collection</hi>
                  </ref>, še bolje pa bi bilo, da bi ga ohranili v delujočem stanju. V nasprotju z
                  večino naše digitalne zgodovine programa EVA in NEVA še vedno delujeta, sta v
                  uporabi.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-148">Vloga knjižničarja se je
                  spremenila od osebe, ki je v preddigitalni dobi zainteresiranemu uporabniku
                  povedala, kje in v kateri knjigi bo našel informacije, ki jih rabi, do osebe, ki
                  uporabniku svetuje, kje na spletu bo našel tisto, kar potrebuje. Zato bi se morala
                  spremeniti tudi vloga muzejskega kustosa in muzejskega vodiča. Z boljšim in
                  poglobljenim znanjem o eksponatu programske opreme ga je obiskovalcem muzeja
                  mogoče predstaviti na živahen in interaktiven način, ki je neprimerljivo boljši od
                  opisa na spletu. Še toliko več, če programska oprema še vedno deluje, kot to na
                  primer velja za programa EVA in NEVA. Takšen kustos bi bil tudi dragoceni vir
                  informacij za osebe, ki morajo najti rešitev za problem, ki je bil verjetno že
                  rešen, vendar rešitev ni splošno znana, je na spletu slabo dokumentirana ali pa
                  sploh ne.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-149">Takšno muzejsko predstavitev bi
                  najlažje pripravila oseba, ki dobro pozna temo, najbolje kar avtor sam, in
                  muzejski kustos, ki bi predstavitev izvedel. Ta postopek bi zagotovo zahteval kar
                  nekaj časa, vendar bi bil ta čas dobro porabljen.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-150">Predstavitev programske opreme v
                  obliki spletne razstave je povezana tematika, a je vendarle drugačna. Čeprav je
                  spletni arhiv <ref target="https://archive.org/details/software">
                     <hi rend="underline">The Internet Archive Software Collection</hi>
                  </ref> zelo pomemben, pa programske opreme ne predstavlja na enoten in muzejski
                  način, tudi viri niso na voljo (odprtokodna platforma <ref
                     target="https://sourceforge.net/">
                     <hi rend="underline">SourgeForge</hi>
                  </ref> ima dvakrat manjše število vnosov in ne gre za arhivsko zbirko). Da bi
                  programa EVA in NEVA lahko predstavili v obliki spletnih muzejskih eksponatov, bi
                  morali uporabiti medij, ki bi bil podoben spletnemu mestu <ref
                     target="https://en.wikisource.org/wiki/Main_Page">
                     <hi rend="underline">Wikisource</hi>
                  </ref>, vendar prilagojen predstavitvi programske opreme. V nasprotju s knjigami,
                  kjer lahko bralec stran za stranjo uživa v umetniškem odsevu človeške domišljije,
                  lahko delovanje programske opreme občudujemo ob obdelovanju niza podatkov, in
                  sicer od majhnega števila, ki je seme za generator naključnih števil do
                  urejevalnika besedil, ki lahko obdeluje <ref
                     target="https://en.wikipedia.org/wiki/Wikipedia:Size_of_Wikipedia">
                     <hi rend="underline">4 milijarde besed</hi>
                  </ref> v člankih na Wikipediji (toliko jih je bilo aprila 2022).</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch03-en" xml:lang="en" corresp="#ch03">
            <head xml:id="Legacy-head-33">3. From BESS to EVA, archival challenge</head>
            <docAuthor xml:id="Legacy-docAuthor-6">
               <ref target="#study01.2-en">Primož Jakopin</ref>
            </docAuthor>
            <div type="subchapter" xml:id="ch03-sub01-en" xml:lang="en" corresp="#ch03-sub01">
               <head xml:id="Legacy-head-34">1. Introduction</head>
               <list type="ordered" xml:id="Legacy-list-1">
                  <item>The initiative by the Slovenian Computer History Museum to organize a panel
                     discussion on the legacy of informatization tools, of which software is the
                     most important, has come at a very appropriate time. The year 1960 saw the
                     first herald of the computer era in Slovenia, when a book by Professor France
                     Križanič was published, <hi rend="italic">Elektronski aritmetični računalniki
                        </hi>(<hi rend="italic">Electronic arithmetic computers</hi>), based on his
                     experience with a <ref target="https://en.wikipedia.org/wiki/Ural_(computer)"
                        >Ural-1</ref> computer at the Moscow State University (MGU). In 1962 the
                     first computer in Slovenia was put to use, a <ref
                        target="https://en.wikipedia.org/wiki/Z23_(computer)">Zuse Z23</ref>, and
                     luckily quite a few of its users are still with us, to share their first-hand
                     experiences.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-151">In the paper the author’s
                  post-mainframe software path is illustrated, involving text editors with language
                  technology and corpus linguistic features, including a lexical web search engine.
                  In the end the possibility of a Wikipedia-inspired solution to the presentation of
                  his work as an online museum exhibit is discussed.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub02-en" xml:lang="en" corresp="#ch03-sub02">
               <head xml:id="Legacy-head-35">2. STRUCTRAN</head>
               <list type="ordered" xml:id="Legacy-list-2">
                  <item> At the end of the 1960s and even more in the early 1970s, it became clear
                     that the programming languages of the day – in science and technology mostly
                        <ref target="https://en.wikipedia.org/wiki/Fortran">FORTRAN</ref>, in
                     business environment <ref target="https://en.wikipedia.org/wiki/COBOL"
                        >COBOL</ref> – were not entirely suited for the tasks they were used for.
                     Long and complex programming tasks produced immense volumes of source code,
                     which was increasingly difficult to update and maintain, all because these two
                     programming languages were still closer to machine code, and not abstract,
                     structured enough to work with easily. In 1968 Professor Edsger Dijkstra
                     published a letter titled “<ref
                        target="https://en.wikipedia.org/wiki/Considered_harmful">Go To Statement
                        Considered Harmful</ref>”. Jumping from place to place, up and down, such
                     code does indeed make one lose any overview of the intentions of the programmer
                     very quickly, and profoundly, even more so after returning to the same code
                     some time – days, weeks or months – later. This led to so-called structured
                     programming, coding without Go To statements but with control structures, which
                     have a beginning and an end, such as IF ELSE ENDIF, loops with FOR ENDFOR,
                     REPEAT ENDREPEAT, WHILE ENDWHILE.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-152">As writing a new compiler is a
                  long and cumbersome task, Vladimir Batagelj from the Department of Mathematics at
                  the Faculty of Natural Sciences and Technology, <ref
                     target="https://en.wikipedia.org/wiki/University_of_Ljubljana">University of
                     Ljubljana</ref>, suggested the development of STRUCTRAN, a program which would
                  convert structured code into standard FORTRAN, to be compiled into an executable
                  file. The idea was outlined in a paper titled “<ref
                     target="http://vladowiki.fmf.uni-lj.si/lib/exe/fetch.php?media=vlado:pub:conf:structran.pdf"
                     >STRUCTRAN</ref>”, authored by Batagelj and Egon Zakrajšek in 1975. The project
                  was intended as a piece of cooperative work among students, during a programming
                  course in 1975/76. As the result was not satisfactory, Zakrajšek produced the
                  final code in 14 days at the end of the school year on a Control Data Cyber 72
                  mainframe computer, the main computer in the country that was also shared with
                  others at the University of Ljubljana.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-153">In the example below the right
                  column was taken from the paper by Batagelj and Zakrajšek, with comment lines
                  omitted for brevity and clarity. It is a very simple subroutine which sorts a list
                  of integer numbers, contained in the array TAB, LENGTH long. As in FORTRAN all
                  variables with names starting with I, J, K, L, M and N are by convention integer,
                  unless specified otherwise, and only BOUND, CHANGE and TAB are declared. The
                  FORTRAN version of the example (left column) contains no Go To statements but
                  jumping is evident from the IF statements. Even to a non-programmer, the
                  superiority of structured programming should be clearly evident.</p>
               <figure xml:id="Legacy-figure-5">
                  <graphic url="media/jakopin1.jpg"/>
                  <head>Table 1: Bubble sort subroutine in FORTRAN and STRUCTRAN</head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-154">STRUCTRAN was the first widely
                  used general-purpose software that was produced in Slovenia. It made professional
                  life much easier for many programmers, including the author of these lines.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub03-en" xml:lang="en" corresp="#ch03-sub03">
               <head xml:id="Legacy-head-37">3. From BESS to EVA</head>
               <p style="text-align:justify;" xml:id="Legacy-p-155">The m<ref
                     target="https://en.wikipedia.org/wiki/History_of_personal_computers"
                     >icrocomputer revolution</ref> started on the other side of the Atlantic in the
                  1970s, and reached, to the full extent, most of the “Old World” in the early
                  1980s. While the first personal computers appealed to many ordinary users as
                  gaming machines, those who were familiar with <ref
                     target="https://en.wikipedia.org/wiki/Mainframe_computer">mainframe</ref>s saw
                  them as an opportunity to have a computer on your desk, a real machine they could
                  use whenever they wanted to, not a <ref
                     target="https://en.wikipedia.org/wiki/Computer_terminal">terminal</ref> with
                  which one could access a large computer, shared with many other users. In 1981 or
                  early 1982, Saša Albert, a friend from the <ref
                     target="https://en.wikipedia.org/wiki/National_and_University_Library_of_Slovenia"
                     >National and University Library</ref> and a technical all-rounder, brought a
                     <ref target="https://en.wikipedia.org/wiki/ZX81">Sinclair ZX81</ref>
                  microcomputer with 1 KB of memory, a <ref
                     target="https://en.wikipedia.org/wiki/Cassette_tape">cassette</ref> recorder
                  for external memory, and a <ref
                     target="https://en.wikipedia.org/wiki/BASIC_interpreter">BASIC
                     interpreter</ref>. It was made available to me for a few days, so that I – a
                  known computer programmer at the time – could check if something serious could be
                  done with it. A spare small TV set was used for the monitor. The BASIC code for
                  computing the x, y and z coordinates of cave survey points was soon written on
                  paper, it took one full page and about ten lines on a second one. The first page
                  would fit into the memory, the next ten lines would not. Sašo received the machine
                  back with the following verdict: It could be used for some serious purposes, but
                  2 KB of memory would be required.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-156">The next machine was a 48 KB
                     <ref target="https://en.wikipedia.org/wiki/ZX_Spectrum">Sinclair ZX
                     Spectrum</ref>. Franci Ambrožič, a friend from the Faculty of Sport, had good
                  connections in the UK and a machine was ordered in his name in July 1982. The
                  demand was so high that the export price, which Ambrožič had to pay, was £228, as
                  opposed to the domestic price of £175, not to mention the delivery time for
                  foreign customers – almost half a year. In December 1982 the computer was smuggled
                  from England to Yugoslavia, Franci enjoyed it for a few days and again, like
                  Albert, decided to pass it to the author over the holidays around New Year, to see
                  if something serious could be done with it. This time the answer was yes. As the
                  machine had no text editor the author decided to make one. In about a week BESS
                  (Basic Editor for the Sinclair Spectrum) was up and running. It was written
                  entirely in BASIC and had 24 lines of 32 characters on screen. The interpretive
                  nature of BASIC was most visible during text search, which took a minute per page.
                  As an assembler was not available yet, the author wrote the text search subroutine
                  directly in machine code, it was 50 bytes long and would search through 20 KB of
                  text in 0.05 of a second. In 1983 and 1984 a new editor was devised, TESS (Text
                  Editor for the Sinclair Spectrum), with 80% of the code written in Zilog Z80
                  assembly language, and in 1985 INES (INformation Editing System) was released, and
                  this was commercially viable, mostly in Slovenia, although with a considerable
                  impact in other parts of Yugoslavia. It was written almost entirely in assembly
                  language, could work with up to 21 KB long files, had 24 lines of 64 characters
                  (each in a 5 x 8 pixel matrix), white on black screen setting (or vice-versa), so
                  that only 8% of TV screen was emitting harmful rays, a non-blinking cursor, no
                  distracting permanent information on screen, smooth scrolling, and a new page of
                  text was overwritten on the old one (not displayed on a new, blank screen). INES
                  could also treat text lines as data records, with sorting, searching, mailing
                  lists and several other data manipulation abilities. Graphics could be
                  incorporated into text as an escape sequence string. There was a 68-page reference
                  manual in Slovenian, and the editor was supported by additional utilities, such as
                  for data entry and the sorting of longer files, up to 37 KB. English and German
                  translations, of both the program and the manual, were also made and distributed
                  to computer magazines in Germany and the UK. Early in 1986 INES was followed by
                  EVE (Event Editor), also for the Sinclair Spectrum, and although this had more
                  features it only survived long enough to get a short Quick Reference Guide.
                  Further development was halted because the <ref
                     target="https://en.wikipedia.org/wiki/Atari_ST">Atari ST computer</ref> had
                  arrived, with its beautiful, all powerful <ref
                     target="https://en.wikipedia.org/wiki/Motorola_68000">Motorola 68000</ref>
                  processor with 16 32-bit registers.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-157">EVE’s successor was STEVE (atari
                  ST EVent Editor). Like its predecessors the name was an acronym, yet of a
                  different gender. But as with <ref
                     target="https://catamaranguru.com/why-are-boats-named-after-women/">ship
                     names</ref> it was an exception to the rule, and both subsequent editors, EVA
                  and NEVA, had female names. As with INES, the author remembered well another
                  famous statement by Professor Dijkstra – <ref
                     target="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD634.html"
                     >microcomputers are not great</ref> (IFIP 1977). To get the most out of the
                  microprocessor-powered machines – increasing the speed of the software by at least
                  a factor of three – the programmers were forced to start programming in machine
                  language. STEVE was 75,000 lines of such code, handling the registers directly,
                  without the elegance and ease of structured programming.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-158">The Slovenian version of STEVE
                  was ready in 1986, together with a 248-page manual (a second, 290-page manual was
                  made in 1989, with Hinko Muren), followed by Croatian and German (translated by
                  Günther Weber) versions in 1987, another German manual by Klaus Detlef Olof and
                  Peter Wieser in 1988 (356 pages), and the ultimate <ref
                     target="https://jakopin.net/steve/STEve_Reference_Manual.php">STEVE Reference
                     Manual</ref>, with 608 pages in English, in 1989. The Atari ST machine with its
                  megabytes of linear memory, a floppy and a hard disk, and an excellent monitor,
                  opened new horizons, showing that ideas were possible far beyond mainframes. STEVE
                  had quite a few novel features, one of them being that all its resources, from
                  screen messages, keyboard layout, screen and printer fonts, to command
                  abbreviations, were contained in a separate, STEVE-editable resource file, named
                  STEVE.RSF. Other features included that the file size limited by available RAM,
                  editor lines could contain text or black and white graphics, there were two
                  graphic editors, database routines could also handle chained files where the only
                  size limit was disk space, it had its own desktop publishing system and
                  computer-aided instructions, as well as a <ref
                     target="https://en.wikipedia.org/wiki/Graphical_user_interface">graphical user
                     interface</ref>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-159">STEVE was distributed in
                  Yugoslavia, Germany, Austria, Switzerland, the Benelux countries and
                  Scandinavia.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-160">The early 1990s brought the
                  demise of the Atari brand, and so the author had to change the computer platform
                  to the <ref target="https://en.wikipedia.org/wiki/IBM_PC_compatible">PC</ref>. PCs
                  at that time (PC/AT) were based on the <ref
                     target="https://en.wikipedia.org/wiki/Intel_80286">Intel 80286</ref> chip,
                  vastly inferior to the Motorola 68000, and it made no sense – to the author and
                  others – to program it in machine language. A suitable operating system for the PC
                  computers, with a graphical user interface, comparable to that of Atari ST or <ref
                     target="https://en.wikipedia.org/wiki/Macintosh">Apple Macintosh
                     computers</ref>, did not come until <ref
                     target="https://en.wikipedia.org/wiki/Windows_95">1995</ref>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-161">To port STEVE with its large
                  customer base to PC, just as it was, unchanged, would be a clever business idea.
                  But people, especially developers, always strive to make something new, something
                  better, more exciting. So the author, based on all his previous experience,
                  decided to make a new, much enhanced editor, keeping all that was viable from
                  STEVE, yet with added features which he could put to good use in his
                  post-independent-software-developer professional life. It was named EVA, not an
                  acronym this time, and it started as EVA for DOS in 1992 and was adapted for
                  Windows in 1996. It is written in C language – as are the examples in <ref
                     target="https://en.wikipedia.org/wiki/Charles_Petzold">Charles Petzold’s</ref>
                  book <hi rend="italic">Programming Windows 95</hi>. In C++ the author could not
                  come close enough to the machine to implement all the features he needed,
                  especially in the user interface. EVA has a simpler graphic editor, no computer
                  aided instruction, limited DTP, but a true 16-bit character set with 2500
                  implemented characters, lines which can contain 8-bit text, 16-bit text,
                  compressed black and white graphics and single-line bit image black and white
                  graphics, expanded database routines with XML data format support, Optical
                  Character Recognition (OCR) as standard (STEVE had it on demand), Part of Speech
                  Tagging (POS) and several other language technology features such as the
                  statistical modelling of language. One of the main attractions of STEVE, retained
                  in EVA, was the large monospaced white screen characters on a dark background,
                  which helped the author – who uses this latter system for most of his work, even
                  for the construction and updating of webpages – to preserve his vision. This is
                  quite unlike most of his colleagues who have stared at screens throughout their
                  careers, who now typically wear glasses and have their daily dose of computer work
                  limited, on a doctor’s recommendation, to an hour per day or less.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-162">As of June 2022 the EVA source
                  code is 158,211 lines long and is composed of 2,684 routines. While STEVE has 414
                  implemented command codes, EVA has 1,385.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub04-en" xml:lang="en" corresp="#ch03-sub04">
               <head xml:id="Legacy-head-38">4. NEVA</head>
               <p style="text-align:justify;" xml:id="Legacy-p-163">In 1998, while the author was
                  completing his doctoral thesis at the Faculty of Electrical Engineering,
                  University of Ljubljana, titled “<ref
                     target="https://www.jakopin.net/primoz/disertacija/abstract.php">Upper Bound of
                     Entropy in Slovenian Literary Texts</ref>” his main thesis supervisor,
                  Professor Nikola Pavešić, alerted him to the fact that the thesis length must not
                  exceed 200 pages. However, the thesis dealt with a text corpus of some three
                  million words and several interesting extracts deserved space in the appendices,
                  and altogether this would exceed the page limit several times. The author was thus
                  advised to publish the appendices on the Internet. Since a searching capability
                  would be a welcome addition to corpus presentation, the author learned the <ref
                     target="https://en.wikipedia.org/wiki/Common_Gateway_Interface">Common Gateway
                     Interface</ref> with its scripting language and wrote a Windows-server based
                  search engine, also in C. This is a subset of EVA, mainly the relevant database
                  routines with an enhanced mailing list process for the production of webpages with
                  search results. He called it NEVA, for Networked EVA. In June 2022 NEVA had 491
                  routines in 25,306 lines of code.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-164">After receiving his doctorate in
                  June 1999 the author, employed by the <ref target="https://www.ff.uni-lj.si/en"
                     >Faculty of Arts</ref>, <ref
                     target="https://en.wikipedia.org/wiki/University_of_Ljubljana">University of
                     Ljubljana</ref>, decided to increase the core corpus installed on the faculty
                  server – consisting of around three million words of fiction in Slovenian – with
                  additional material that was mostly taken from the main Slovenian daily newspaper,
                     <ref target="https://en.wikipedia.org/wiki/Delo_(newspaper)">
                     <hi rend="italic underline">Delo</hi>
                  </ref>. <hi rend="italic">Delo</hi> had an email service for the visually impaired
                  people (<hi rend="italic">Delo za slepe</hi>), who received a text-only copy every
                  morning. With permission to use it for research and educational purposes he
                  managed to increase the corpus size, now named CORTES (CORpus of TExts in
                  Slovenian, established 1999), to some 28 million words by early 2000. This
                  attracted the attention of the <ref
                     target="https://isjfr.zrc-sazu.si/en/predstavitev">Fran Ramovš Institute of the
                     Slovenian Language ZRC SAZU</ref> (ISJ), where the author also worked
                  part-time. As the Faculty of Arts could not provide an institutional framework for
                  CORTES, and as both institutions are connected in many ways, the author was easily
                  persuaded to move the corpus to a server at the <ref
                     target="https://zrc-sazu.si/en">Research Centre of the Slovenian Academy of
                     Sciences and Arts</ref> (ZRC SAZU), of which ISJ is a member. This happened in
                  May 2000, when the corpus was renamed Nova beseda (New Word) and the entire web
                  site to <ref target="http://bos.zrc-sazu.si/index_en.html">BOS – Bank Of
                     Slovenian</ref>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-165">The author then moved to the ISJ
                  to lead the newly established Laboratory for the Corpus of Slovenian Language, and
                  continued to work part-time at the Faculty of Arts, as a teacher in the field of
                  language technology.</p>
               <figure xml:id="Legacy-figure-6">
                  <graphic url="media/BOS_en.jpg"/>
                  <head>
                     <hi rend="italic">Figure 1: English version of the web site </hi>
                     <ref target="http://bos.zrc-sazu.si/index_en.html">
                        <hi rend="italic underline">http://bos.zrc-sazu.si/index_en.html</hi>
                     </ref>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-166">Over time many of lexical
                  resources of the ISJ were made available through the BOS web site, with some, as
                  shown above, also presented in English (in 2015 the new <ref
                     target="https://fran.si/">Fran</ref> web site was established as the principal
                  dictionary site of the ISJ in Slovenian). The most prominent and the most used of
                  these resources were the Dictionary of Standard Slovenian Language (SSKJ,
                  1970–1991, 93,500 entries), List of Slovenian Words (BSJ, 356,000 headwords, 2006)
                  and the Nova beseda text corpus (318 million words, 2010). While the SSKJ is the
                  representative monolingual dictionary of Slovenian, the BSJ – compiled from SSKJ,
                  Dictionary of Lesser Used Slovenian Words (178,457 entries), Nova beseda text
                  corpus and the index of the Slovenian web search engine <ref
                     target="http://www.najdi.si/">NAJDI.SI</ref> shows all the vivacity and
                  flexibility of Slovenian in forming new words. Its size also makes sense if
                  compared to the <ref
                     target="https://www.merriam-webster.com/help/faq-how-many-english-words">number
                     of words in English</ref>. The two examples below illustrate the use of NEVA in
                  examining two components of the name (Slovenian) Computer History Museum – <hi
                     rend="italic">Računalniški muzej</hi>.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-167">Table 2: <hi rend="italic"
                     >Muzea</hi> or <hi rend="italic">muzej</hi> search results from the list of
                  Slovenian words</p>
               <p style="text-align:justify;" xml:id="Legacy-p-168">The results show 32 words, nine
                  of which also appear in the SSKJ and are highlighted. There are 20 nouns, 10
                  adjectives and two verbs. It is of interest to note special kinds of museums are
                  also included in the results, <hi rend="italic">ekomuzej</hi> (ecomuseum) and <hi
                     rend="italic">fotomuzej</hi> (photomuseum).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-169">Table 3: <hi rend="italic"
                     >Računal</hi> search results from the list of Slovenian words</p>
               <p style="text-align:justify;" xml:id="Legacy-p-170">The results in this case show 82
                  words, and just six of these also appear in the SSKJ, as this dictionary was only
                  compiled until 1991, before the Internet started to affect the language. Only one
                  entry, <hi rend="italic">obračunalec</hi> (settler (finance)) is suspicious, and
                  while this could have non-computer related meaning a detailed inspection reveals
                  that it comes from word games.</p>
            </div>
            <div type="subchapter" xml:id="ch03-sub05-en" xml:lang="en" corresp="#ch03-sub05">
               <head xml:id="Legacy-head-40">5. Archival challenge</head>
               <p style="text-align:justify;" xml:id="Legacy-p-171">Every exhibit in a museum,
                  especially if it is made by human hand and heart, evokes many feelings,
                  impressions and thoughts, be it the <ref
                     target="https://commons.wikimedia.org/wiki/File:Venus_of_Tan-Tan.jpg">first
                     Venus</ref>, a <ref target="https://en.wikipedia.org/wiki/Divje_Babe_flute"
                     >55,000 year old flute</ref> or a more modern <ref
                     target="https://cdny.de/p/t/5/088/4469638.jpg">earring</ref> made of precious
                  stones. How did the maker craft it? What brought them the idea? Who was the person
                  that used it? All these considerations are even more vivid for computer-related
                  exhibits, from the pieces of hardware, harbingers of the digital age, to software,
                  intended to make the best use of these old, and not so old, machines.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-172">The author’s experience with the
                  evolution of basically the same product, a text editor which over time took under
                  its wings many tools that helped solve a myriad of tasks which he faced in his
                  professional life and extracurricular activities, will towards the end of this
                  year be 40 years long. The first incarnations of this project, from BESS to INES
                  and to a lesser extent STEVE, were made to make the most out of the machines’
                  limited microprocessors. Later on the hardware was fast enough to allow structured
                  programming in a high-level language, and so the program was easier to maintain
                  and to expand. Many user needs and suggestions were taken into account, and the
                  dynamics of change were very fast in the first ten years, with ups and downs in
                  the second decade, more moderate developments in the third, and occasional ones in
                  the fourth. The code for the early versions – BESS, TESS and INES – is more or
                  less lost. During the author’s frequent changes of residence many pieces of older
                  media disappeared, Sinclair ZX Microdrive cartridges were not particularly
                  reliable and also very small and easy to lose. STEVE and EVA for DOS were kept on
                  floppy disks which are still in the author’s possession, but their condition is
                  not known. Atari ST formatted floppies are not readable on PC machines, so
                  assistance from the computer museum would be welcome to make a catalog of that
                  collection. The STEVE reference manual source file, in STEVE DTP format which is
                  also readable by EVA, was luckily still accessible, and so was converted to HTML
                  and <ref target="https://jakopin.net/steve/STEve_Reference_Manual.php">published
                     on the web</ref> during the preparations for the June 2022 SRM panel
                  discussion. The source code for EVA and NEVA, developed and maintained within <ref
                     target="https://visualstudio.microsoft.com/vs/community/">Microsoft Visual
                     C</ref> and <ref target="https://www.bloodshed.net/">Bloodshed’s Dev-C++</ref>
                  environments, is kept by the author.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-173">How to best preserve the legacy
                  of this project? How to make a proper presentation of it in the Slovenian Computer
                  History Museum? And how to make it an online exhibit as well? One possibility, to
                  begin with, is its inclusion in <ref target="https://archive.org/details/software"
                     >the Internet Archive Software Collection</ref>, yet a much better option would
                  be to keep it functional. Unlike most of our digital history, EVA and NEVA are
                  both still operational and used.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-174">The role of a librarian has
                  changed from a person in pre-digital times who could tell an interested user
                  where, and in which book, to look for certain information, to someone who can
                  advise a user where to look on the Internet for what he or she needs. So the role
                  of a museum curator and museum guide should change, too. With better, in-depth
                  knowledge about a software exhibit, it can be presented to the museum visitors in
                  a vivid, interactive fashion, incomparably better than any description presented
                  online. Even more so if the software is still operational, like EVA and NEVA. Such
                  a curator would also be a valuable source of information to people who have to
                  tackle a problem that was presumably already solved, yet the solution is not
                  generally known or is poorly or not at all documented on the Internet.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-175">To facilitate the making of such
                  a museum presentation it should be prepared by someone well acquainted with the
                  subject, ideally the author, and by the museum curator who will deliver it. The
                  process would certainly take time, but it would be the time well spent.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-176">The presentation of software as
                  an online exhibit is a connected story, but again a different one. <ref
                     target="https://archive.org/details/software">The Internet Archive Software
                     Collection</ref>, though valuable, does not present software in a unified,
                  curated fashion, and the sources are also not there (the <ref
                     target="https://sourceforge.net/">SourceForge</ref> open-source platform, where
                  the number of entries is smaller by two orders of magnitude, is not an archive
                  collection). To make EVA and NEVA an online museum exhibit would require a medium
                  very much like <ref target="https://en.wikisource.org/wiki/Main_Page"
                     >Wikisource</ref>, but adapted to the presentation of software. Unlike books,
                  where the reader can enjoy the artistic reflection of human life in fiction by
                  reading it page by page, software can be enjoyed by watching its performance with
                  a set of data, from a tiny seed in a random number generator to a text processor
                  which can handle the <ref
                     target="https://en.wikipedia.org/wiki/Wikipedia:Size_of_Wikipedia">four billion
                     words</ref> of Wikipedia articles (April 2022).</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch04" xml:lang="sl" corresp="#ch04-en">
            <head xml:id="Legacy-head-41">4. Prehod na trajnostno uporabo programske opreme za
               dolgoročen dostop do digitalne dediščine</head>
            <docAuthor xml:id="Legacy-docAuthor-7">
               <ref target="#study01.7">Nataša Milić-Frayling</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-177">V tem prispevku obravnavamo
               transformativni učinek uporabe digitalnih medijev na kodiranje in shranjevanje
               informacij ter pomen programske opreme za obdelavo digitalnih podatkov in prenos
               znanja. Zaradi hitrega razvoja inovacij na žalost hitro zastara tudi programska
               oprema, kar vpliva na našo zmožnost uporabe digitalnih vsebin. To je še posebej
               zahtevno pri zelo interaktivnih in dinamičnih digitalnih artefaktih, ki s programskim
               računanjem pridobivajo in posredujejo vpoglede na podlagi podatkov ter proučujejo
               pojave. Hitreje kot uvajamo inovacije, hitreje programsko opremo nadomeščamo z novimi
               izdelki. Programska oprema posledično ni več podprta in postane zastarela. Zato je
               težko ali nemogoče ponoviti pretekle analize podatkov, igrati stare igre in
               uporabljati interaktivne vsebine, kot je denimo digitalna umetnost. Na srečo nam
               napredek na področju računalništva prinaša tudi sredstva, s katerimi lahko preprečimo
               učinke zastaranja programske opreme. V družbi Intact Digital smo razvili platformo
               Software Library, ki po zaslugi virtualnih računalniških okolij omogoča stabilno in
               zaščiteno nameščanje podedovane programske opreme ter omogoča varno in enostavno
               uporabo digitalnih vsebin, ki so nastale pred desetletji. Ta pristop na učinkovit
               način omogoča digitalno kontinuiteto, ki je bistvenega pomena za prenos znanja na
               prihodnje generacije in nadgradnjo naše digitalne dediščine.</p>
            <div type="subchapter" xml:id="ch04-sub01" xml:lang="sl" corresp="#ch04-sub01-en">
               <head xml:id="Legacy-head-42">Digitalni mediji</head>
               <p style="text-align:justify;" xml:id="Legacy-p-178">Prihod digitalne revolucije v
                  sredini 20. stoletja je prinesel najhitrejšo rast v nastajanju vsebin in
                  informacij ter do tedaj najhitrejši prenos in izmenjavo podatkov in znanja prek
                  računalniških tehnologij. Zdaj, 70 let pozneje, pa si sveta brez spletnih storitev
                  in mobilnih naprav ne moremo več predstavljati, saj pomembno vplivajo na vse
                  vidike našega vsakdanjega življenja.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-179">Znanstvena in tehnična področja
                  so prav tako doživela velike spremembe. Digitalne tehnologije, ki so vgrajene v
                  instrumente in orodja, omogočajo neverjetno napredno analiziranje podatkov in
                  odkrivanje znanja. S povečanjem zmogljivosti prenosnih naprav za shranjevanje
                  podatkov in prehodom v računalništvo v oblaku in shranjevanje v oblaku, moramo
                  danes pogosto skrbeti za terabajte osebnih vsebin ter petabajte znanstvenih in
                  poslovnih podatkov. Kljub temu so digitalni mediji in digitalno računalništvo
                  odvisni od zelo naprednih tehnologij, ki jih je treba nenehno posodabljati, da
                  ostanejo funkcionalne in uporabne. Zato je izjemno pomembno, da upoštevamo
                  tehnološke, ekonomske in izobraževalne dejavnike, ki vplivajo na kontinuiteto
                  uporabe digitalnih medijev, in sprejmemo ukrepe, s pomočjo katerih bo naša
                  digitalna dediščina živela še naprej in dosegla prihodnje generacije.</p>
            </div>
            <div type="subchapter" xml:id="ch04-sub02" xml:lang="sl" corresp="#ch04-sub02-en">
               <head xml:id="Legacy-head-43">Digitalna kontinuiteta in pomen programske
                  opreme</head>
               <p style="text-align:justify;" xml:id="Legacy-p-180">Da bi zagotovili dolgotrajno
                  uporabo digitalnih vsebin, moramo razumeti glavne vidike digitalnih medijev ter
                  načine njihovega staranja in propadanja.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-181">Vsaka digitalna vsebina je
                  ustvarjena, zbrana, shranjena in uporabljena s pomočjo združljive programske
                  opreme. Digitalni mediji so v osnovi zato pravzaprav računalniške narave, saj
                  različne funkcionalnosti programske opreme oblikujejo kodirane podatke in
                  informacije. Da bi lahko ponovno uporabili plodove našega dela, digitalne
                  dokumente, slike, videoposnetke in podatkovne zbirke shranjujemo kot datoteke.
                  Vsako tako datoteko zapiše in prebere določena računalniški program ali vrsta
                  združljivih programov, ki je zmožna obdelave takšnih datotek. Brez združljive
                  programske opreme digitalno kodiranih vsebin ni mogoče interpretirati, predstaviti
                  in doživljati. Pa vendarle tisti, ki se osredotočajo le na shranjevanje podatkov,
                  pozabljajo na pomen programja.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-182">
                  <hi rend="italic">Digitalne datoteke brez programske opreme so kot partiture brez
                     inštrumentov in glasbenikov. Shranjenih digitalnih vsebin ne bomo nikoli mogli
                     predvajati in doživeti brez delujoče programske opreme in brez spretnosti, ki
                     so potrebne za njeno uporabo.</hi>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-183">Čeprav so nekatere vrste
                  programske opreme ustvarjene za uporabo z določeno strojno opremo, je večino
                  programske opreme mogoče namestiti na različne vrste strojne opreme ali v
                  navidezne naprave. Programsko opremo je mogoče namestit, če strojna oprema teče na
                  kompatibilnemu operacijskemu sistemu. Čeprav je zastarelost strojne opreme prav
                  tako problematična, se bomo za namen te razprave osredotočili na težave, ki
                  izhajajo iz zastarelosti operacijskih sistemov in programske opreme.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-184">Pri programski opremi gre lahko
                  za aplikacijo, na primer urejevalnik besedil za ustvarjanje novih dokumentov, ali
                  igro, ki jo zaradi skrbno zasnovane interaktivne izkušnje z veseljem igramo. Vsak
                  program odvisen od številnih drugih tehničnih komponent, vse od programske opreme,
                  ki omogoča uporabo miške, tipkovnice in zaslona, do varnostnih popravkov, ki
                  zagotavljajo varnost operacijskega sistema in celotnega računalnika. Zato je treba
                  neprestano spremljati in posodabljati vse programske aplikacije glede sprememb
                  drugih podpornih komponent, da ostanejo funkcionalne in uporabne. Posodobitve se
                  najpogosteje izvaja zaradi varnostnih groženj. Ko proizvajalec programske opreme
                  ne zmore več zagotavljati varnosti svojih strank, mora izdelek umakniti s
                  trga.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-185">V družbi Adobe so pravzaprav
                  pred kratkim, in sicer decembra 2020, prenehali podpirati program Adobe Flash, 12.
                  januarja 2021 pa so vsebinam Flash onemogočili delovanje v programu Flash
                     Player<note place="foot" xml:id="ftn4" n="4"><ref
                        target="https://helpx.adobe.com/flash-player/release-note/fp_32_air_32_release_notes.html"
                        >Dokumentacija ob izdaji Flash Player 32 AIR 32 (adobe.com) </ref>
                  </note>. Vsem uporabnikom so naročili, naj s svojih naprav odstranijo program
                  Flash Player, da se zaščitijo pred varnostnimi tveganji. To je na žalost zelo
                  slabo vplivalo na spletne založnike in umetnike. Ti so s to programsko opremo
                  namreč ustvarjali svojo digitalno umetnost in spletnemu občinstvu omogočali ogled
                  dinamičnih vsebin in animacij Flash prek spletnega brskalnika. Programska oprema
                  je torej ključnega pomena, pomanjkanje delujoče programske opreme pa neposredno
                  vpliva na to, katere digitalne vsebine lahko še naprej uporabljamo in kakšno
                  znanje lahko prenesemo na prihodnje generacije.</p>
            </div>
            <div type="subchapter" xml:id="ch04-sub03" xml:lang="sl" corresp="#ch04-sub03-en">
               <head xml:id="Legacy-head-44">Zgodovina programske opreme in hitrost staranja </head>
               <p style="text-align:justify;" xml:id="Legacy-p-187">Obstaja veliko različnih vrst
                  programske opreme in mnoge izmed njih si lahko ogledate v spletnem arhivu The
                  Internet Archive Software Collection<note place="foot" xml:id="ftn5" n="5"><ref
                        target="https://archive.org/details/software">Zbirka računalniških programov
                        The Internet Archive </ref>
                  </note>. Zbirka obsega več kot 862.000 paketov programja, od operacijskih
                  sistemov, programov za medijsko produkcijo in statističnih paketov do iger in
                  specializirane programske opreme za 3D-vizualizacijo, zemljevide in animacije.
                  Računalniški muzej v Ljubljani<note place="foot" xml:id="ftn6" n="6"><ref
                        target="https://www.racunalniski-muzej.si/">Računalniški muzej, Ljubljana,
                        Slovenija </ref>
                  </note> in podobne institucije po svetu<note place="foot" xml:id="ftn7" n="7"><ref
                        target="https://computerhistory.org/">Computer History Museum, Mountain View
                     </ref>; <ref target="http://www.computinghistory.org.uk/">Centre </ref>
                     <ref target="http://www.computinghistory.org.uk/">for Computing History,
                        Cambridge </ref>; <ref
                        target="https://en.wikipedia.org/wiki/List_of_computer_museums">Seznam
                        računalniških muzejev po svetu - Wikipedia </ref>
                  </note> rekonstruirajo, ohranjajo in prikazujejo starejšo programsko opremo ter
                  nas tako popeljejo na razburljivo popotovanje skozi razvoj računalniških
                  tehnologij. Treba pa je dodati, da številna programska oprema izven muzeja ni več
                  v uporabi.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-191">
                  <hi rend="italic">Zastarelost programske opreme je vsesplošen pojav. Vpliva na vso
                     programsko opremo. Gre za naravno posledico inovacij: ko ustvarjamo nove
                     različice programske opreme, stare niso več podprte, varne in uporabne. </hi>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-192">Pravzaprav, hitreje ko uvajamo
                  inovacije, hitreje zastara programska oprema in vedno več naših digitalnih
                  sredstev postane nedostopnih in neuporabnih brez združljive programske opreme.
                  Zastarelost programske opreme še zlasti negativno vpliva na digitalne vsebine, ki
                  imajo dolgotrajno vrednost, kot so viri znanja in digitalna kulturna dediščina.
                  Znanstvenih poskusov na primer ni mogoče zanesljivo ponoviti brez izvorne
                  programske opreme. Vrednost digitalne umetnosti se ne more zviševati, če je ni
                  mogoče pokazati in si je ogledati. Zato je izjemno pomembno, da se programje začne
                  uporabljati dolgotrajno. Na srečo obstajajo načini, ki omogočajo uporabo preteklih
                  podatkov, rekonstrukcijo preteklih raziskav in predstavljanje digitalne umetnosti
                  izpred desetletij.</p>
            </div>
            <div type="subchapter" xml:id="ch04-sub04" xml:lang="sl" corresp="#ch04-sub04-en">
               <head xml:id="Legacy-head-45">Knjižnica programske opreme za podedovano programsko
                  opremo </head>
               <p style="text-align:justify;" xml:id="Legacy-p-193">V družbi Intact Digital<note
                     place="foot" xml:id="ftn8" n="8"><ref target="https://www.intact.digital/"
                        >Intact Digital Ltd </ref>
                  </note> smo leta 2016 združili moči v prizadevanjih, da bi ustvarili tehnično
                  učinkovite in ekonomsko vzdržne storitve, ki bi omogočale dolgotrajno gostovanje
                  in vzdrževanje programske opreme, potrebne za digitalno kontinuiteto.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-195">Ker je programska oprema
                  sestavljena iz izvorne kode in izvedljivih datotek, ki jih je mogoče namestiti, se
                  lahko sprejme različne strategije za zagotavljanje nadaljnjega delovanja
                  programske opreme. Izvorna koda odprtokodne programske opreme je običajno dostopna
                  in načeloma ni tveganja za zastaranje programske opreme, če skupnost razvijalcev
                  ohranja znanje in veščine za nadaljnji razvoj programske opreme in lahko zagotovi,
                  da se bodo stari podatki uporabljali z novimi različicami programske opreme.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-196">Vendar pa je velik del
                  programske opreme in našega digitalnega gospodarstva osnovan na lastniški
                  programski opremi, ki je narejena po meri, njena izvorna koda pa ni javno
                  dostopna. Nove različice programske opreme morda niso združljive s prejšnjimi,
                  spreminjanje in ponovni razvoj pa je drag ali neizvedljiv zaradi pomanjkanja
                  dokumentacije in znanja. In kar je še pomembneje, če proizvajalec programske
                  opreme preneha s poslovanjem, programska oprema postane povsem nedostopna.
                  Uporabniki ostanejo brez nadgradenj in sčasoma svojih podatkov ne morejo več
                  uporabljati.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-197">
                  <hi rend="italic">Bolj ko je programska oprema uspešna, večjo škodo povzroči njena
                     zastarelost. </hi>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-198">V nekaterih primerih obstajajo
                  sodobna programska oprema, ki lahko igra vlogo nadomestka, in obdeluje podatkovne
                  datoteke zastarelih programskih izdelkov. V nasprotnem primeru pa je najboljše
                  ustvariti računalniško okolje, v katerem lahko stara programska oprema še vedno
                  deluje brez varnostnih groženj, kar lahko dosežemo z namestitvijo programske
                  opreme v navidezne naprave (<hi rend="italic">virtual machine</hi>).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-199">Da bi vzpostavili neko načelo,
                  kako pristopiti k odvisnosti od podedovane programske opreme, smo v družbi Intact
                  Digital zasnovali ogrodje Executable Archive<note place="foot" xml:id="ftn9" n="9"
                     >Milić-Frayling, Nataša, in Marija Čubrić. "Executable Archives: Software
                     integrity for data readability and validation of archived studies." MEdnarodna
                     konferenca Digital Preservation 2021 (iPres2021), Peking, Kitajska </note>, ki
                  tradicionalne arhive dopolnjuje s platformo Software Library in storitvami za
                  zagotavljanje dolgotrajnega gostovanja in vzdrževanja podedovane programske
                  opreme.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-201">Dolgotrajna skrb za programsko
                  opremo pomeni sistematičen pristop k upravljanju z datotekami programske opreme in
                  dokumentacijo, ki je potrebna za nameščanje programske opreme. To vključuje prakse
                  zagotavljanja kakovosti, ki se jih upošteva med namestitvijo programske opreme in
                  stalnim vzdrževanjem navideznih računalniških okolij.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-202">Danes se programsko opremo v
                  navidezna okolja pogosto namešča v podatkovnih centrih in javnih oblakih, ker to
                  omogoča prilagodljivo upravljanje računalniških virov, ki jih potrebujejo
                  organizacije in posamezniki. Mnogi končni uporabniki navidezne naprave vzpostavijo
                  tudi na svojih osebnih računalnikih. Uporabniki Applovih računalnikov Mac lahko na
                  svojih prenosnikih na primer vzpostavijo navidezno okolje Windows.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-203">Navidezne naprave si lahko
                  predstavljate kot namizne računalnike brez lastne strojne opreme, na katere se
                  lahko namesti star operacijski sistem in stare aplikacije. Tako navidezno napravo
                  je mogoče vzpostaviti na sodobnem računalniku, vsa navodila iz aplikacij nameščene
                  programske opreme pa so prevedene v ukaze na računalniku gostitelju. Uporabniki
                  lahko programsko opremo tako uporabljajo na praktično enak način kot v
                  preteklosti, saj se prikaže kot aplikacija v navidezni napravi, ki je uporabniku
                  poznana.</p>
               <figure xml:id="Legacy-figure-7">
                  <graphic url="media/nmf1.png"/>
                  <head>
                     <hi rend="italic">Slika 1. Ogrodje Executive Archive dopolnjuje tradicionalne
                        prakse elektronskega arhiviranja s postopki in tehničnimi komponentami, ki
                        zagotavljajo dolgotrajno uporabo programske opreme. Platforma Software
                        Library pa omogoča gostovanje in shranjevanje programske opreme ter uporabo
                        programske opreme za obdelavo arhiviranih podatkov na daljavo.</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch04-sub05" xml:lang="sl" corresp="#ch04-sub05-en">
               <head xml:id="Legacy-head-47">Rekonstrukcija analiz podatkov</head>
               <p style="text-align:justify;" xml:id="Legacy-p-204">V strogo reguliranih sektorjih,
                  kot so farmacija in biološke znanosti, je treba digitalne podatke hraniti
                  desetletja. V zapletenih znanstvenih protokolih običajno uporabljajo napredne
                  instrumente za zbiranje podatkov in visoko specializirano programsko opremo, s
                  katero te podatke interpretirajo in analizirajo. Datoteke z neobdelanimi podatki
                  instrumentov se shranjujejo v elektronskih arhivih in redno se preverja celovitost
                  podatkov, npr. z uporabo kontrolnih vsot. Ustrezna programska oprema pa mora
                  ostati funkcionalna, da lahko omogoči rekonstrukcijo preteklih študij in
                  ponovljivost analiz podatkov. To predstavlja velik izziv, ker se tako instrumente
                  kot programsko opremo po določenem času preneha uporabljati.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-205">Platformo INTACT Software
                  Library se zato uporablja za navidezno nameščanje programske opreme, ki je
                  potrebna za rekonstrukcijo preteklih študij. Pri vsem tem je ključno, da nameščena
                  programska oprema v navideznih okoljih zagotovi enake rezultate kot programska
                  oprema, ki je bila prvotno uporabljena v laboratoriju, kjer so se študije
                  izvajale. Poleg tega je treba nadzorovati dostop do virtualizirane programske
                  opreme. Uporabniki morajo namreč upoštevati licenčno pogodbo prodajalca programske
                  opreme in zagotoviti podrobno revizijsko sled njene uporabe, ki jo zahtevajo
                  notranje politike in predpisi.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-206">Z vidika uporabnika je dostop do
                  navideznih naprav na platformi Software Library zelo enostaven prek navideznega
                  namizja v katerem koli novejšem brskalniku (<hi rend="italic">Slika 2</hi>), kar
                  dosežemo s skrbno izolacijo navideznih naprav, ki gostijo stare operacijske
                  sisteme in zato ne smejo povezane na internet. Kopija podatkov iz elektronskega
                  arhiva pa se varno prenese na Software Library prek namizja Transfer Desktop.</p>
               <figure xml:id="Legacy-figure-8">
                  <graphic url="media/nmf2.png"/>
                  <head>
                     <hi rend="italic">Slika 2. Portal Software Library lahko uporabljate prek
                        katerega koli novejšega brskalnika. Prek posebej konfiguriranega namizja
                        Transfer Desktop lahko uporabnik prenese kopijo podatkov v Software Library
                        in jo nato obdela z določeno programsko opremo. Vsaka navidezna naprava s
                        programsko opremo se v zavihku brskalnika prikaže kot ločeno namizje.</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-207">Ko so podatki preneseni v okolje
                  Software Library, so uporabljeni v navidezni napravi, ki gosti programsko opremo
                  za obdelavo podatkov, vsaka virtualna naprava pa se nahaja v svojem zavihku
                  brskalnika. Na sliki 3 je prikazan primer navidezne naprave, ki gosti operacijski
                  sistem Windows XP in programsko opremo Analyst 1.4.2 družbe Sciex. Uporabnik lahko
                  programsko opremo in podatke uporablja na enak način kot prvotno v
                  laboratoriju.</p>
               <figure xml:id="Legacy-figure-9">
                  <graphic url="media/nmf3.png"/>
                  <head>
                     <hi rend="italic">Slika 3. Programska oprema Analyst 1.4.2 družbe Sciex je
                        nameščena na virtualni napravi, ki poganja sistem Windows XP. Do nje se
                        dostopa prek navideznega namizja na katerem koli združljivem brskalniku.
                        Virtualizirano namizje Windows XP se prikaže v ločenem zavihku brskalnika,
                        vendar spletne storitve do njega ne morejo dostopati. </hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch04-sub06" xml:lang="sl" corresp="#ch04-sub06-en">
               <head xml:id="Legacy-head-50">Rekonstrukcija digitalne umetnosti</head>
               <p style="text-align:justify;" xml:id="Legacy-p-208">V zadnjih desetletjih so
                  umetniki s spletnimi tehnologijami ustvarjali spletno umetnost in tako dosegli
                  široko spletno občinstvo. Na njihovo ustvarjalnost je zlasti vplival Adobe Flash,
                  ki je bil prej poznan kot Macromedia Flash in FutureSplash. Flash je omogočal
                  prilagodljivo uporabo besedil, vektorske grafike ter uporabo video in zvočnih
                  vsebin za produkcijo animacij, igric, obogatenih spletnih in namiznih aplikacij
                  ter v brskalnik vdelanih video predvajalnikov. Končni uporabniki pa so si lahko
                  vsebino Flash priročno ogledali prek predvajalnika Flash Player na spletnih
                  brskalnikih.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-209">Poleg tega so lahko avtorji po
                  zaslugi standardizacije in prevzetja jezika Virtual Reality Modeling Language
                     (VRML)<note place="foot" xml:id="ftn10" n="10"><ref
                        target="https://www.w3.org/MarkUp/VRML/">VRML Virtual Reality Modeling
                        Language (w3.org) </ref>
                  </note> določili 3D »svetove« in objekte z obogatenimi strukturami, teksturami in
                  interaktivnimi modeli, ki so bili neodvisni od platform. Pregledovalnik
                     Cortona3D<note place="foot" xml:id="ftn11" n="11"><ref
                        target="https://www.cortona3d.com/en/cortona3d-viewers-windows">Cortona3D
                        Viewers za Windows </ref>
                  </note> za VMRL je omogočal tudi nestandardno podporo za kombiniranje VRML s
                  teksturami Flash, ki so dodale še več možnosti za ustvarjanje.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-212">Nedavno zastaranje programov
                  Adobe Flash in Flash Player je na žalost prizadelo vso digitalno umetnost, ki je
                  narejena z uporabo Flash, zato je potrebno usklajeno prizadevanje, da bo ta ostala
                  dostopna in uporabna.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-213">Intact Digital je s sodobnim
                  umetnikom Michaelom Takeom Magruderjem<note place="foot" xml:id="ftn12" n="12"
                        ><ref target="http://www.takeo.org/">Michael Takeo Magruder </ref>
                  </note> sodelovala pri rekonstrukciji dela <hi rend="italic">World[s] </hi>(2006
                  (v1.0), 2009 (v1.1))<note place="foot" xml:id="ftn13" n="13"><ref
                        target="http://www.takeo.org/nspace/ns018/">World[s]: Michael Takeo
                        Magruder: 2006 </ref>
                  </note>, ki temelji na VRML in vtičnikih Flash, da bi omogočili 3D-teksturiranje
                  elementov avdiovizualne umetnosti. <ref target="http://www.takeo.org">
                     <hi rend="underline">Michael Takeo Magruder</hi>
                  </ref> vzdržuje spletni portal, kjer so podrobno opisana njegova umetniška dela,
                  vključno z dokumentacijo, videoposnetki in fotografijami, poleg tega pa upravlja
                  arhiv digitalnih medijskih datotek in izbranih različic programske opreme, s
                  katero so bila umetniška dela ustvarjena in objavljena.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-216">V sodelovanju s tehničnim
                  osebjem družbe Intact Digital smo ustvarili umetniško instalacijo v okolju
                  Software Library, ki ga lahko uporablja spletno občinstvo (sliki 4 in 5).</p>
               <figure xml:id="Legacy-figure-10">
                  <graphic url="media/nmf4.png"/>
                  <head>
                     <hi rend="italic">Slika 4. Portal Software Library gosti umetniško instalacijo
                        World[s] umetnika Michaela Takea Magruderja, ki vključuje vtičnike Flash in
                        Cortona3D za brskalnike v varnem okolju Software Library. </hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-11">
                  <graphic url="media/nmf5.png"/>
                  <head>
                     <hi rend="italic">Slika 5. Cortona3D v.7.0 z brskalnikom Internet Explorer
                        11.1790.17763.0 in vtičnikom Macromedia Flash ActiveX 8r42 je nameščena v
                        izoliranem navideznem stroju z grafično procesno enoto, zato je dostop do
                        filma World[s] zanesljiv in varen s katerega koli sodobnega brskalnika.
                     </hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch04-sub07" xml:lang="sl" corresp="#ch04-sub07-en">
               <head xml:id="Legacy-head-53">Dolgotrajna skrb za programsko opremo </head>
               <p style="text-align:justify;" xml:id="Legacy-p-217">Čeprav so tehnični vidiki
                  zastaranja programske opreme očitno težavni, je za zagotavljanje digitalne
                  kontinuitete potreben celosten pristop z upoštevanjem različnih pomislekov. Za
                  namene dolgotrajnega vzdrževanja programske opreme na portalu Software Library smo
                  razvili prakse zagotavljanja kakovosti, ki zajemajo tehnološke, pravne, operativne
                  in človeške dejavnike (<hi rend="italic">Slika 6</hi>).</p>
               <figure xml:id="Legacy-figure-12">
                  <graphic url="media/nmf6.png"/>
                  <head>
                     <hi rend="italic">Slika 6. Pri dolgoročni skrbi za programsko opremo je treba
                        upoštevati več dejavnikov in postopkov za zagotavljanje kakovosti, s
                        katerimi lahko prepoznamo in zmanjšamo morebitna tveganja. </hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-218">Kar zadeva tehnološke dejavnike,
                  pokrivamo varnost in integriteto dolgotrajne hrambe datotek in dokumentacije
                  programske opreme, računalniška okolja, ki so potrebna za nameščanje in delovanje
                  programske opreme, ter metode za varen dostop do nameščene programske opreme in
                  njeno uporabo.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-219">Med pravne vidike na primer
                  spadajo licenciranje vseh tehničnih komponent, ki so vključene v nameščanje in
                  uporabo programske opreme. Operativne dejavnosti pa vključujejo stalno vzdrževanje
                  računalniškega okolja ter zaščito in morebitno ponovno namestitev programske
                  opreme, da se podaljša njeno uporabo. Čeprav človeške dejavnike pogosto
                  spregledamo, so bistvenega pomena. Treba je zagotoviti usposabljanje za nameščanje
                  podedovane programske opreme in ohranjanje znanja, da bodo lahko mlajše generacije
                  zanesljivo in učinkovito uporabljale zgodovinsko programsko opremo in zgodovinske
                  podatke. Varno nameščanje je še posebno pomembno, ker stara programska oprema v
                  osnovi ni varna, če je izpostavljena sodobnemu ekosistemu. Brez nadgradenj morda
                  ne bo delovala na najnovejših operacijskih sistemih, poleg vsega pa je dovzetna za
                  kibernetske napade.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-220">Na splošno lahko s sistematičnim
                  in vodenim pristopom, ki ga ponuja okvir Executable Archive, ter priročno uporabo
                  programske opreme, ki gostuje na portalu Software Library, učinkovito obravnavamo
                  raznovrstne primere zastaranja digitalnih vsebin. Na tej osnovi lahko znatno
                  prispevamo k digitalni kontinuiteti in nadaljujemo inoviranjem, saj vemo, da je
                  naša digitalna dediščina varna in bo dostopna tako dolgo, kot bo to potrebno.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch04-en" xml:lang="en" corresp="#ch04">
            <head xml:id="Legacy-head-55">4. Towards the sustained use of software for long-term
               access to digital heritage</head>
            <docAuthor xml:id="Legacy-docAuthor-8">
               <ref target="#study01.7-en">Nataša Milić-Frayling, CEO</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-221">In this paper we reflect on the
               transformational impact of adopting digital media for encoding and storing
               information and the importance of software for processing digital data and
               transferring knowledge. Unfortunately, the rapid rate of innovation causes rapid
               software obsolescence, and affects our ability to use digital content. This is
               particularly challenging for highly interactive and dynamic digital artifacts that
               use software computation to derive and convey insights from data and study phenomena.
               In fact, the faster we innovate, the faster software is replaced with new products
               and becomes unsupported and obsolete. That makes it difficult or impossible to
               reproduce past data analyses, play old games, and use interactive content such as
               digital art. Fortunately, advances in computing also provide us with the means to
               counteract the effects of software obsolescence. At Intact Digital we created a
               Software Library platform that uses virtualized computing environments to provide
               stable and protected installations of legacy software and enable the secure and easy
               use of digital content from decades ago. This is one effective approach to enabling
               digital continuity that is essential for transferring knowledge to future generations
               and building on our digital heritage.</p>
            <div type="subchapter" xml:id="ch04-sub01-en" xml:lang="en" corresp="#ch04-sub01">
               <head xml:id="Legacy-head-56">Digital media</head>
               <p style="text-align:justify;" xml:id="Legacy-p-222">With the onset of digital
                  revolution in the mid 20<hi rend="superscript">th</hi> century, we have
                  experienced the fastest growth in the production of content and information and
                  unprecedented speeds in transferring and exchanging data and knowledge through
                  computing technologies. Now, 70 years later, we cannot imagine the world without
                  the Internet services and mobile devices. They shape every aspect of our everyday
                  life.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-223">Scientific and engineering
                  fields have been equally transformed. Digital technologies embedded in instruments
                  and tools are enabling data analyses and knowledge discovery beyond imaginable.
                  With increased capacity of portable storage devices and a shift to cloud computing
                  and cloud storage, we are now commonly dealing with terabytes of personal content
                  and petabytes of scientific and commercial data. However, digital media and
                  digital computing depends on highly sophisticated technologies that require
                  continuous updates to stay functional and usable. Thus, it is of utmost importance
                  to consider technological, economical and educational factors that affect the
                  continuity of the digital media use and take action to ensure that our digital
                  heritage lives and reaches future generations.</p>
            </div>
            <div type="subchapter" xml:id="ch04-sub02-en" xml:lang="en" corresp="#ch04-sub02">
               <head xml:id="Legacy-head-57">Digital continuity and the importance of
                  software</head>
               <p style="text-align:justify;" xml:id="Legacy-p-224">In order to ensure the long-term
                  use of digital content, we need to understand the essential aspects of digital
                  media and the ways it ages and deteriorates.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-225">Every digital content is
                  created, collected, stored and consumed by using compatible software. Thus,
                  digital media is fundamentally computational since the software features shape the
                  encoded data and information. In order to reuse the products of our work, we keep
                  digital documents, images, videos, and databases as files. Each such file is
                  written and read by a particular piece of software or a range of compatible
                  software that can process the files. Without compatible software, digitally
                  encoded content cannot be interpreted, presented and experienced. However, those
                  who focus on data storage alone overlook the importance of software.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-226">
                  <hi rend="italic">Digital files without software are like musical scores without
                     instruments or musicians. We will never be able to play and experience stored
                     digital content without working software and without the skills to use it.</hi>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-227">While some software is created
                  for specific hardware devices, most can be installed on a variety of hardware or
                  in virtual machines. As long as the hardware runs an operating system that is
                  compatible with the software, one can install and use it. While hardware
                  obsolescence is also an important problem, for the sake of this discussion we will
                  focus on the issues that arise from the obsolescence of the operating systems and
                  the software itself.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-228">Software can be an application,
                  like a word processor used for creating new documents, or a game that we enjoy
                  playing through a carefully designed interactive experience. Each piece of
                  software depends on many other technical components, from software that enables
                  the use of mouse, keyboard and screen, to the security patches that make the
                  operating system and the whole computer safe. Thus, for any software application
                  to remain functional and usable, it must be constantly monitored and updated if
                  other supporting components change. The most frequent updates are due to security
                  threats, and once it becomes unfeasible for the software producer to keep
                  customers safe, they have to pull the product from the market.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-229">For example, quite recently, in
                  December 2020, Adobe discontinued support for Adobe Flash and, from 12 January
                  2021 blocked Flash content from running in Flash Player<note place="foot"
                     xml:id="ftn4-en" n="4"><ref
                        target="https://helpx.adobe.com/flash-player/release-note/fp_32_air_32_release_notes.html"
                        >Release Notes Flash Player 32 AIR 32 (adobe.com) </ref>
                  </note>. It instructed all users to uninstall Flash Player in order to protect
                  themselves from security risks. Unfortunately, this had a detrimental effect on
                  web publishers and artists who had been producing digital art using Flash and
                  enabling online audiences to use dynamic content and Flash animation through a
                  browser for the past two decades. Software is thus key to the use of digital
                  content, and the lack of functional software has a direct impact on what digital
                  content we can continue to use and what knowledge we can transfer to future
                  generations.</p>
            </div>
            <div type="subchapter" xml:id="ch04-sub03-en" xml:lang="en" corresp="#ch04-sub03">
               <head xml:id="Legacy-head-58">Software history and rate of obsolescence</head>
               <p style="text-align:justify;" xml:id="Legacy-p-231">There are many different types
                  of software. A good place to see a variety of software is the Internet Archives
                  Software Collection<note place="foot" xml:id="ftn5-en" n="5"><ref
                        target="https://archive.org/details/software">The Internet Archive Software
                        Collection: Internet Archive</ref>
                  </note>. The collection includes over 862,000 software packages, from operating
                  systems, media production software and statistical packages to games and
                  specialized software using 3D visualizations, maps and animations. The Computer
                  History Museum in Ljubljana<note place="foot" xml:id="ftn6-en" n="6"><ref
                        target="https://www.racunalniski-muzej.si/">Računalniški muzej, Ljubljana,
                        Slovenia</ref>
                  </note> and similar organizations around the world<note place="foot"
                     xml:id="ftn7-en" n="7"><ref target="https://computerhistory.org/">Computer
                        History Museum, Mountain View, CA</ref>; <ref
                        target="http://www.computinghistory.org.uk/">Centre</ref>
                     <ref target="http://www.computinghistory.org.uk/">for Computing History,
                        Cambridge, UK</ref>; <ref
                        target="https://en.wikipedia.org/wiki/List_of_computer_museums">List of
                        computer museums around the world - Wikipedia</ref>
                  </note>, reconstruct, preserve and display old software programs and let us
                  experience the exciting journey through the development of computing technologies.
                  However, outside such museums, much software is not in use anymore.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-235">
                  <hi rend="italic">Software obsolescence is a universal phenomenon that affects all
                     software. It is a natural consequence of innovation: as we create new software
                     versions, old ones become unsupported, unsafe, and unusable.</hi>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-236">In essence, the faster we
                  innovate, the faster software becomes obsolete and the more of our digital assets
                  are in danger of becoming inaccessible and unusable without compatible software.
                  The impact of software obsolescence is particularly detrimental for digital
                  content that has long-term value, such as knowledge resources and digital cultural
                  heritage. For example, scientific experiments cannot be reproduced reliably
                  without the original software. Digital art cannot appreciate in value if it cannot
                  be shown and interacted with. It is thus critical to enable the long-term use of
                  software. Fortunately, there are ways to enable the use of past data, reconstruct
                  past studies and present digital art from decades ago.</p>
            </div>
            <div type="subchapter" xml:id="ch04-sub04-en" xml:lang="en" corresp="#ch04-sub04">
               <head xml:id="Legacy-head-59">Software library for legacy software</head>
               <p style="text-align:justify;" xml:id="Legacy-p-237">In 2016, Intact Digital<note
                     place="foot" xml:id="ftn8-en" n="8"><ref target="https://www.intact.digital/"
                        >Intact Digital Ltd</ref>
                  </note> began a concerted effort to create technically effective and economically
                  sustainable services for long-term hosting and maintenance of the software needed
                  to enable digital continuity.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-239">Since software comprises a
                  source code and installable executables, one can adopt different strategies to
                  ensure that software continues to run. Source code is normally available for
                  open-source software and, in principle, if the developer community retains the
                  knowledge and skills needed to continue software development and can ensure that
                  old data can be used with new versions of the software, there is no danger from
                  software obsolescence.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-240">However, a large section of the
                  software industry and our digital economy is based on proprietary software that is
                  highly customized and for which the software source code is not publicly
                  available. The new versions of the software may not be backward compatible, and
                  modifying and re-developing software would be costly or unfeasible due to the lack
                  of documentation and know-how. More importantly, if the software producer goes out
                  of business, the software becomes completely unavailable and users are left
                  without upgrades and, eventually, without the ability to use their data.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-241">
                  <hi rend="italic">The more successful the software product, more damage is caused
                     by its obsolescence. </hi>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-242">In some instances, there is
                  modern software that can serve as a substitute and make use of data files from
                  obsolete software products. Otherwise, our best approach is to create a computing
                  environment in which old software can still run without security threats. That can
                  be achieved by installing software in virtual machines.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-243">In order to establish a
                  principled way of dealing with legacy software dependence, Intact Digital devised
                  an Executable Archive framework<note place="foot" xml:id="ftn9-en" n="9"
                     >Milic-Frayling, Natasa, and Marija Cubric. "Executable Archives: Software
                     integrity for data readability and validation of archived studies."
                     International Conference on Digital Preservation 2021 (iPres2021), Beijing,
                     China. </note> that complements the traditional archives with a Software
                  Library platform and services for ensuring long-term hosting and maintenance of
                  legacy software.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-245">Long-term software care is
                  achieved by adopting a systematic approach to managing the software files and
                  documentation needed to create software installations. That includes quality
                  assurance practices that are applied during the software installation and ongoing
                  maintenance of virtual computing environments.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-246">Nowadays, software
                  virtualization is broadly used in data centers and public clouds for flexible
                  management of computing resources that are needed by organizations and
                  individuals. Many end users also use virtual machines on their home computers. For
                  example, Apple Mac users can also use a virtualized Windows environment on their
                  machine.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-247">One can think of a virtual
                  machine as a desktop computer but without its own hardware. Inside the virtual
                  machine one can install old operating systems and old applications. Such a virtual
                  machine can be hosted on a modern computer and all the instructions from the
                  installed software applications are translated into commands on the host machine.
                  The users can thus use the software in the same way as in the past, as it appears
                  as an application in a virtual desktop that is familiar to them.</p>
               <figure xml:id="Legacy-figure-13">
                  <graphic url="media/nmf1.png"/>
                  <head>
                     <hi rend="italic">Figure 1. Executive Archive Framework complements the
                        traditional electronic archive practices with procedures and technical
                        components that ensure the long-term use of software. The Software Library
                        platform enables software hosting, software storage and the remote use of
                        software to process archived data.</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch04-sub05-en" xml:lang="en" corresp="#ch04-sub05">
               <head xml:id="Legacy-head-61">Reconstruction of data analyses</head>
               <p style="text-align:justify;" xml:id="Legacy-p-248">In highly regulated sectors,
                  such as pharmaceuticals and life-sciences, digital data must be retained for
                  decades. Complex scientific protocols typically involve the use of sophisticated
                  instruments to collect data and highly specialized software to interpret and
                  analyze it. Files containing raw instrument data are stored in electronic archives
                  and regularly assessed for data integrity, using, for example, checksum methods.
                  The corresponding software must remain functional for reconstruction of past
                  studies and for reproducibility of data analyses. This is a challenge, because
                  both the related instruments and the software are decommissioned after a while and
                  removed from operational use.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-249">The INTACT Software Library is
                  therefore used to create virtual installations of the software needed to
                  reconstruct past studies. The key requirement is to ensure that the software
                  installation in the virtualized environments leads to the same results as the
                  software originally run in the labs where the studies were conducted. Furthermore,
                  access to the virtualized software needs to be controlled to adhere to the
                  licensing agreement with the software vendor and to provide a detailed audit trail
                  of software use that is required by internal policies and regulations.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-250">From the user’s perspective, the
                  virtual machines in the Software Library are conveniently accessed through Virtual
                  Desktops from any modern browser (<hi rend="italic">Figure 2</hi>). This is
                  achieved by the careful isolation of the virtual machines that host old operating
                  systems and, therefore, should not be exposed to the Internet. A copy of the data
                  from the electronic archive is safely transferred into the Software Library using
                  a Transfer Desktop.</p>
               <figure xml:id="Legacy-figure-14">
                  <graphic url="media/nmf2.png"/>
                  <head>
                     <hi rend="italic">Figure 2. The Software Library can be used from any modern
                        browser. Through the specially configured Transfer Desktop, the user can
                        transfer a copy of the data into the Software Library and then process it
                        with a specific piece of software. Each virtual machine with the software
                        appears in the Browser Tab as a separate desktop.</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-251">Once in the Software Library
                  environment, the data is used within the virtual machine that hosts the software
                  needed to process the data. Each virtual machine appears as a separate tab in the
                  browser. Figure 3 shows an example of a virtual machine hosting Windows XP
                  operating system and Analyst 1.4.2 software produced by Sciex. The user can use
                  the software and the data in the same way as originally done in the lab.</p>
               <figure xml:id="Legacy-figure-15">
                  <graphic url="media/nmf3.png"/>
                  <head>
                     <hi rend="italic">Figure 3. Analyst v.1.4.2. software by Sciex is installed in
                        a virtual machine running Windows XP and used through a virtual desktop that
                        can be accessed through any compatible browser. The virtualized Windows XP
                        desktop appears in a separate browser tab and cannot be accessed by services
                        from the Internet. </hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch04-sub06-en" xml:lang="en" corresp="#ch04-sub06">
               <head xml:id="Legacy-head-64">Reconstruction of digital art</head>
               <p style="text-align:justify;" xml:id="Legacy-p-252">Over the past few decades,
                  artists have used Internet technologies to create Internet art and reach broad
                  online audiences. An important enabler of such artists’ creativity was Adobe
                  Flash, formerly commercialized by Macromedia Flash and FutureSplash. Flash enabled
                  flexible use of text, vector graphics, video and audio for the production of
                  animations, games, rich web and desktop applications, and browser embedded video
                  players. End users could conveniently view Flash content via the Flash Player
                  within web browsers.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-253">Furthermore, with the
                  standardization and adoption of Virtual Reality Modeling Language (VRML)<note
                     place="foot" xml:id="ftn10-en" n="10"><ref
                        target="https://www.w3.org/MarkUp/VRML/">VRML Virtual Reality Modeling
                        Language (w3.org)</ref>
                  </note>, authors could also specify platform-independent 3D “worlds”, including
                  objects with rich structures, textures and interaction models. The Cortona3D<note
                     place="foot" xml:id="ftn11-en" n="11"><ref
                        target="https://www.cortona3d.com/en/cortona3d-viewers-windows">Cortona3D
                        Viewers for Windows</ref>
                  </note> viewer for VMRL also enabled non-standard support for combining VRML with
                  Flash textures, providing additional creative opportunities.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-256">Unfortunately, with the recent
                  obsolescence of Adobe Flash and Flash Player, all digital art that uses Flash is
                  affected and requires a concerted reconstruction effort to remain accessible and
                  usable.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-257">For example, Intact Digital has
                  worked with a contemporary artist Michael Takeo Magruder<note place="foot"
                     xml:id="ftn12-en" n="12"><ref target="http://www.takeo.org/#">Michael Takeo
                        Magruder</ref>
                  </note> on the reconstruction of <hi rend="italic">World[s] </hi>(2006(v1.0),
                     2009(v1.1))<note place="foot" xml:id="ftn13-en" n="13"><ref
                        target="http://www.takeo.org/nspace/ns018/">World[s]: Michael Takeo
                        Magruder: 2006</ref>
                  </note> [12] that relies on VRML and Flash plug-ins to enable the textured 3D
                  rendering of audio-visual art elements. The artist maintains a website (<ref
                     target="http://www">http://www</ref>.takeo.org) with detailed descriptions of
                  art pieces, including documentation, videos, and still images, and manages a
                  repository of digital media files and selected versions of software that were used
                  to create and publish the artworks.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-260">Through a collaborative effort,
                  the artist and the Intact Digital technical staff have created an installation of
                  the art within the Software Library environment that can be used by audiences
                  online (<hi rend="italic">Figures 4 &amp; 5</hi>).</p>
               <figure xml:id="Legacy-figure-16">
                  <graphic url="media/nmf4.png"/>
                  <head>
                     <hi rend="italic">Figure 4. Software Library hosts an installation of the
                        World[s] artwork by Michael Takeo Magruder that includes Flash and Cortona3D
                        plug-ins for the browsers, in a secure Software Library environment. </hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-17">
                  <graphic url="media/nmf5.png"/>
                  <head>
                     <hi rend="italic">Figure 5. Cortona3D v.7.0 with Internet Explorer
                        11.1790.17763.0 and Macromedia Flash ActiveX plug-in 8r42 are installed
                        within an isolated VM with a GPU, to provide reliable and secure access to
                        World[s] from any modern browser. </hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch04-sub07-en" xml:lang="en" corresp="#ch04-sub07">
               <head xml:id="Legacy-head-67">Long-term care of software</head>
               <p style="text-align:justify;" xml:id="Legacy-p-261">While the technical aspects of
                  software obsolescence present obvious challenges, enabling digital continuity
                  requires a holistic approach considering a broader range of concerns. For
                  long-term software maintenance within the Software Library, we have developed
                  quality assurance practices that cover technological, legal, operational and human
                  factors (<hi rend="italic">Figure 6</hi>).</p>
               <figure xml:id="Legacy-figure-18">
                  <graphic url="media/nmf6.png"/>
                  <head>
                     <hi rend="italic">Figure 6. Long-term software care requires consideration of
                        multiple factors and quality assurance procedures for identifying and
                        mitigating potential risks. </hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-262">Among the technology factors we
                  cover the security and integrity of the long-term storage of software files and
                  documentation, computing environments needed to install and run the software, and
                  methods for secure access and use of installed software.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-263">The legal aspects, for example,
                  involve the licensing of all the technical components involved in the installation
                  and use of software. Operational activities involve continual maintenance of the
                  computing environment, and the protection and possible re-installation of software
                  in order to prolong its use. Human factors are often overlooked, yet they are
                  absolutely essential. It is thus important to provide training for using legacy
                  software installations, to retain skills and ensure that younger generations can
                  operate historical software and historical data reliably and efficiently. The
                  secure use of software installations is particularly important, since old software
                  is fundamentally non-secure if exposed to the contemporary ecosystem. Without
                  upgrades it may not run on the latest operating systems and may be vulnerable to
                  new types of cyberattacks.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-264">Overall, with a systematic and
                  principles approach offered by the Executable Archive framework and the convenient
                  use of software hosted in the Software Library, we can effectively address a wide
                  range of digital obsolescence scenarios. Building on these foundations, we can
                  make considerable progress towards digital continuity and keep on innovating,
                  knowing that our digital heritage is safe and accessible for as long as we need
                  it.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch05" xml:lang="sl" corresp="#ch05-en">
            <head xml:id="Legacy-head-69">5. Partner – Večno mlad</head>
            <docAuthor xml:id="Legacy-docAuthor-9">
               <ref target="#study01.4">Boštjan Špetič (Računalniški muzej, vodja kustodiata)</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-265">Računalniški muzej v Ljubljani
               (zasebni muzej, ki je bil ustanovljen leta 2004) zbira strojno in programsko opremo
               posebnega pomena za slovensko družbo. V skladu z zbiralno politiko Računalniškega
                  muzeja<note place="foot" xml:id="ftn14" n="14">Zbiralna politika Računalniškega
                  muzeja (interni dokument Računalniškega muzeja), Ljubljana 2019 </note> imajo
               predmeti, ki so izdelani v Sloveniji ali so delo slovenskih izumiteljev, glede na
               merila zbiranja najvišjo prioriteto. Računalniški muzej hrani verjetno največjo
               zbirko računalnikov, izdelanih v Sloveniji. Morda celo bolj kot na oddelkih za
               konservacijo in restavriranje, si v okviru delovanja muzejskega eksperimentalnega
               laboratorija aktivno prizadevamo, da bi vse naprave ponovno začele delovati. Gre za
               zahteven podvig, pri katerem so potrebni ločeni protokoli in sodelovanje s
               strokovnjaki z različnih področij,<note place="foot" xml:id="ftn15" n="15"
                  >Računalniški muzej sodeluje z mednarodno mrežo strokovnjakov, ki omogoča dostop
                  do različnih strokovnih podskupin, pri delu s slovenskimi računalniki pa sodeluje
                  izključno s slovenskimi strokovnjaki. </note> vključiti pa je treba tudi digitalno
               arheologijo in rekonstrukcijska prizadevanja. Ta muzejski proces zato nudi edinstven
               vpogled v izzive in priložnosti, ki jih prinaša ohranjanje programske opreme.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-268">Med rutinskim varnostnim kopiranjem
               trdega diska enega izmed slovenskih računalnikov smo našli pravo zakladnico izvornega
               programja. Programje je na splošno najtežje najdljiv in ohranljiv del računalniške
               zgodovine, saj večina računalnikov, s katerimi delajo muzeji, nima trdih diskov, pa
               tudi zato, ker generacije pred nami niso ravno dobro tehnično in sistematično
               ohranile disket in drugih pomnilnih enot.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-269">V tem članku bo avtor opisal pomen
               odkritja iz trdega diska in prikazal, kako zapleteno je bilo arhiviranje softverske
               dediščine.</p>
            <div type="subchapter" xml:id="ch05-sub01" xml:lang="sl" corresp="#ch05-sub01-en">
               <head xml:id="Legacy-head-70">Računalnik Iskra Delta Partner</head>
               <p style="text-align:justify;" xml:id="Legacy-p-270">V letu po sloviti združitvi
                  družb Iskra in Delta<note place="foot" xml:id="ftn16" n="16">Leta 1981, in sicer
                     po letih iskanja smiselne rešitve, s katero bi preprečili podvajanje razvoja in
                     dela več podjetij v državi. </note> je šest strokovnjakov nove družbe v manj
                  kot dveh mesecih razvilo prototip namiznega mikroračunalnika, ki so ga poimenovali
                  Partner. Namenjen je bil predvsem uporabi v manjših in novoustanovnih
                  organizacijah, tržili pa so ga tudi kot sistem, ki je primeren za raziskovalne
                  dejavnosti, šole in celo posameznike.</p>
               <figure xml:id="Legacy-figure-19">
                  <graphic url="media/slika1.jpg"/>
                  <head>
                     <hi rend="italic">Slika 1: Računalnik Partner iz zbirke Računališkega muzeja.
                        (foto: arhiv Računalniškega muzeja)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-272">Delta Partner je bil namizni
                  računalnik, zasnovan kot praktičen poslovni ali razvojni sistem, ki se ga je
                  uporabljalo predvsem v računovodstvu, knjigovodstvu in za statistične obdelave.
                  Računalnik Partner je bilo mogoče vključiti v omrežja z večjimi računalniki, kjer
                  je deloval kot terminal in tudi kot samostojen sistem. Po letu 1983 so izdelali
                  več modelov z enakimi osnovnimi lastnostmi in poljubnimi razširitvami za vsak
                  model. Sistem je bil zgrajen na osnovi že takrat nekoliko zastarelega 8-bitnega
                  mikroprocesorja Zilog Z80A s frekvenco 4 MHz, običajno s 128 kB pomnilnika RAM in
                  8 kB pomnilnika ROM.<note place="foot" xml:id="ftn17" n="17">Interna raziskovalna
                     dokumentacija Računalniškega muzeja, Miha Urh, 2022. </note>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-274">Računalnik so prodajali v paketu
                  z namensko programsko opremo, ki je na začetku zajemala le štiri uporabniške
                  programe in operacijski sistemi CP/M 3. Štirje uporabniški programi MIPOS so bili
                  namenjeni obdelavi posameznih ali povezanih poslovnih podatkov, ki so omogočali
                  knjigovodstvo prek glavne knjige, vodenje knjige terjatev kupcev in dobaviteljev,
                  pa tudi vodenje skladiščne logistike in fakturiranje. Programska orodja so sčasoma
                  omogočila tudi opravljanje drugih pisarniških opravil, kot je obdelava dokumentov.
                  Kasneje pa so izdali še več orodij, ki so podpirala izvajanje znanstvenih
                  izračunov na področju upravljanja energije, strojništva in gradbeništva, ter
                  orodij za procesno podporo v živilskopredelovalni in farmacevtski industriji. S
                  tem so dopolnili ponudbo programske opreme za interaktivno programiranje,
                  klasičnih prevajalnikov za programske jezike Cobol, Basic, Pascal in C ter
                  makrozbirnik za simbolni strojni jezik. Prve različice sistema so prikazovale le
                  besedilo, novejše pa so bile nadgrajene z grafično kartico z ločljivostjo
                  1024 × 512 točk, zato je bilo podatke mogoče prikazati v grafični obliki s pomočjo
                  programskih paketov BGRAF, IDRIS in DIAS. Med prvimi tremi modeli je bil WF/G
                  prvi, ki je imel vgrajeno disketno enoto in disk Winchester z 10 Mb, modela 1F/G
                  in 2F/G pa sta imela po eno ali dve disketni enoti. Vsi računalniki Partner so
                  imeli serijska vrata za povezovanje s tiskalnikom in miško, omogočali pa so tudi
                  namestitev dodatnih vrat. Običajno je sistem vključeval tudi tiskalnik TRS835 in
                  možne druge razširitve, npr. omrežna vrata in TV-izhod.<note place="foot"
                     xml:id="ftn18" n="18">Interna raziskovalna dokumentacija Računalniškega muzeja,
                     Miha Urh, 2022. </note>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-276">Proizvodnja je sprva potekala v
                  Kranju, pozneje pa so jo preselili na Ptuj. Proizvodnjo za zahodne trge so
                  postopoma vzpostavili v novi tovarni družbe Delta v Avstriji, v družbi Novkabel v
                  Novem Sadu pa so izdelovali poseben model računalnika Partner z drugim paketom
                  računalniške programske opreme. V avgustu leta 1983 je bilo na testiranje
                  pripravljenih prvih deset sistemov iz redne proizvodne linije, do konca leta pa so
                  jih v Kranju sestavili že 170. V avstrijsko tovarno St. Jakob so poslali 200 enot,
                  kjer naj bi do konca leta sestavili vsaj 100 Partnerjev za izvoz. Od vseh
                  slovenskih računalnikov je bil to daleč najbolj razširjeni model, saj so skupno
                  proizvedli več tisoč računalnikov Partner, načrtovali pa so proizvodnjo vsaj
                  10.000 sistemov. Leta 1988 je bilo v registru računalniške opreme<note
                     place="foot" xml:id="ftn19" n="19">M. Hlavaty, Zmogljivosti in uporaba opreme
                     za avtomatsko obdelavo podatkov 1988, Zavod RS za statistiko, Ljubljana, 1990.
                  </note> zabeleženih približno 450 računalnikov Partner, ki so se še vedno
                  uporabljali v Sloveniji. Danes vemo, da obstaja še 12 tovrstnih naprav,
                  predvidevamo pa, da jih največ dvakrat ali trikrat toliko hranijo zasebni
                  zbiratelji ali pa so kje založene in samo čakajo, da jih nekdo odkrije.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-278">Računalnike Partner so imeli na
                  voljo le v peščici slovenskih šol, med prvimi so jih dobili v Srednji tehniški
                  šoli Kranj. Tam je računalniški predmet v poznih 80. letih prejšnjega stoletja
                  vodil Marko Grobelnik, ki je pozneje postal vodja raziskovalnega oddelka za
                  strojno učenje na Institutu Jožef Stefan.<note place="foot" xml:id="ftn20" n="20"
                     >Grobelnik. </note>
               </p>
            </div>
            <div type="subchapter" xml:id="ch05-sub02" xml:lang="sl" corresp="#ch05-sub02-en">
               <head xml:id="Legacy-head-72">Posnemanje računalniškega okolja Partner</head>
               <p style="text-align:justify;" xml:id="Legacy-p-280">Zaradi propada družbe Iskra
                  Delta, razpada Jugoslavije, prehoda v kapitalizem in napredka arhitekture IBM PC
                  je računalnik Partner zastaral in nanj so kmalu praktično povsem pozabili.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-281">Leta 2018 je slovenski študent
                  računalništva z metodo obratnega inženirstva raziskal notranjost računalnika in
                  napisal posnemovalnik (emulator), ki je prvič po 25 letih omogočil ponovni zagon
                  izvirne programske opreme.<note place="foot" xml:id="ftn21" n="21"
                     >http://eprints.fri.uni-lj.si/3945/ </note> Ta študent, Matej Horvat, je danes
                  del ekipe Računalniškega muzeja in kot strokovnjak posebno pozornost namenja
                  računalnikom Partner.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-283">Takrat se je majhna skupnost
                  »Part-Time Nerds«<note place="foot" xml:id="ftn22" n="22"
                     >https://github.com/tstih/idp-dev </note> lotila izziva, da s tem emulatorjem
                  spiše novo programje za računalnike Partner. Horvatov emulator deluje tudi v
                  spletnem okolju, zato smo ga lahko namestili na spletno stran Računalniškega
                  muzeja, da ga lahko preizkusijo vsi, ki jih to zanima.<note place="foot"
                     xml:id="ftn23" n="23">https://www.racunalniski-muzej.si/wp-content/partner/
                  </note>
               </p>
            </div>
            <div type="subchapter" xml:id="ch05-sub03" xml:lang="sl" corresp="#ch05-sub03-en">
               <head xml:id="Legacy-head-73">Programska oprema Partner je prava redkost in
                  zgodovinska zanimivost</head>
               <p style="text-align:justify;" xml:id="Legacy-p-286">Emulator je bil napisan na
                  računalniku Partner, ki so ga skrbno hranili na Fakulteti za računalništvo in
                  informatiko Univerze v Ljubljani. Kolikor vemo, sta njihov in naš računalnik edina
                  Partnerja z delujočim trdim diskom, zato sta tudi edina vira izvirne programske
                  opreme, ki se je ohranila vse do danes.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-287">Celoten seznam trenutno
                  ohranjenega programja obsega programske jezike Microsoft, nekaj izvirne programske
                  opreme za storilnost Iskra Delta, delno lokaliziran urejevalnik besedil Wordstar
                  in številne aplikacije, ki so jih razvili uporabniki.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-288">Ena najzanimivejših najdb
                  izvornega razvoja, ki smo jo odkrili znotraj medijske arheologije pri
                  Računalniškem muzeju je različica igre kača<note place="foot" xml:id="ftn24"
                     n="24">https://en.wikipedia.org/wiki/Snake_(video_game_genre) </note> z imenom
                     Glista<note place="foot" xml:id="ftn25" n="25">https://zbirka.muzej.si </note>.
                  Zanjo je bila napisana osupljivo obsežna dokumentacija. Tukaj je prikazan prevod
                  pozdravnega zaslona, kjer je jasno opisan namen avtorja, ki povzema določena
                  človeška prizadevanja tistega časa:</p>
               <p style="text-align:justify;" xml:id="Legacy-p-291">»Ta igra je bila ustvarjena kot
                  sredstvo za premagovanje dolgčasa, ki se navadno pojavi med poukom (tudi med
                  odmorom). Od sebe ne daje nobenih zvočnih efektov, razen ropotanja disketne enote.
                  Če izključiš še KLIK, boš povsem neslišen (preverjeno). Igra ne zahteva večjih
                  umskih naporov, tako da lahko z levo polovico možganov slediš profesorjevi
                  razlagi. Če se ti bo sprva zdelo, da ne boš nikoli dosegel spodobnega števila točk
                  in boš že skoraj obupal nad usodo, vedi, da ti bo pomagal le trening.«</p>
               <figure xml:id="Legacy-figure-20">
                  <graphic url="media/slika2.jpg"/>
                  <head>
                     <hi rend="italic">Slika 2 Zajem pozdravnega zaslona iz igre Glista. (foto:
                        arhiv Računalniškega muzeja)</hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-21">
                  <graphic url="media/slika3.jpg"/>
                  <head>
                     <hi rend="italic">Slika 3 Zajem naslovnega zaslona iz igre Glista. (foto: arhiv
                        Računalniškega muzeja)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-292">Gre res »samo« za igro, ki je v
                  bistvu kopija druge dobro znane igre, vendar smo se vanjo poglobili prav zaradi
                  podrobnosti in specifičnosti pričakovane uporabe.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub04" xml:lang="sl" corresp="#ch05-sub04-en">
               <head xml:id="Legacy-head-76">Arhiviranje programja kot temeljni muzejski
                  postopek</head>
               <p style="text-align:justify;" xml:id="Legacy-p-293">V tem poglavju bo avtor na
                  kratko opisal, kako v Računalniškem muzeju razumemo arhiviranje programja. Kot smo
                  to predstavili na letni konferenci NetPreserve,<note place="foot" xml:id="ftn26"
                     n="26">Netpreserve.org International Internet Preservation Consortium General
                     Assembly &amp; Web Archiving Conference 2022 </note> imamo muzejski
                  strokovnjaki nalogo, da ohranimo čim več gradiva za prihodnje generacije
                  raziskovalcev. Po eni strani poskušamo ohraniti čim več »informacij«, po drugi pa
                  opazujemo avro fizičnih predmetov. Naša naloga pa je vzdrževati znanje, ki je
                  potrebno za tehnično razumevanje predmetov, in tudi komuniciranje z javnostjo. Vse
                  to počnemo, ko uspemo izvesti živo rekonstrukcijo koščka programske kode.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-295">Za ilustracijo različnih stopenj
                  lahko uporabimo model oz. tehnično skico za programje s tekstovnim vmesnikom, ki
                  bi se verjetno izvajal na računalniku Partner.</p>
               <figure xml:id="Legacy-figure-22">
                  <graphic url="media/slika4.jpg"/>
                  <head>
                     <hi rend="italic">Slika 4 Tehnična skica za program, ki bi se verjetno izvajal
                        na računalniku Partner. (foto: arhiv Geodetski vestnik)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-296">Druga skrajnost je popolna
                  produkcijska omara največje slovenske elektronske oglasne deske (BBS, Bulletin
                  Board System). Ekipa Računalniškega muzeja je omaro odpeljala neposredno iz sobe,
                  kjer je nazadnje delovala in služila uporabnikom. Trenutno poskušamo obnoviti
                  disk. To je primer programja, ki je bilo standarndno dostopno, vendar so
                  komunikacija in podatki, ki so jih uporabniki pustili za sabo na strežniku
                  neprecenljivi.</p>
               <figure xml:id="Legacy-figure-23">
                  <graphic url="media/slika5.jpg"/>
                  <head>
                     <hi rend="italic">Slika 5 Produkcijska omara največje slovenske elektronske
                        oglasne deske (BBS). (foto: arhiv Računalniškega muzeja)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-297">Pri postopku ohranjanju
                  programja, sledimo naslednjim korakom:</p>
               <list type="ordered" xml:id="Legacy-list-3">
                  <item>Dokazi o njegovem obstoju. Omembe v intervjujih ali sočasnih člankih.</item>
                  <item>Dokumentirani vhodni in izhodni podatki. Posnetki zaslona ali
                     priročniki.</item>
                  <item>Binarne datoteke. Pogosto so rešene z diskov in trakov.</item>
                  <item>Binarne datoteke + podatki. Pridobljeno iz nekakšnega produkcijskega
                     okolja.</item>
                  <item>Izvorna koda. </item>
                  <item>Bonus: izvirna strojna oprema. </item>
                  <item>Dodaten bonus: dejanska izvorna naprava, ki je poganjala to specifično
                     programje.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-298">Najvišji cilj po katerem koli
                  koraku pa je živa rekonstrukcija. Pri vsaki višji stopnji ohranjenosti je
                  rekonstrukcija lažja, verjetnejša in bolj celostna. V praksi vsakič občutimo
                  neznansko srečo, ko uspemo priti vsaj do (3) ravni binarne datoteke, torej da
                  uspemo doseči nekaj več kot le dokazati obstoj.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-299">Vsi programi, ki smo jih našli
                  na edinih dveh računalnikih Partner s trdim diskom, so bili zapisani v binarni
                  obliki, zato smo jih lahko zagnali na izvirni strojni opremi ali v emulatorju.
                  Omogočajo nam vpogled v nekdanjo uporabo programske opreme, ne pa tudi v način
                  razmišljanja avtorjev.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-300">Program Glista je med njimi
                  izjema, saj je bilo zelo veliko pozornosti posvečene podrobnostim, na voljo je
                  bila celotna dokumentacija in pozdravni zaslon z zgoraj prikazanim motivacijskim
                  sporočilom, poleg vsega pa je bil program tudi podpisan.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub05" xml:lang="sl" corresp="#ch05-sub05-en">
               <head xml:id="Legacy-head-79">Neločljivi entiteti uporabnika in naprave</head>
               <p style="text-align:justify;" xml:id="Legacy-p-301">Če je le mogoče, se na našem
                  raziskovalnem oddelku radi opravimo pogovore z uporabniki in avtorji, da ustvarimo
                  zapis z izkušnjami iz prve roke. Priložnosti za to pa je izjemno malo.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-302">Poiskali smo avtorja programa
                  Glista, ki je danes visoki uradnik na Ministrstvu za javno upravo. Obiskal je
                  muzej in pokazali smo mu delujoč računalnik Partner, ki ga je pred 35 leti
                  uporabljal na Srednji tehniški šoli Kranj pod vodstvom profesorja Grobelnika.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-303">G. Gabrijel je zelo resen človek
                  in njegov smisel za podrobnosti pri programu Glista kaže, da je tudi zabavo v
                  srednješolskih letih jemal zelo resno. Iz srca se nam je zahvalil za ponovno in
                  ganljivo srečanje s svojim programom.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub06" xml:lang="sl" corresp="#ch05-sub06-en">
               <head xml:id="Legacy-head-80">Zaključek</head>
               <p style="text-align:justify;" xml:id="Legacy-p-304">To lepo prikazuje človeški vidik
                  pri ohranjanju programja in tudi njegovo sposobnost spodbujanja čustvenega odziva.
                  Razvijalec kanček sebe v digitalni obliki pusti v izvajajoči se kodi programja,
                  tako kot umetnik del sebe pusti v umetniškem delu.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-305">Softverska dediščina je
                  dediščina človeške bistroumnosti. Zajema duh <hi rend="italic">homo sapiensa</hi>,
                  kot ga poznamo v zadnjih stoletjih, in priča o vzponu morebitnega prihodnjega <hi
                     rend="italic">homo digitalicusa</hi>.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub07" xml:lang="sl" corresp="#ch05-sub067-en">
               <head xml:id="Legacy-head-81">Pripis</head>
               <p style="text-align:justify;" xml:id="Legacy-p-306">Interna zasnova računalnika
                  Partner ne omogoča prikaza datumov po letu 1999, zato se je Horvat odločil to
                  popraviti v posnemovalniku s ponastavitvijo katerega koli datuma iz 21. stoletja
                  nazaj na osnovno leto 1990.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-307">Programi v emulatorju tako
                  tečejo v večnih 90. letih, ki predstavljajo zlato dobo, ki je računalniki Partner
                  nikoli niso doživeli, ker so osebni računalniki prevladali na tržišču in ker je
                  družba Delta kot prva v samostojni Sloveniji leta 1990 razglasila stečaj, ki se je
                  končal šele leta 2020. Stečajni upravitelj je žal že na začetku postopka uničil
                  vso tehnično dokumentacijo.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-308">Glista pa bo tako večno živela v
                  našem Partnerjevem emulatorju in »žurala«, kot da so še vedno devetdeseta.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch05-en" xml:lang="en" corresp="#ch05">
            <head xml:id="Legacy-head-82">5. Partner – Forever young</head>
            <docAuthor xml:id="Legacy-docAuthor-10">
               <ref target="#study01.4">Boštjan Špetič</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-309">The Computer History Museum in
               Ljubljana, a private museum established in 2004, collects hardware and software of
               special significance for Slovene society. According to the Museum’s collection
                  policy,<note place="foot" xml:id="ftn14-en" n="14">Computer History Museum,
                  Zbiralna politika (internal research documentation), Ljubljana 2019 </note>
               objects made in Slovenia or by Slovenian inventors hold the highest priority within
               the collection criteria. The Computer History Museum in Ljubljana thus houses what is
               probably the largest collection of Slovenia-made computers. Even more than that the
               conservation and restoration departments, alongside the museum experimental
               laboratory are actively working their way towards making all of them operational
               again. This is a complex endeavor requiring discrete protocols and the involvement of
               various subject experts,<note place="foot" xml:id="ftn15-en" n="15">The Computer
                  History Museum collaborates with an international network of experts for various
                  subset level expertise access, but in the case of Slovene computers the expertise
                  is entirely homegrown. </note> and it includes digital archaeology as well as
               reconstruction efforts. This museum process thus offers a unique insight into the
               challenges and opportunities of software preservation.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-312">During a routine backup of the hard
               drive of one such Slovene computer, we found a treasure trove of original software.
               Software is generally the hardest part of computer history to find and to preserve,
               because the majority of computers such museums work with do not have hard drives, and
               because floppy disks and other storage media were not preserved well technically or
               systematically by generations before us.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-313">In this article, the author will
               explain the significance of what was found on this hard drive, and outline the
               complexities involved in the archiving of heritage software.</p>
            <div type="subchapter" xml:id="ch05-sub01-en" xml:lang="en" corresp="#ch05-sub01">
               <head xml:id="Legacy-head-83">The Iskra Delta Partner Computer</head>
               <p style="text-align:justify;" xml:id="Legacy-p-314">In the year after the famous
                  merger of Iskra and Delta<note place="foot" xml:id="ftn16-en" n="16">In 1981,
                     after years of searching for a sensible solution that would prevent the
                     duplication of development and work between several companies in the country.
                  </note>, six experts of the joint company took less than two months to develop a
                  prototype of a desktop microcomputer they named Partner. It was intended mostly
                  for new and smaller organizations, but was also marketed as a system for research
                  activities, schools and even private individuals.</p>
               <figure xml:id="Legacy-figure-24">
                  <graphic url="media/slika1.jpg"/>
                  <head>
                     <hi rend="italic">Figure 1: Partner computer from the collection of Computer
                        History Museum, Ljubljana. (photo: Computer History Museum in Ljubljana
                        archive)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-316">The Delta Partner was a desktop
                  computer conceived as a practical business or development system, mostly used for
                  accounting, bookkeeping and statistical processing. The computer could be
                  integrated into networks with larger computers, where it functioned as a terminal
                  as well as an independent system. After 1983 several models with identical basic
                  characteristics and optional extensions for each model were being produced. The
                  system was built on top of the then already somewhat out-of-date 8-bit
                  microprocessor Zilog Z80A with a 4MHz measure, usually containing 128KB RAM memory
                  and 8KB ROM memory.<note place="foot" xml:id="ftn17-en" n="17">Computer History
                     Museum, internal research documentation, Miha Urh 2022 </note>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-318">The Partner computer was sold in
                  a bundle with dedicated software, initially consisting of only four user programs
                  and an operating system, CP/M 3. The four MIPOS user programs served individual or
                  integrated business data processing needs. They enabled bookkeeping through a main
                  book, accounts for both customers and suppliers, but also warehouse logistics
                  management and invoicing. The software tools gradually enabled other office work,
                  such as text document processing, and more tools were also released to support
                  scientific calculations in the fields of energy management, machine engineering,
                  and construction, as well as tools for assisting processing technology in the
                  food-processing and pharmaceutical industries. These were offered in addition to
                  software for interactive programming, classical compilers for Cobol, Basic, Pascal
                  and C, and a macro-assembler for symbolic machine language. The first versions of
                  the system only displayed text, but newer ones were enhanced with a graphics card
                  with a resolution of 1024×512 points. Data could thus be shown in graphic format
                  with the help of the BGRAF, IDRIS and DIAS program packages. Among the first three
                  versions of the Partner computer, the WF/G model was available with a floppy disc
                  drive and a 10Mb Winchester disc, while models 1F/G and 2F/G were available with
                  one or two floppy disc drives. All Partner computers had a serial port intended
                  for connecting with a printer and mouse, and it was also possible to install
                  additional ports. Usually the system included a TRS835 printer, and other
                  expansions included a network port and video-out port.<note place="foot"
                     xml:id="ftn18-en" n="18">Computer History Museum, internal research
                     documentation, Miha Urh 2022 </note>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-320">Production was first established
                  in the city of Kranj, and later moved to Ptuj. Production for western markets was
                  gradually set up in Delta’s new Austrian factory, and a special model of Partner
                  with a different software programs package was produced by Novkabel in Novi sad.
                  In August 1983, the first ten systems out of the regular production line were
                  ready for testing and by the end of the year 170 systems had already been
                  assembled in Kranj. A total of 200 units were sent to the Austrian St. Jakob
                  plant, where at least 100 Partners were to be assembled by the end of year for
                  export. Out of all the Slovene computers, this was by far the most widely adopted
                  model, the total production number being several thousand Partner computers, while
                  the planned production was up to 10,000 systems. According to the 1988 registry of
                  computer equipment,<note place="foot" xml:id="ftn19-en" n="19">M. Hlavaty,
                     Zmogljivosti in uporaba opreme za avtomatsko obdelavo podatkov 1988, Zavod RS
                     za statistiko, Ljubljana, 1990 </note> approximately 450 Partners were still
                  being used in Slovenia. Today, we know of 12 Partner computers, and expect at most
                  two or three times more to be stored by private collectors or just waiting in
                  garages to be found.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-322">A handful of schools in Slovenia
                  had a classroom equipped with Partner computers, the first amongst them being the
                  Technical high school in Kranj. The computer course there in the late 1980s was
                  run by the future head of the machine learning research department at the Jožef
                  Stefan Institute (Institut “Jožef Stefan” – IJS), Marko Grobelnik.<note
                     place="foot" xml:id="ftn20-en" n="20">Grobelnik </note>
               </p>
            </div>
            <div type="subchapter" xml:id="ch05-sub02-en" xml:lang="en" corresp="#ch05-sub02">
               <head xml:id="Legacy-head-85">Emulating the Partner environment</head>
               <p style="text-align:justify;" xml:id="Legacy-p-324">The demise of Iskra Delta, the
                  dissolution of Yugoslavia, transition to capitalism and the advance of IBM PC
                  architecture made Partner obsolete, and soon also practically forgotten.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-325">In 2018, a student of computer
                  science in Slovenia reverse-engineered the internals of the computer and wrote an
                  emulator which enabled the original software to run again for the first time in 25
                     years.<note place="foot" xml:id="ftn21-en" n="21"
                     >http://eprints.fri.uni-lj.si/3945/ </note> This student, Matej Horvat, is also
                  part of the Computer History Museum team, with a special expert focus on Partner
                  computers.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-327">Since then a small community of
                  “Part-Time Nerds”<note place="foot" xml:id="ftn22-en" n="22"
                     >https://github.com/tstih/idp-dev </note> has taken on the challenge of writing
                  new software for Partner computers using this emulator. Horvat’s emulator also
                  runs in an online environment, so we were able to put it on the museum webpage for
                  anyone to try.<note place="foot" xml:id="ftn23-en" n="23"
                     >https://www.racunalniski-muzej.si/wp-content/partner/ </note>
               </p>
            </div>
            <div type="subchapter" xml:id="ch05-sub03-en" xml:lang="en" corresp="#ch05-sub03">
               <head xml:id="Legacy-head-86">Partner software is a rarity and a historical
                  curiosity</head>
               <p style="text-align:justify;" xml:id="Legacy-p-330">The emulator was written using a
                  Partner computer that the University of Ljubljana Faculty of Computer and
                  Information Science had carefully preserved. Their and ours are the only two
                  Partner computers we know of that still have a functional hard drive, making them
                  the only two sources of original software to date.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-331">The complete list of currently
                  preserved software contains some Microsoft programming languages, some original
                  Iskra Delta productivity software, a partially localized WordStar text editor and
                  a number of user-written applications.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-332">One of the most interesting
                  examples of original development the Computer History Museum found in its media
                  archaeology endeavors is a version of a game Snake,<note place="foot"
                     xml:id="ftn24-en" n="24">https://en.wikipedia.org/wiki/Snake_(video_game_genre)
                  </note> called <hi rend="italic">Glista</hi>.<note place="foot" xml:id="ftn25-en"
                     n="25">https://zbirka.muzej.si </note> It came with impressively extensive
                  documentation. Here is a translation of its splash screen which clearly describes
                  the intentions of the author, thus encapsulating a certain human effort of the
                  time:</p>
               <p style="text-align:justify;" xml:id="Legacy-p-335">“This game was created as a
                  means to manage boredom, which usually happens during school classes (and during
                  breaks). It doesn’t make any sounds other than the clicking of the floppy drive.
                  If you disable ‘click’ it will be completely silent (verified). The game doesn’t
                  require much focus, so you can still follow the professor with the left side of
                  the brain. If at first you don’t manage to get many points and are losing hope,
                  know that only practice will help you get better.”</p>
               <figure xml:id="Legacy-figure-25">
                  <graphic url="media/slika2.jpg"/>
                  <head>
                     <hi rend="italic">Figure 2 Screenshot of the splash screen of the game Glista.
                        (photo: Computer History Museum in Ljubljana archive)</hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-26">
                  <graphic url="media/slika3.jpg"/>
                  <head>
                     <hi rend="italic">Figure 3 Screenshot of the main screen of the game Glista.
                        (photo: Computer History Museum in Ljubljana archive)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-336">So yes, it’s “just” a game, and
                  a copy of a well-known game, at that, but the attention to detail and the
                  specificity of the user scenario encouraged us to look deeper.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub04-en" xml:lang="en" corresp="#ch05-sub04">
               <head xml:id="Legacy-head-89">Archiving software as a core museum procedure</head>
               <p style="text-align:justify;" xml:id="Legacy-p-337">At this point, please allow the
                  author a short deviation to explain how we understand software archiving at the
                  Computer History Museum. As we presented at the annual NetPreserve
                     Conference,<note place="foot" xml:id="ftn26-en" n="26">Netpreserve.org
                     International Internet Preservation Consortium General Assembly &amp; Web
                     Archiving Conference 2022 </note> our job as museum professionals is to
                  preserve as much as possible for future generations of researchers. In one
                  dimension we are interested in as much “information” being preserved as possible.
                  In another we look at the aura of the physical objects. But our job is also to
                  maintain the knowledge necessary for technical understanding of the objects, and
                  to communicate with the public. We do all of this when we manage to bring a piece
                  of code all the way to live reconstruction.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-339">For some examples of the various
                  stages involved in this, here is a mock-up, a design document, for text-based
                  software that would probably run on a Partner computer:</p>
               <figure xml:id="Legacy-figure-27">
                  <graphic url="media/slika4.jpg"/>
                  <head>
                     <hi rend="italic">Figure 4 Design wireframe example of text-based business
                        application.</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-340">At another extreme, here is a
                  complete production rack of Slovenia’s largest BBS. The Computer History Museum
                  team claimed it directly from the room in which it was last running live and
                  serving users, and we are currently working on disk recovery. This is an example
                  where software was off-the-shelf, but the communication and data left on the
                  server by the users is invaluable.</p>
               <figure xml:id="Legacy-figure-28">
                  <graphic url="media/slika5.jpg"/>
                  <head>
                     <hi rend="italic">Figure 5 Picture of production stack of largest Slovenian
                        BBS. (photo: Computer History Museum in Ljubljana archive)</hi>
                  </head>
               </figure>
               <p style="text-align:justify;" xml:id="Legacy-p-341">We follow the stages of software
                  preservation as follows:</p>
               <list type="ordered" xml:id="Legacy-list-4">
                  <item>Evidence of its existence. Mentions in interviews or contemporary
                     articles.</item>
                  <item>Documented inputs &amp; outputs. Screenshots or manuals.</item>
                  <item>Binary files. Often salvaged from disks and tapes.</item>
                  <item>Binary + data. Taken from some kind of production environment.</item>
                  <item>Source code. </item>
                  <item>Bonus: original hardware. </item>
                  <item>Extra bonus: the actual original machine that ran this specific
                     software.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-342">The ultimate goal after any
                  stage is live reconstruction. Every higher level of preservation makes the
                  reconstruction easier, more possible and more complete. In practice we feel
                  extremely lucky every time we are able to get to at least the (3) binary level,
                  and thus beyond just evidence of existence.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-343">The programs we found on the
                  only two Partner computers known to have a hard drive were all in binary form,
                  allowing us to run them on the original hardware or in an emulator. They give us a
                  glimpse into how the software was used, but not into the authors’ way of
                  thinking.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-344">
                  <hi rend="italic">Glista</hi> is an exception, because it had so much attention to
                  detail that it included the full documentation, the splash screen with motivation
                  that we shared above, and on top of all this the software was signed.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub05-en" xml:lang="en" corresp="#ch05-sub05">
               <head xml:id="Legacy-head-92">The inseparable entities of the user and the
                  machine</head>
               <p style="text-align:justify;" xml:id="Legacy-p-345">Our research department likes to
                  interview the users and authors whenever possible, so we have a record of
                  first-hand experiences. However, the opportunity to do this is extremely rare.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-346">We sought out the author of <hi
                     rend="italic">Glista</hi>, who is now a high-ranking bureaucrat at the Ministry
                  of Public Administration. He visited the museum, and we could show him a working
                  Partner computer, the actual computer he last used 35 years ago at that Kranj high
                  school, under the supervision of professor Grobelnik.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-347">Mr. Gabrijel is a very serious
                  person, and the attention to detail in <hi rend="italic">Glista</hi> shows that
                  even back in his high-school years he was taking fun very seriously, as well. When
                  reunited with his software he was sincerely touched by the experience and thanked
                  us deeply afterwards.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub06-en" xml:lang="en" corresp="#ch05-sub06">
               <head xml:id="Legacy-head-93">Conclusion</head>
               <p style="text-align:justify;" xml:id="Legacy-p-348">This demonstrates the human
                  aspect of software preservation, and the ability of software to provoke emotions.
                  For the software creator the running code is a part of their self, encapsulated in
                  digital form, as much as an artwork is for an artist.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-349">Software heritage is the
                  heritage of human ingenuity. It encapsulates the spirit of <hi rend="italic">homo
                     sapiens</hi> as we have known it in recent centuries, and it testifies to the
                  rise of the possible future of <hi rend="italic">homo digitalicus</hi>.</p>
            </div>
            <div type="subchapter" xml:id="ch05-sub07-en" xml:lang="en" corresp="#ch05-sub07">
               <head xml:id="Legacy-head-94">Postscript</head>
               <p style="text-align:justify;" xml:id="Legacy-p-350">Partner computer internals don’t
                  allow for the representation of dates after 1999, so Horvat decided to fix that in
                  the emulator by resetting any date that might be in the 21<hi rend="superscript"
                     >st</hi> century back to the base from 1990.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-351">The programs in the emulator are
                  thus running in a perpetual 1990s – a golden era for computing that Partner
                  computers never actually experienced, because PCs took over the market, and
                  because Iskra Delta filed for bankruptcy in 1990, starting the first liquidation
                  process in independent Slovenia, one that only ended in 2020. Unfortunately, the
                  liquidation manager destroyed all technical documentation early in this
                  process.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-352">
                  <hi rend="italic">Glista</hi>, however, will now live forever inside our Partner
                  emulator, partying like it’s still the 1990s.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch06" xml:lang="sl" corresp="#ch06-en">
            <head xml:id="Legacy-head-95">6. Pravni izzivi arhiviranja programske opreme</head>
            <docAuthor xml:id="Legacy-docAuthor-11">
               <ref target="#study01.3">Matija Šuklje</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-353">V tem prispevku bomo na kratko
               obravnavali glavne pravne izzive, ki se pojavljajo pri arhiviranju programske opreme
               v muzeju. Ker so avtorske pravice glavne pravice »intelektualne lastnine«, ki so
               odgovorne za zaščito in omejevanje uporabe programske opreme, bomo situacijo
               analizirali predvsem skozi to prizmo. Kljub temu pa bomo, kjer je to relevantno,
               omenili tudi druge pravice.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-354">Dejstva bomo poskušali predstaviti
               kar se da splošno, ker pa se Računalniški muzej in avtor prispevka nahajata v
               Sloveniji, se bomo osredotočili na to jurisdikcijo.</p>
            <div type="subchapter" xml:id="ch06-sub01" xml:lang="sl" corresp="#ch06-sub01-en">
               <head xml:id="Legacy-head-96">Pravice »intelektualne lastnine«</head>
               <p style="text-align:justify;" xml:id="Legacy-p-355">Izraz pravice »intelektualne
                     lastnine«<note place="foot" xml:id="ftn27" n="27">Čeprav je izraz že dobro
                     uveljavljen, je nekoliko zavajajoč, saj se lastnina nanaša na zelo otipljive in
                     konkurenčne dobrine, medtem ko se intelektualna lastnina nanaša na
                     nekonkurenčne in neoprijemljive dobrine. Če izdelate kopijo knjige, je s tem ne
                     odvzamete njenemu prvotnemu lastniku. V tem smislu gre za sredstvo, s katerim
                     se umetno ustvarja pomanjkanje, do katerega naravno sicer ne bi prišlo. </note>
                  (»PIL«) razumemo kot izključne pravice na neopredmetenih sredstvih.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-357">Pomembno je vedeti, da izvirni
                  ustvarjalec – kot je avtor na področju avtorskih pravic ali izumitelj na področju
                  patentov – morda ni dejanski imetnik izključnih pravic. Svoje pravice lahko
                  ustvarjalci prenesejo na nekoga drugega s pogodbo ali pa zato, ker so denimo
                  stvaritev ustvarili znotraj delovnega razmerja s svojim delodajalcem.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-358">Razen če vam zakon ali imetnik
                  pravic ne podeli posebnih pravic, ki se nanašajo na stvaritev, so pravice
                  izključno v rokah njihovega imetnika.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-359">V naslednjih podpoglavjih bomo
                  obravnavali vsako pravico intelektualne lastnine, ki igra pomembno vlogo pri
                  arhiviranju programske opreme, in sicer v padajočem vrstnem redu glede na
                  pomembnost oz. tveganje.</p>
               <div type="subchapter" xml:id="ch06-sub01.1" xml:lang="sl" corresp="#ch06-sub01.1-en">
                  <head xml:id="Legacy-head-97">Avtorske pravice</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-360">Avtorske pravice (ang.
                     copyright) so glavne pravice intelektualne lastnine, ki se nanašajo na
                     programsko opremo.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-361">Zajemajo stvaritve (in ne
                     »zgolj idej«) in samodejno nastanejo v trenutku, ko je izvirno umetniško delo
                     izraženo oz. fiksirano v mediju. Zaščitene so po celem svetu.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-362">Test izvirnosti je pomemben,
                     vendar je nekoliko nenavaden. Po eni strani omogoča obstoj dveh povsem enakih
                     del, ki sta zaščiteni z avtorskimi pravicami, če sta oba avtorja svoji deli
                     ustvarila popolnoma neodvisno drug od drugega in so podobnosti zgolj naključne.
                     Po drugi strani pa test izvirnosti preprečuje, da bi bilo mogoče avtorsko
                     zaščititi trivialne zadeve, kot so dejstva, postavitvene datoteke itd.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-363">V večini jurisdikcij avtorske
                     pravice trajajo za čas življenja avtorja in 70 let po njegovi smrti. Če je
                     imetnik avtorskih pravic pravna oseba, pa veljajo 70 let od stvaritve. Po tem
                     obdobju delo postane javno dostopno in z njim lahko vsakdo počne, kar želi.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.2" xml:lang="sl" corresp="#ch06-sub01.2-en">
                  <head xml:id="Legacy-head-98">Patenti</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-364">Patenti, vsaj v Evropski
                     uniji, »za programsko opremo ne obstajajo <hi rend="italic">per se</hi>.« V
                     praksi pa se je temu mogoče izogniti na več načinov, saj je to poslovni interes
                     nekaterih (vendar ne vseh) IT-podjetij in patentnih uradov. Zato moramo
                     obravnavati tudi patente.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-365">V začetnem obdobju razvoja
                     računalniške programske opreme je dejansko prišlo do živahne razprave o tem,
                     ali naj se programsko opremo zaščiti s patenti ali avtorskimi pravicami.
                     Zmagale so avtorske pravice, vendar je na koncu programska oprema postala edino
                     ustvarjalno delo, ki je lahko hkrati zaščiteno z avtorskimi pravicami in
                     patenti.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-366">Patent se nanaša na izum, ki
                     mora biti nov, imeti inventivni korak in biti industrijsko uporaben –
                     abstraktne ideje in matematični algoritmi namreč niso dovolj. V praksi je
                     riguroznost preverjanje teh testov odvisna od jurisdikcije in patentnega urada,
                     kar pomeni, da bi lahko mnogi (softverski) patenti<note place="foot"
                        xml:id="ftn28" n="28">Zaradi številnih nedejavnih subjektov (t. i.
                        »patentnih škratov) je nastalo več patentnih združenj in jamstvenih shem. Na
                        tej točki velja omeniti družbo <ref
                           target="https://openinventionnetwork.com/">Open Invention Network </ref>
                        in organizacijo <ref target="https://lotnet.com/">LoT Network </ref>, ki
                        imata številne člane in se medsebojno dopolnjujeta. </note> postali
                     neveljavni, če bi jih kdo poskušal razveljaviti s tožbo.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-368">Patenti morajo biti
                     registrirani v vsaki državi, v kateri jo izumitelj poskuša zaščititi, in
                     zaščita običajno traja 20 let. Po tem obdobju patenti potečejo in postanejo
                     javni.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.3" xml:lang="sl" corresp="#ch06-sub01.3-en">
                  <head xml:id="Legacy-head-99">Blagovne znamke in storitvene znamke</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-369">Blagovne znamke ščitijo
                     izvor/znamko blaga, storitvene znamke<note place="foot" xml:id="ftn29" n="29"
                        >Da vse skupaj malce poenostavimo, bomo za obe vrsti znamk uporabljali izraz
                        »blagovna znamka«. </note> pa izvor/znamko storitev. Da lahko opravljajo
                     svojo vlogo in so veljavne,<note place="foot" xml:id="ftn30" n="30">Če se ime
                        blagovne znamke tako široko uporablja, da ga povprečni potrošnik ne povezuje
                        več z določeno znamko/določenim izvorom, to imenujemo oslabitev blagovne
                        znamke in ta izgubi učinek. Na primer izrazi »superga«, »edigs« in
                        »selotejp« se v Sloveniji uporabljajo kot splošni izrazi. </note> pa morajo
                     imeti razlikovalni učinek in jih je potrebno uveljavljati.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-372">Običajno se blagovno znamko
                     (®) registrira za obdobje 10 let, kar se lahko po želji podaljša. Registracija
                     je omejena na državo in na razrede blaga/storitev, za katere ste vložili
                     prijavo.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-373">Obstaja tudi koncept
                     »slovečih blagovnih znamk« – če je znamka dobro poznana po celem svetu, lahko
                     lastnik drugim osebam prepreči uporabo blagovne znamke tudi za tiste razrede,
                     za katere lastnik ni vložil prijave (npr. znamka tipkovnic Nutella).</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-374">Poleg tega zakon do neke mere
                     varuje tudi neregistrirane blagovne znamke (™), dokler »imetnik« takšne znamke
                     uveljavlja to blagovno znamko.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-375">Na področju programske opreme
                     lahko na blagovne znamke naletite pri imenih in logotipih družb, projektov,
                     izdelkov in storitev.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.4" xml:lang="sl" corresp="#ch06-sub01.4-en">
                  <head xml:id="Legacy-head-100">Podatki v programski opremi/s programsko
                     opremo</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-376">Programska oprema je pogosto
                     uporabna in zanimiva le zaradi podatkov, ki jih obdeluje. Ko razpolagamo s
                     podatki, je treba upoštevati naslednje razlikovanje.</p>
                  <div type="subchapter" xml:id="ch06-sub01.4.1" xml:lang="sl"
                     corresp="#ch06-sub01.4.1-en">
                     <head xml:id="Legacy-head-101">Podatki</head>
                     <p style="text-align:justify;" xml:id="Legacy-p-377">Dejstva, ki so kot taka
                        goli podatki, niso zaščitena z avtorskimi pravicami. Kljub temu pa je del
                        podatkov mogoče zaščititi z avtorskimi pravicami (npr. leposlovna besedila,
                        slike, avdio- in videoposnetke itd.), z blagovnimi znamkami (imena znamk,
                        logotipi) itd.</p>
                     <p style="text-align:justify;" xml:id="Legacy-p-378">Če obdelujete osebne
                        podatke, je treba nadalje upoštevati zakonodajo o varstvu osebnih podatkov,
                        kot je GDPR.</p>
                  </div>
                  <div type="subchapter" xml:id="ch06-sub01.4.2" xml:lang="sl"
                     corresp="#ch06-sub01.4.2-en">
                     <head xml:id="Legacy-head-102">Baza podatkov</head>
                     <p style="text-align:justify;" xml:id="Legacy-p-379">Podatke se pogosto zbira
                        in ureja v bazi podatkov. Baze podatkov <hi rend="italic">kot celota</hi> so
                        pogosto zaščitene s pravicami na področju baze podatkov, kot je direktiva o
                        pravnem varstvu baz podatkov v EU,<note place="foot" xml:id="ftn31" n="31">V
                           ZDA so možnosti za zaščito avtorskih pravic baz podatkov zelo omejene. V
                           praksi se na splošno obe rešitvi izkažeta dokaj podobni. </note> medtem
                        ko lahko (nekatere ožje) avtorske pravice še vedno veljajo za prvotno
                        ureditev, izbiro in predstavitev podatkov.</p>
                     <p style="text-align:justify;" xml:id="Legacy-p-381">Pravice baze podatkov v
                        skladu z direktivo o pravnem varstvu baz podatkov veljajo v obdobju 15 let
                        in zanje velja samodejno učinkovanje. Z vsako bistveno spremembo baze
                        podatkov pa se za to bazo podatkov oblikuje nov sklop pravic. Lastnik ima
                        pravico do ugovora zoper kopiranje bistvenih delov svoje baze podatkov, tudi
                        če se podatki pridobivajo in rekonstruirajo postopno.</p>
                  </div>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.5" xml:lang="sl" corresp="#ch06-sub01.5-en">
                  <head xml:id="Legacy-head-103">Oblikovanje uporabniškega vmesnika (UI)/uporabniške
                     izkušnje (UX) programske opreme</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-382">Računalniški program ima
                     običajno (grafični) uporabniški vmesnik. Naslednje pravice se lahko nanašajo na
                     splošni »videz in občutek« programske opreme ali spletne strani:</p>
                  <list type="unordered" xml:id="Legacy-list-5">
                     <item>
                        <hi rend="italic">Avtorska pravica</hi> – šibka in ozko usmerjena (zaradi
                        dihotomije ideja–izraz), vseeno pa so lahko z njo zaščitene ikone ter avdio-
                        in videoposnetki, če so dovolj izvirni.</item>
                     <item>angl. <hi rend="italic">»Trade dress« (</hi>nem. <hi rend="italic"
                           >Geschmacksmuster; nimamo slovenskega izraza</hi>) – poseben videz in
                        občutek, ki mora biti razločevalen in nefunkcionalen, ni ga treba
                        registrirati, vendar je temu težko zadostiti.</item>
                     <item>
                        <hi rend="italic">Pravice iz modela </hi>oz. angl. <hi rend="italic"
                           >industrial design rights</hi> (npr. modeli v ZDA, angl. <hi
                           rend="italic">design patents</hi>) – treba jih je registrirati (npr.
                        vojna med družbama Apple in Samsung zaradi podobnosti med ikonami).</item>
                  </list>
                  <p style="text-align:justify;" xml:id="Legacy-p-383">V praksi je malo verjetno, da
                     bi zaradi njih prišlo do kakršnih koli težav pri predstavljanju programja v
                     muzeju/arhivu.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.6" xml:lang="sl" corresp="#ch06-sub01.6-en">
                  <head xml:id="Legacy-head-104">Strojna oprema</head>
                  <div type="subchapter" xml:id="ch06-sub01.6.1" xml:lang="sl"
                     corresp="#ch06-sub01.6.1-en">
                     <head xml:id="Legacy-head-105">Vezja strojne opreme, sheme itd.</head>
                     <p style="text-align:justify;" xml:id="Legacy-p-384">Čeprav ob arhiviranju
                        programske opreme same ni verjetno, da bi naleteli na različne sheme
                        programja, načrte vezij itd., pa so ti verjetno zelo zanimivi za
                        Računalniški muzej.</p>
                     <p style="text-align:justify;" xml:id="Legacy-p-385">Takšne elemente je mogoče
                        zaščititi z različnimi pravicami integriranega vezja. V ZDA se pogosto
                        imenujejo »mask works«, v EU pa običajno govorimo o »pravnem varstvu
                        topografije polprevodniških izdelkov«. Te pravice so običajno bolj omejene
                        kot avtorske pravice ali patenti in v več jurisdikcijah so samodejne
                        pravice.</p>
                  </div>
               </div>
            </div>
            <div type="subchapter" xml:id="ch06-sub02" xml:lang="sl" corresp="#ch06-sub02-en">
               <head xml:id="Legacy-head-106">Imena domen</head>
               <div type="subchapter" xml:id="ch06-sub02.1" xml:lang="sl" corresp="#ch06-sub02.1-en">
                  <head xml:id="Legacy-head-107">Imena internetnih domen</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-386">Imena internetnih domen ne
                     sodijo med pravice intelektualne lastnine, čeprav je Evropsko sodišče za
                     človekove pravice razsodilo, da gre za »lastnino« (<hi rend="italic">ESČP:
                        Paeffgen GmbH proti Nemčiji 25379/04</hi>). V praksi se lahko blagovne
                     znamke uporablja za pravno obrambo v sporih glede imen domen.</p>
               </div>
            </div>
            <div type="subchapter" xml:id="ch06-sub03" xml:lang="sl" corresp="#ch06-sub03-en">
               <head xml:id="Legacy-head-108">Kako pridobiti pravice</head>
               <p style="text-align:justify;" xml:id="Legacy-p-387">Razen če ste dejanski imetnik
                  pravic, morate pravice pridobiti z licenco ali na drugačen način.</p>
               <div type="subchapter" xml:id="ch06-sub03.1" xml:lang="sl" corresp="#ch06-sub03.1-en">
                  <head xml:id="Legacy-head-109">Brezplačne (oziroma »svobodne«)</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-388">Obstajata dva načina, kako
                     lahko programsko opremo vsi uporabljajo brezplačno in na zanesljiv način.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-389">Prvi način je, da so avtorske
                     pravice in morebitni patenti, ki veljajo za programsko opremo – morda celo
                     blagovne znamke, a to ni tako preteče – že potekli. To pomeni, da so na
                     razpolago javnosti<note place="foot" xml:id="ftn32" n="32">V nekaterih
                        jurisdikcijah, kot so ZDA in VB, lahko avtor svoje delo nameni javni domeni
                        in se odpove avtorskim pravicam, vendar to v večinskem delu sveta (vključno
                        s celinsko Evropo) ni mogoče zaradi neodtujljivih moralnih pravic. Ena
                        možnost je uporaba licenc, kot sta CC0-1.0 in Unlicense. </note> in da jih
                     lahko vsi brezplačno uporabljajo.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-391">Druga možnost pa je, da se
                     programsko opremo izda kot brezplačno in odprtokodno. Ker FOSS (Free &amp; Open
                     Source Software) vsem uporabnikom omogoča <hi rend="italic">uporabo</hi>, <hi
                        rend="italic">proučevanje</hi>, <hi rend="italic">deljenje</hi> in <hi
                        rend="italic">izboljševanje</hi>, je to za potrebe muzeja (veliko) več kot
                     dovolj.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub03.2" xml:lang="sl" corresp="#ch06-sub03.2-en">
                  <head xml:id="Legacy-head-110">Izjeme, določene z zakonom</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-392">Še enega od načinov
                     predstavljajo zakonsko določene omejitve in izjeme, kar pomeni, da pravice
                     podeli sam zakon.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-393">
                     <hi rend="italic">Priobčitev javnosti na zaslonih</hi> (ZASP,<note place="foot"
                        xml:id="ftn33" n="33">Zakon o avtorski in sorodnih pravicah. </note> 49.b
                     člen) omogoča uporabo na razstavah in to zagotovo velja tudi za omogočanje
                     dostopa (do programja ali drugega gradiva) prek računalniškega zaslona za
                     raziskovanje in učenje na podlagi eksponata.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-395">
                     <hi rend="italic">Privatno in drugo lastno reproduciranje</hi> (ZASP §50)
                     javnim muzejem, arhivom itd. omogoča reproduciranje na katerem koli nosilcu, če
                     to storijo iz lastnega primerka in če pri tem nimajo namena dosegati
                     gospodarske koristi.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-396">
                     <hi rend="italic">Prosto reproduciranje in dajanje na voljo javnosti
                        osirotelega dela</hi> (ZASP 50.a) se lahko uporabi, kadar se odkrije
                     osirotelo delo brez avtorja. V takšnih primerih zakon javnim muzejem, arhivom
                     in podobnim institucijam dovoli digitalizacijo, prosto reproduciranje,
                     prikazovanje in celo distribuiranje. Zakon predpisuje, da je treba slediti
                     postopku skrbnega iskanja in beleženja. Velik zaplet predstavlja dejstvo, da v
                     50. členu programska oprema ni šteta med potencialno osirotela dela, zato bi
                     bilo smiselno predlagati spremembo zakona.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub03.3" xml:lang="sl" corresp="#ch06-sub03.3-en">
                  <head xml:id="Legacy-head-111">Licenca</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-397">Ker praktično nobena
                     programska oprema ni v javni domeni in ZASP praktično ne opredeljuje izjem na
                     področju programske opreme, boste skoraj zagotovo morali pridobiti licenco.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-398">Ko se z imetniki pravic
                     pogajate za pridobitev licence, morate razmišljati na široko in vključiti
                     splošno javnost ali pa vsaj druge muzeje/arhive.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-399">Z licenco <hi rend="italic"
                        >FOSS</hi> lahko dejansko najlažje pridobite vse potrebne licence. Manj kot
                     je licenca<note place="foot" xml:id="ftn34" n="34">Npr. CC0-1.0, Unlicense,
                        MIT, BSD-2-Clause, BSD-3-Clause ali Apache-2.0. Če so patenti še vedno
                        zavarovani, je Apache-2.0 dobra izbira (in v tem primeru se izognete licenci
                        CC0-1.0). </note> omejujoča, na manj omejitev boste (in bodo drugi) naleteli
                     ob uporabi pridobljene programske opreme.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-401">Če to ni mogoče, se
                     poskušajte dogovoriti za licenco za <hi rend="italic">muzejske (in arhivske)
                        namene</hi>. Omejitev licence za primer posebne uporabe bi drugim muzejem
                     (in arhivom) še vedno omogočala uporabo tega dela, poleg tega pa bi odpravila
                     morebitne težave, ki bi doletele vaš muzej v primeru razstavljanja na drugi
                     lokaciji.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-402">Če so pogajanja izjemno
                     težka, obstaja možnost, da se programsko opremo deponira v hrambo (angl.
                     escrow) in/ali podpiše začasno pogodbo o nerazkritju informacij (angl. NDA).
                     Tako lahko zaščitite programsko opremo v svojem muzeju ali arhivu in se z
                     imetnikom pravic dogovorite, da jo prepusti javnosti (v idealnih razmerah kot
                     FOSS) po nekem določenem obdobju ali izpolnitvi določenih pogojev.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub03.4" xml:lang="sl" corresp="#ch06-sub03.4-en">
                  <head xml:id="Legacy-head-112">Javni organi</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-403">Če je bila zadevna programska
                     oprema razvita v sklopu javnega organa ali po njegovem naročilu, se lahko prek
                     Zakona o dostopu do informacij javnega značaja (ZDIJZ) zahteva dostop do
                     izvorne kode in pravice do ponovne uporabe.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-404">Po celotni EU je to postalo
                     znano pod načelom <hi rend="italic">javni denar, javna koda</hi> in zakon v
                     nekaterih državah (npr. v Italiji, Franciji) to tudi izrecno zahteva. V
                     slovenskem zakonu programska oprema sicer ni izrecno omenjena, vendar bi z
                     razumno interpretacijo lahko prišli do takšnega zaključka. To še ni bilo
                     preverjeno v praksi.</p>
               </div>
            </div>
            <div type="subchapter" xml:id="ch06-sub04" xml:lang="sl" corresp="#ch06-sub04-en">
               <head xml:id="Legacy-head-113">Drugi premisleki</head>
               <p style="text-align:justify;" xml:id="Legacy-p-405">Vse spletne shrambe izvorne kode
                  (kot sta GitHub ali GitLab), galerije slik, spletne strani družbenih omrežij itd.
                  imajo objavljene <hi rend="italic">Splošne pogoje poslovanja</hi>, ki veljajo
                  tudi, če se nanašajo na muzejsko rabo, in pogosto zajemajo pravice intelektualne
                  lastnine.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-406">Po drugi strani pa obstaja
                  velika verjetnost, da boste sčasoma prejeli pritožbe in zahteve za <hi
                     rend="italic">izbris</hi> zaradi (zatrjevanih) kršitev avtorskih pravic in
                  odstranitev osebnih podatkov (GDPR). Zato delujte proaktivno in oblikujte
                  politiko, ki bo to urejala.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch06-en" xml:lang="en" corresp="#ch06">
            <head xml:id="Legacy-head-114">6. Legal challenges of archiving software</head>
            <docAuthor xml:id="Legacy-docAuthor-12">
               <ref target="#study01.4-en">Matija Šuklje</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-407">In this article we will briefly
               deal with the main legal challenges of archiving software in a museum. Since
               copyright is the main “intellectual property” right responsible for protecting and
               limiting the use of software, we will primarily analyze the situation through that
               prism, but will mention other rights where relevant.</p>
            <p style="text-align:justify;" xml:id="Legacy-p-408">We will try to be as generic as
               possible, but since both the Computer History Museum and this article’s author are
               from Slovenia, this is the main jurisdiction we will concentrate on.</p>
            <div type="subchapter" xml:id="ch06-sub01-en" xml:lang="en" corresp="#ch06-sub01">
               <head xml:id="Legacy-head-115">“Intellectual property” rights</head>
               <p style="text-align:justify;" xml:id="Legacy-p-409">With the term intellectual
                     property<note place="foot" xml:id="ftn27-en" n="27">The term, while already
                     well established, is somewhat misleading, since property deals with tangible
                     and rivalrous goods, while intellectual property deals with non-rivalrous and
                     intangible goods. Creating a copy of a book does not take the book away from
                     its original owner. In this effect it is a means to artificially create
                     scarcity where naturally there would be none. </note> rights (IPR) we
                  understand exclusive rights to intangible assets.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-411">Note that the original creator –
                  such as the author in copyright, or inventor in patents – may not always be the
                  actual holder of these exclusive rights. They could have transferred their rights
                  to someone else via a contract, or due to having made the subject of the rights as
                  part of their work for their employer.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-412">Unless the law or the rights
                  holder give you specific rights to the related creation, the rights lie solely
                  with their holder.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-413">We will tackle each IPR that is
                  relevant to archiving software in the sub-chapters below, in descending order of
                  importance and risk.</p>
               <div type="subchapter" xml:id="ch06-sub01.1-en" xml:lang="en" corresp="#ch06-sub01">
                  <head xml:id="Legacy-head-116">Copyright</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-414">Copyright (= authors’ rights)
                     is the main IPR that covers software.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-415">It covers expressions (not
                     just “mere ideas”) and automatically starts the moment an original work of art
                     is fixed in a medium, and is protected globally.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-416">The originality test is
                     important here, but also somewhat strange. On the one hand it provides the
                     option for two identical pieces of work to exist and both carry copyright
                     protection, as long as both authors have made their work completely
                     independently and the similarities are accidental. On the other hand, the
                     originality test also prevents trivial things like facts, configuration files
                     and so on from being copyrightable.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-417">The term of copyright in most
                     jurisdictions is for the duration of the author’s life plus 70 years after
                     that; or in the case where the copyright holder is a legal entity, 70 years
                     from fixation. After that term, the work falls into the public domain and
                     anyone can do anything with it.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.2-en" xml:lang="en" corresp="#ch06-sub01.2">
                  <head xml:id="Legacy-head-117">Patents</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-418">Patents, at least in the EU,
                     “do not exist on software <hi rend="italic">per se</hi>”. In practice though
                     there are several ways to circumvent this, as it is in the business interests
                     of both some (not all) IT companies and patent offices. As such we need to also
                     take patents into account.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-419">In fact, in the early days of
                     computer software there was a lively debate as to whether software should be
                     protected by patents or copyright. Copyright won, but in the end software is
                     the only creative work that can at the same time be protected by both copyright
                     and patents.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-420">A patent covers an invention,
                     which has to be novel, have an inventive step, and be industrially applicable –
                     mere abstracts and mathematical algorithms are not enough. In practice, it
                     depends on how diligent the jurisdiction and patent office are at running these
                     tests. Which means many (software) patents in the wild<note place="foot"
                        xml:id="ftn28-en" n="28">Due to the rise of non-practicing entities (“patent
                        trolls”), several patent pools and protection schemes have emerged. <ref
                           target="https://openinventionnetwork.com/">Open Invention Network </ref>
                        and <ref target="https://lotnet.com/">LoT Network </ref> are worth
                        mentioning here, which have many members and complement each other. </note>
                     could be invalid, but someone has to bring a suit to invalidate them.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-422">Patents have to be registered
                     in each country where the inventor filing it seeks protection, and typically
                     last 20 years from filing. After that they expire, and the invention falls into
                     the public domain.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.3-en" xml:lang="en" corresp="#ch06-sub01.3">
                  <head xml:id="Legacy-head-118">Trademarks &amp; service marks</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-423">Trademarks protect the
                     origins/branding of goods and service, marks<note place="foot"
                        xml:id="ftn29-en" n="29">To simplify we will use the term “trademark” for
                        both.</note> those of services. In order to play their role – and therefore
                     to be valid<note place="foot" xml:id="ftn30-en" n="30">If a trademark has been
                        used so broadly the average consumer does not connect it with a specific
                        brand/origin anymore, we call that a dilution of a trademark and it loses
                        its force. In Slovenia the words “superga”, “edigs”, and “selotejp” are now
                        generic terms, similar to “kleenex” or “sellotape” in English. </note> –
                     they need to be distinctive and need to be enforced.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-426">Typically you would register
                     a trademark (®) for 10 years, and can renew this as often as you want. A
                     registration is limited to the country and the classes of goods/services you
                     filled it for.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-427">The concept of “notorious
                     brands” also exists, which means that if a brand is extremely well known
                     globally its owner can prevent others from using the trademark, even for
                     classes that the owner has not registered for (e.g. Nutella-branded
                     keyboards).</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-428">Furthermore, the law gives
                     certain protection also to unregistered trademarks (™) as long as the “owner”
                     enforces that trademark.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-429">With software you would
                     typically run into trademarks in company, project, product and services names
                     and logos.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.4-en" xml:lang="en" corresp="#ch06-sub01.4">
                  <head xml:id="Legacy-head-119">Data in/with software</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-430">Often a piece of software is
                     useful and interesting only because of the data it manipulates. When we deal
                     with such data we need to take into account the distinction outlined below.</p>
                  <div type="subchapter" xml:id="ch06-sub01.4.1-en" xml:lang="en"
                     corresp="#ch06-sub01.4.1">
                     <head xml:id="Legacy-head-120">Data</head>
                     <p style="text-align:justify;" xml:id="Legacy-p-431">Facts – and as such pure
                        data – are not protected by copyright. But a piece of data can be protected
                        by copyright (e.g. literary text, images, audio, video etc.), trademarks
                        (brand names, logos) and so on.</p>
                     <p style="text-align:justify;" xml:id="Legacy-p-432">If the data you are using
                        is personal data, a further consideration is that you need to follow the
                        relevant personal data protection laws, such as the GDPR.</p>
                  </div>
                  <div type="subchapter" xml:id="ch06-sub01.4.2-en" xml:lang="en"
                     corresp="#ch06-sub01.4.2">
                     <head xml:id="Legacy-head-121">Database</head>
                     <p style="text-align:justify;" xml:id="Legacy-p-433">Often data will be
                        collected and ordered in a database. Databases <hi rend="italic">as a
                           whole</hi> are often protected by database rights, such as the Database
                        Directive in the EU<note place="foot" xml:id="ftn31-en" n="31">In the US
                           databases receive very limited copyright protection, and broadly speaking
                           in practice the two solutions play out somewhat similarly. </note>, while
                        (some narrow) copyright may still apply to an original arrangement,
                        selection and presentation of data.</p>
                     <p style="text-align:justify;" xml:id="Legacy-p-435">According to the Database
                        Directive, database rights last for 15 years and are automatic. Each time a
                        database is substantially modified, however, a new set of rights are created
                        for that database. An owner has the right to object to the copying of
                        substantial parts of their database, even if data is extracted and
                        reconstructed piecemeal.</p>
                  </div>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.5-en" xml:lang="en" corresp="#ch06-sub01.5">
                  <head xml:id="Legacy-head-122">Design &amp; UI/UX in software</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-436">Often a computer program will
                     have a (graphical) user interface. The following rights can apply to the
                     general “look &amp; feel” of a piece of software or webpage:</p>
                  <list type="unordered" xml:id="Legacy-list-6">
                     <item>
                        <hi rend="italic">copyright</hi> – weak and narrow (due to the
                        idea-expression dichotomy), but can still protect icons, audio and video if
                        they carry enough originality</item>
                     <item>
                        <hi rend="italic">trade dress</hi> (e.g. <hi rend="italic"
                           >Geschmacksmuster</hi> in German) – the special look and feel of
                        something has to be distinctive and non-functional; does not need to be
                        registered, but is hard to fulfil</item>
                     <item>
                        <hi rend="italic">industrial design rights</hi> (e.g. design patents in the
                        US) – need to be registered (e.g. the battle between Apple and Samsung with
                        regard to similar icons)</item>
                  </list>
                  <p style="text-align:justify;" xml:id="Legacy-p-437">In practice, though, these
                     are unlikely to cause issues for presenting software in a museum or
                     archive.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub01.6-en" xml:lang="en" corresp="#ch06-sub01.6">
                  <head xml:id="Legacy-head-123">Hardware</head>
                  <div type="subchapter" xml:id="ch06-sub01.6.1-en" xml:lang="en"
                     corresp="#ch06-sub01.6.1">
                     <head xml:id="Legacy-head-124">Hardware circuits, schematics, etc.</head>
                     <p style="text-align:justify;" xml:id="Legacy-p-438">Although not something you
                        would encounter often when archiving software, computer museums still have
                        great interest in different hardware schematics, circuit plans, etc.</p>
                     <p style="text-align:justify;" xml:id="Legacy-p-439">These can be protected by
                        different integrated circuits rights. In the US these are commonly referred
                        to as “mask works”, whereas in the EU we talk about “legal protection of
                        topographies of semiconductor products”. Such rights are typically more
                        limited than copyrights or patents, and in several jurisdictions they are
                        automatic.</p>
                  </div>
               </div>
            </div>
            <div type="subchapter" xml:id="ch06-sub02-en" xml:lang="en" corresp="#ch06-sub02">
               <head xml:id="Legacy-head-125">Domain names</head>
               <div type="subchapter" xml:id="ch06-sub02.1-en" xml:lang="en" corresp="#ch06-sub02.1">
                  <head xml:id="Legacy-head-126">Internet domain names</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-440">Internet domain names do not
                     fall squarely into any other IP rights, though the European Court of Human
                     Rights ruled that they are “property” (<hi rend="italic">ECHR: Paeffgen GmbH vs
                        Germany 25379/04</hi>). In practice, trademarks can be used as legal defense
                     in domain name disputes.</p>
               </div>
            </div>
            <div type="subchapter" xml:id="ch06-sub03-en" xml:lang="en" corresp="#ch06-sub03">
               <head xml:id="Legacy-head-127">How to obtain rights</head>
               <p style="text-align:justify;" xml:id="Legacy-p-441">Unless you are the actual rights
                  holder, you need to obtain the rights through a license or otherwise.</p>
               <div type="subchapter" xml:id="ch06-sub03.1-en" xml:lang="en" corresp="#ch06-sub03.1">
                  <head xml:id="Legacy-head-128">Free (as in “freedom”)</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-442">There are two ways that a
                     piece of software can be free to use by everyone in a reliable and legal
                     fashion.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-443">The first is that the
                     copyright and eventual patents in the software – perhaps even trademarks, but
                     these are of lesser concern – have already expired. This means that the
                     software has fallen into the public domain<note place="foot" xml:id="ftn32-en"
                        n="32">In certain jurisdictions like the US and the UK it is possible for an
                        author to dedicate their work to public domain, waiving their copyright. But
                        in the majority of the world (incl. continental Europe) that is not possible
                        due to inalienable moral rights. As a work-around licenses like CC0-1.0 and
                        Unlicense can be used. </note> and is now free to use for everyone.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-445">The other option is that the
                     software is released as Free and Open Source Software (FOSS). Since FOSS gives
                     all the recipients freedoms to <hi rend="italic">use</hi>, <hi rend="italic"
                        >study</hi>, <hi rend="italic">share</hi> and <hi rend="italic"
                     >improve</hi>, this is more than enough (by far) for a museum to work with.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub03.2-en" xml:lang="en" corresp="#ch06-sub03.2">
                  <head xml:id="Legacy-head-129">Exceptions by law</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-446">Another way that software can
                     be used for free by anyone is based on the related statutory limitations and
                     exceptions, and thus we are given these rights by the law itself <note
                        place="foot" xml:id="ftn33-en" n="33">The English translations of §49.b and
                        §50.a titles are mine, as I could not find an (un)official English
                        translation of them yet. </note>.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-448">
                     <hi rend="italic">Communication to the public on screens</hi> (ZASP<note
                        place="foot" xml:id="ftn34-en" n="34">Copyright and Related Rights Act
                        (Slov. <hi rend="italic">Zakon o avtorski in sorodnih pravicah</hi>).
                     </note>, §49.b) could be used for exhibitions, but for certain in order to give
                     people access (to software or other material) via a computer screen to research
                     and learn from the exhibit.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-450">
                     <hi rend="italic">Private and other internal reproduction</hi> (ZASP §50)
                     allows public museums, archives, etc. to make copies on any medium, under the
                     condition that they do so from a copy they already own and that they are not
                     making a profit with the reproduction.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-451">
                     <hi rend="italic">Free reproduction and offering to the public of orphan
                        works</hi> (ZASP 50.a) can be used when a work without a known author is
                     found. In such cases the law permits public museums, archives and so on to
                     digitize, freely reproduce, display and even distribute the work in question.
                     However, the law does prescribe a careful search and logging process that needs
                     to be followed in such cases. A further and significant complication is that
                     §50 does not count software as potential orphan works, and it would make sense
                     to propose a change of law here.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub03.3-en" xml:lang="en" corresp="#ch06-sub03.3">
                  <head xml:id="Legacy-head-130">License</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-452">Since very little software is
                     already in the public domain and ZASP does not have many exceptions for
                     software, you will most likely need to obtain a license.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-453">When you negotiate a license
                     with the rights holders, it is important to think broadly and include the
                     general public, or other museums/archives, at the very least.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-454">As such, the easiest way to
                     obtain all needed rights possible would be to negotiate a FOSS license. The
                     more permissive<note place="foot" xml:id="ftn35-en" n="35">Such as CC0-1.0,
                        Unlicense, MIT, BSD-2-Clause, BSD-3-Clause, or Apache-2.0. If there are
                        still active patents, Apache-2.0 is a good choice (and avoid CC0-1.0 in that
                        case). </note> the license, the fewer limitations you (and others) would run
                     into when using the procured software.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-456">If that is not possible, try
                     to negotiate a custom license for <hi rend="italic">museastic (and archival)
                        purposes</hi>. Limiting the license to this specific use case would still
                     enable other museums (and archives) to use this work, and also clear any
                     potential issues with your museum having an exhibition elsewhere.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-457">In exceptionally difficult
                     negotiations, an option is to put the software under escrow and/or temporary
                     NDA. That way you could secure the software in your museum/archive and agree
                     with the rights holder to release it (ideally as FOSS) to the public after a
                     certain amount of time has passed or a certain condition has been met.</p>
               </div>
               <div type="subchapter" xml:id="ch06-sub03.4-en" xml:lang="en" corresp="#ch06-sub03.4">
                  <head xml:id="Legacy-head-131">Public bodies</head>
                  <p style="text-align:justify;" xml:id="Legacy-p-458">If the software in question
                     was written or procured by a public body, one might be able to use the Public
                     Information Access Act (ZDIJZ) to request the source code and the rights to
                     reuse.</p>
                  <p style="text-align:justify;" xml:id="Legacy-p-459">EU-wide this is known by the
                     slogan <hi rend="italic">Public Money, Public Code</hi>, and in some countries
                     (e.g. Italy, France) the law explicitly requests this. In Slovenia the law does
                     not explicitly mention software, but a reasonable interpretation could lead to
                     this, although it has not yet been tested in court.</p>
               </div>
            </div>
            <div type="subchapter" xml:id="ch06-sub04-en" xml:lang="en" corresp="#ch06-sub04">
               <head xml:id="Legacy-head-132">Other considerations</head>
               <p style="text-align:justify;" xml:id="Legacy-p-460">Online repositories as source
                  code forges (GitHub, GitLab, etc.), image galleries, social media websites and so
                  on all have their <hi rend="italic">Terms of Service</hi>. Even if you are a
                  museum, these apply and often include IP rights.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-461">Moreover, when working in this
                  context it is likely that you will eventually be faced with complaints and
                  requests to <hi rend="italic">take down</hi> (claimed) copyright violations and
                  remove personal data (under the GDPR) – so be proactive and have a policy on how
                  to handle these.</p>
            </div>
         </div>
         <div type="chapter" xml:id="ch07" xml:lang="sl" corresp="#ch07-en">
            <head xml:id="Legacy-head-133">7. Pionirski začetki uvajanja računalniške podpore pri
               urbanističnem načrtovanju v obdobju 1970–1985</head>
            <docAuthor xml:id="Legacy-docAuthor-13">
               <ref target="#study01.8">Franc J. Zakrajšek</ref>
            </docAuthor>
            <div type="subchapter" xml:id="ch07-sub01" xml:lang="sl" corresp="#ch07-sub01-en">
               <head xml:id="Legacy-head-134">1. Uvod</head>
               <p style="text-align:justify;" xml:id="Legacy-p-462">V začetku osemdesetih let
                  20. stoletja se je v svetu začelo intenzivno uvajanje računalniške tehnologije na
                  različnih strokovnih področjih in sektorjih. Računalniška tehnologija se je po
                  vsem svetu uvajala tako rekoč od samega začetka. To je povzročilo korenite
                  spremembe na strokovnih področjih, vključno z vsebino, delovnimi procesi in
                  uporabo.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-463">V članku delim svoj prispevek k
                  raziskavam, razvoju in implementaciji računalniške podpore na področju
                  urbanističnega načrtovanja v tem obdobju. Pri svojem pionirskem delu na tem
                  področju sem sodeloval z inovativnimi in učinkovitimi interdisciplinarnimi ekipami
                  matematikov, računalničarjev, arhitektov, geografov, ekonomistov, sociologov in
                  drugih strokovnjakov. Sem raziskovalec, razvijalec in svetovalec, zaposlen na
                  Urbanističnem inštitutu Republike Slovenije.<note place="foot" xml:id="ftn35"
                     n="35">Urbanistični inštitut Republike Slovenije je ena vodilnih ustanov v
                     Sloveniji in nekdanji Jugoslaviji na področju raziskav, implementacije in
                     svetovanja v okviru urbanističnega in regionalnega načrtovanja, ki je bila
                     ustanovljena leta 1955 in je močno povezana s podobnimi ustanovami po Evropi in
                     ZDA. </note> Okvir prispevka zagotavlja le skromen prikaz izbranih delcev
                  tistega časa, da bi bralci dobili nekaj vtisov o obravnavanem obdobju ter o naši
                  takratni vlogi in prispevkih.</p>
            </div>
            <div type="subchapter" xml:id="ch07-sub02" xml:lang="sl" corresp="#ch07-sub02-en">
               <head xml:id="Legacy-head-135">2. Informacijski sistem za prostorsko
                  načrtovanje</head>
               <p style="text-align:justify;" xml:id="Legacy-p-465">Razvili smo informacijski sistem
                  za prostorsko načrtovanje (urbanistično/regionalno) (ISSP) z dvema komponentama –
                  bazo podatkov in naborom postopkov. Baza podatkov sestoji iz podatkov o preteklih
                  in sedanjih stanjih ter podatkov o odločitvah glede načrtovanja v obliki, primerni
                  za uporabo v postopkih načrtovanja. Bistveni del baze podatkov predstavljajo
                  geokodirani (geografski referenčni) podatki. Nabor postopkov sestavljajo postopki
                  za ustvarjanje in posodabljanje baze podatkov ter za njeno uporabo in analizo,
                  glavni del pa predstavljajo postopki za uporabo podatkov, kot so pridobivanje
                  podatkov, metode statistične analize ter urbanistični in regionalni modeli.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-466">ISSP je sistem za podporo
                  odločanju, namenjen zadovoljevanju podatkovnih potreb znotraj različnih procesov
                  načrtovanja in spremljanja na komunalni, občinski in/ali regionalni ravni. Gre za
                  uporabniško usmerjen informacijski sistem, katerega funkcija ni zbiranje podatkov,
                  pač pa obdelava podatkov za končno uporabo. ISSP ni samostojen informacijski
                  sistem, temveč je tesno povezan z drugimi informacijskimi sistemi v državi.
                  Uporablja namreč podatke iz različnih informacijskih sistemov (npr.
                  administrativne podatke, statistične podatke) ter ustvari podatke, ki bi se lahko
                  uporabljali zunaj območja načrtovanja (npr. podatke za lokalno upravo).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-467">Primarni razvoj v pristopu tega
                  sistema (z vidika inovativnosti in izziva) zajema vključevanje najnovejših
                  spoznanj iz teorije informacijskih sistemov, predvsem tiste, ki jo je promoviral
                  takratni poznavalec na tem področju James Martin. Njegov manifest obravnava
                  informacijske sisteme; trditev, da so podatkovne entitete in s tem podatki bolj
                  stabilni od postopkov, ki jih želimo avtomatizirati, in da so relacijske
                  podatkovne baze v tretji normalni obliki, inženiring informacijske tehnologije,
                  računalniško podprt programski inženiring, programski jeziki četrte generacije,
                  RAD (Rapid Application Development – hiter razvoj aplikacij) in še več. Vse to sem
                  uspešno povezal s svojim matematičnim znanjem o topoloških strukturah (točka,
                  črta, poligon ...) in njihovih medsebojnih odnosih, ki danes predstavljajo osnovo
                  geografskih informacijskih sistemov.</p>
               <figure xml:id="Legacy-figure-29">
                  <graphic url="media/Zakrajsek1.jpg"/>
                  <head>
                     <hi rend="italic">Slika 1: Predstavitev v fizičnem prostoru, matematika
                        geo-topološkega jedra in tretja normalna oblika. Vir: Zakrajšek, F.: Zasnova
                        informacijskega sistema na ravni mesta Ljubljane. Ljubljana: Urbanistični
                        inštitut Republike Slovenije, 1981</hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-30">
                  <graphic url="media/Zakrajsek2.jpg"/>
                  <head>
                     <hi rend="italic">Slika 2: Standardna baza podatkov informacijskega sistema za
                        prostorsko načrtovanje. Vir:</hi> Zakrajšek, F. Information systems for
                     urban and regional planning. V: Gerckens, L. C. (ed.), et al. <hi rend="italic"
                        >Planning in transition: regional development, urban form, information
                        system: symposium 1985, Columbus, 21.–22. maj 1985</hi>. Columbus:
                     Urbanistični inštitut Republike Slovenije, Državna univerza Ohia, oddelek za
                     mestno in regionalno načrtovanje, 1985</head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub03" xml:lang="sl" corresp="#ch07-sub03-en">
               <head xml:id="Legacy-head-138">3. Primer zajema podatkov : centroidi hišnih
                  številk</head>
               <p style="text-align:justify;" xml:id="Legacy-p-468">V 80. letih prejšnjega stoletja
                  je zajem grafičnih podatkov predstavljal poseben izziv. Optični bralniki večjih
                  dimenzij niso obstajali, manjši od A4 pa so bili težko dostopni. Zato smo morali
                  razviti polavtomatske, delno ročne postopke digitalizacije ter celo vrsto
                  programskih vmesnikov za prenos podatkov z luknjanega traka in na luknjan trak.
                  Naj omenim še naš poseben inovativen pristop k digitalizaciji hišnih številk.
                  Koordinate hišnih številk so v urbanih sistemih nujne, saj lahko na ta način
                  spremljamo stanje »bivalne« dejavnosti (stanovalcev in stanovanj) ter dejavnosti
                  »dela« v prostoru. Najprej smo uspešno digitalizirali hišne številke v Celju
                  (približno 20.000 enot) in nekoliko kasneje še hišne številke v Ljubljani. Njihova
                  položajna točnost v naravi je bila 5 m. Geodetska uprava Republike Slovenije je
                  uvedla našo metodo pri digitalizaciji vseh hišnih številk v Republiki Sloveniji.
                  Podatke digitaliziranih hišnih številk v Celju in Ljubljani so prenesli v svojo
                  bazo EHIŠ, ki jo še vedno redno vzdržujejo. Treba je poudariti, da je bila
                  Slovenija med prvimi državami na svetu, ki je digitalizirala vse hišne številke na
                  svojem ozemlju.</p>
               <figure xml:id="Legacy-figure-31">
                  <graphic url="media/Zakrajsek3.jpg"/>
                  <head>
                     <hi rend="italic">Slika 3: Zajem podatkov, centroidi hišnih številk. Vir:
                        Zakrajšek, F. et al: Informacijska zasnova občine Celje ob pripravi
                        prostorskega plana. Ljubljana: Urbanistični inštitut Republike Slovenije,
                        1979</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub04" xml:lang="sl" corresp="#ch07-sub04-en">
               <head xml:id="Legacy-head-140">4. Primer izpisa podatkov: prvi digitalni
                  zemljevidi</head>
               <p style="text-align:justify;" xml:id="Legacy-p-469">Podobno kot pri optičnih
                  bralnikih velikega formata je bila v začetku 80. let prejšnjega stoletja težava
                  tudi z risalniki in tiskalniki velikega formata. Da bi bili prvi digitalni
                  zemljevidi čim bolj dostopni, smo sprva uporabljali navadne vrstične tiskalnike in
                  s pretiskom ustvarili manj temnejših področij na zemljevidu. Težavo z velikostjo
                  znakov (pravokotnik in ne kvadrat) smo rešili z matematično 2-dimenzionalno
                  interpolacijo.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-470">Pripravili smo knjižnico
                  računalniških programov za obravnavo (obdelavo in shranjevanje) celične
                  organizacije prostorske baze podatkov. Celično organizacijo prostorske baze
                  podatkov imenujemo organizacija, kjer je osnovna prostorska enota mrežna celica
                  (kvadrat), za katero imamo določene vektorske podatke. Namen programske knjižnice
                  je poenostaviti programiranje aplikacij za vnos podatkov, analize (statistične,
                  prostorske ...), modelov (projekcije, simulacije ...), ter za izpis rezultatov
                  (grafični prikazi, tabele, diagrami ...). Knjižnica vsebuje programe za:</p>
               <list type="unordered" xml:id="Legacy-list-7">
                  <item>ustvarjanje, odpiranje, zapiranje, uvoz in izvoz podatkov iz baze podatkov
                     (datoteke C in datoteke CF),</item>
                  <item>tiskanje podatkov z vrstičnim tiskalnikom (GRAFC7, GRAFC8),</item>
                  <item>izris podatkov z risalnikom Versatec (GRAFCP).</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-471">Programe smo večinoma pisali v
                  programskem jeziku FORTRAN (FTN), nekaj pa tudi v COMPASS in PASCAL 6000. Za
                  upravljanje s podatkovnimi bazami smo uporabili za dostop do podatkov metodo
                  naslavljanja do besed (word addressable) v okviru operacijskega sistema NOS/BE 1.3
                  na računalniku CYBER 72.</p>
               <figure xml:id="Legacy-figure-32">
                  <graphic url="media/Zakrajsek4.jpg"/>
                  <head>
                     <hi rend="italic">Slika 4: Izpisi zemljevidov občine Celje, vir: Zakrajšek, F.
                        et al: Informacijska zasnova občine Celje ob pripravi prostorskega plana.
                        Ljubljana: Urbanistični inštitut Republike Slovenije, 1979</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub05" xml:lang="sl" corresp="#ch07-sub05-en">
               <head xml:id="Legacy-head-142">5. Primer metod: ekspertni sistemi</head>
               <p style="text-align:justify;" xml:id="Legacy-p-472">V tem obdobju smo razvili vrsto
                  postopkov za ustvarjanje in posodabljanje baze podatkov ter za njeno uporabo in
                  analizo:</p>
               <list type="unordered" xml:id="Legacy-list-8">
                  <item>osnovni algoritmi, ki obravnavajo segmentno usmerjene baze podatkov (npr.
                     točka v poligonu, minimalna pot), priprava eksperimentalnega softverskega
                     sistema za upravljanje (posodabljanje, pridobivanje) segmentno usmerjenih baz
                     podatkov,</item>
                  <item>modeli projekcij prebivalstva in simulacij (»metoda preživetja
                     kohorte«),</item>
                  <item>modeli prostorske interakcije (modeli tipa Lowry, ki temeljijo na principu
                     maksimiranja entropije z omejitvami neenakosti),</item>
                  <item>zaposlitveni model za oceno potrebnih delovnih mest na podlagi projekcije
                     prebivalstva,</item>
                  <item>stanovanjski model za oceno potrebnih stanovanj na podlagi rasti
                     prebivalstva in obstoječega stanovanjskega sklada,</item>
                  <item>projekcije prebivalstva in simulacije za več območij (»metoda preživetja
                     kohorte«), prekrivanje zemljevidov, mrežni zemljevidi različnih fizičnih
                     indikatorjev (npr. vrsta tal, relief, raba zemljišč) so prekriti s kombinacijo
                     razmerij »AND« in »OR«,</item>
                  <item>mrežni simulacijski model prispevnega območja za lokacijo lokalnih storitev
                     (npr. osnovna šola, vrtec, zdravstveni dom).</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-473">Že zelo zgodaj smo ugotovili, da
                  je uporaba na pravilih temelječih ekspertnih sistemov ali sistema avtomatskega
                  učenja v urbanističnem in prostorskem načrtovanju zelo obetavna. Zbrali smo nekaj
                  primerov uporabe ekspertnih sistemov na sorodnih področjih, prepoznali potencialne
                  priložnosti v prostorskem načrtovanju in pregledali razpoložljivost obstoječe
                  programske opreme za končne uporabnike. Po ponovnem pregledu zbranega gradiva smo
                  razvili več prototipov ekspertnega sistema, imenovanega UEXPERT (slika 5).</p>
               <figure xml:id="Legacy-figure-33">
                  <graphic url="media/Zakrajsek5.jpg"/>
                  <head>
                     <hi rend="italic">Slika 5: Primer prototipa sistema UEXPERT. Vir:</hi>
                     Zakrajšek, F. <hi rend="italic">Možnosti uporabe ekspertnih sistemov v
                        lokacijskem postopku</hi>. Ljubljana: Urbanistični inštitut SR Slovenije,
                     1985</head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub06" xml:lang="sl" corresp="#ch07-sub06-en">
               <head xml:id="Legacy-head-144">6. Implementacije: občini Celje in Ljubljana</head>
               <p style="text-align:justify;" xml:id="Legacy-p-474">Po mojem mnenju ima sodelovanje
                  pri projektih implementacije dva namena – svetovati in pomagati pri dejanskem
                  razvoju informacijskega sistema za urbanistično in/ali prostorsko načrtovanje na
                  določenem območju ter pridobiti praktične izkušnje za nadaljnje raziskovalno delo
                  in pripravo pravnih aktov na področju prostorskega načrtovanja. V obdobju
                  1970–1985 smo implementirali naslednji strateški načrt informacijskih sistemov
                  (ISSP):</p>
               <list type="unordered" xml:id="Legacy-list-9">
                  <item>Mestna občina Celje (60.000 prebivalcev, 250 km<hi rend="superscript"
                     >2</hi>); vzpostavljeni sta bili dve bazi podatkov. Najprej »osnovna baza
                     podatkov« s hišno številko kot osnovno georeferencirano enoto, s katero so
                     povezani mikropodatki iz več registrov (prebivalstvo, stanovanja, poslovni
                     prostori, vozila). Nato pa še »baza podatkov načrtovanja«, kjer je bila osnovna
                     georeferencirana enota mrežna celica (100 x 100 m) in kjer so podatki zajemali
                     zbirne podatke iz osnovne baze podatkov in neposredno zajete podatke o fizičnih
                     prostorskih značilnostih (nadmorska višina, naklon pobočja, orientacija,
                     stabilnost tal, kmetijska zemljišča, gozdna zemljišča, zavarovana območja
                     itd.). Baza podatkov je bila uporabljena pri pripravi prostorskega načrta
                     Mestne občine Celje.</item>
                  <item>Občina Ljubljana Center (32.000 prebivalcev, 5 km<hi rend="superscript"
                        >2</hi>); pri oblikovanju vsebin ljubljanskega informacijskega sistema smo
                     se držali splošnih načel ISSP, upoštevali pa smo tudi naslednje posebne
                     zahteve: določena območja v občini Ljubljana Center (CBD, območja prenove),
                     poleg urbanističnega načrtovanja smo nudili podporo tudi pri določenih
                     administrativnih postopkih (npr. postopek pridobitve lokacijskega dovoljenja),
                     v največji možni meri smo uporabili obstoječe vire podatkov (npr. podatke iz
                     popisa prebivalstva iz leta 1981, registra poslovnih prostorov, registra
                     teritorialnih enot). To je bil pilotni izvedbeni projekt vzpostavitve registra
                     stavb. Informacijski sistem je vključeval zelo podrobno bazo mikropodatkov o
                     poslovnih prostorih, stavbah, gospodinjstvih in prebivalcih (glejte priloženo
                     shemo).</item>
                  <item>Mestna občina Ljubljana (200.000 prebivalcev, 500 km<hi rend="superscript"
                        >2</hi>); bistveni del implementacije ISSP Ljubljana je bilo spremljanje
                     dejanske rabe zemljišča v primerjavi z načrtovano rabo zemljišča. Namen tega
                     spremljanja je bil pridobiti trajne in sistematične dokaze o vseh spremembah
                     načrtovane rabe zemljišč, enostaven in javno dostopen vpogled v status ureditve
                     načrtovane rabe zemljišč, trajno in analitično primerjavo med dejansko in
                     načrtovano rabo zemljišč ter enostavno in objektivno vrednotenje posledic
                     predlaganih sprememb načrtovane rabe zemljišča. Osrednji del informacijskega
                     sistema je predstavljala baza podatkov, kjer so bili različni podatki
                     razporejeni po območjih načrtovanja. Informacijski sistem je bil uporabljen pri
                     pripravi prostorskih dokumentov, imenovanih Ljubljana 2000.</item>
                  <item>Ljubljanska regija (16 občin, 600.000 prebivalcev, 5000 km<hi
                        rend="superscript">2</hi>); regionalni lokacijski model je bil v ljubljanski
                     regiji implementiran pri pripravi regionalnega razvojnega plana v okviru
                     projekta Ljubljana 2000. Z uporabo regionalnega lokacijskega modela je bilo
                     pripravljenih in preučenih šest različnih alternativ urbanizaciji:
                     koncentracija, dekoncentracija, sever, jug, stanovanjske soseske in
                     uravnoteženi model.</item>
               </list>
               <figure xml:id="Legacy-figure-34">
                  <graphic url="media/Zakrajsek6.jpg"/>
                  <head>
                     <hi rend="italic">Slika 6: Informacijska baza informacijskega sistema za
                        urejanje prostora Mestne občine Ljubljana. Vir: Zakrajšek, F. et al:
                        Informacijska zasnova občine Celje ob pripravi prostorskega plana.
                        Ljubljana: Urbanistični inštitut Republike Slovenije, 1979, Souvan, T.,
                        Zakrajšek, F. et al. ISUP: informacijski sistem za urejanje prostora občine
                        Ljubljana Center. Ljubljana: Urbanistični inštitut SR Slovenije: Zavod za
                        izgradnjo Ljubljane, TOZD Urbanizem-LUZ: Uprava za avtomatsko obdelavo
                        podatkov Skupščine mesta Ljubljane, 1985</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub07" xml:lang="sl" corresp="#ch07-sub07-en">
               <head xml:id="Legacy-head-146">7. Implementacija: Gvajana</head>
               <p style="text-align:justify;" xml:id="Legacy-p-475">V letih 1983–1985 sem imel kot
                  del mednarodne svetovalne ekipe v Gvajani priložnost sodelovati pri projektu
                  »Institucionalna podpora sistemu planiranja in projektov v Gvajani«, ki ga je
                  financirala Medameriška razvojna banka. Sam sem vodil podprojekt »Informacijski
                  sistem za planiranje in projekte«. Zadružna republika Gvajana je bila takrat
                  država v razvoju v Južni Ameriki s približno 800.000 prebivalci. Namen razvoja
                  informacijskega sistema za planiranje in projekte je bil zagotoviti podatkovno
                  podporo za nacionalno ekonomsko in socialno načrtovanje ter centralno koordinacijo
                  sektorskega in regionalnega načrtovanja, spremljanje/planiranje projektov in
                  spremljanje podjetij na državni ravni. Informacijski sistem smo razvijali v dveh
                  fazah:</p>
               <list type="ordered" xml:id="Legacy-list-10">
                  <item>Priporočila – diagnosticiranje, koncept informacijskega sistema,
                     informacijski inženiring za informacijski sistem, priporočila za takojšnje
                     izboljšave.</item>
                  <item>Začetna implementacija – razjasnjen koncept informacijskega sistema, pregled
                     obstoječih podatkov, pregled računalniških virov, začetni podatkovni slovar,
                     eksperimentalna baza podatkov – seznam aktualnih projektov, eksperimentalna
                     baza podatkov – podatki popisa prebivalstva iz 1980.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-476">Takrat smo razvili MDBMS2 (Micro
                  Data Base Management System Version 2 – Sistem za upravljanje baz mikropodatkov,
                  različica 2). Šlo je za preprost sistem za upravljanje baz podatkov, napisan v
                  jeziku BASIC za računalniški sistem ID80 (Iskra Delta-80, prej mikroračunalnik ID
                  Partner). Uporabljen je bil za bazo podatkov urbanističnih dokumentov mesta
                  Ljubljana. V Gvajani prepišemo program v jeziku BASIC za Apple IIe. Program je bil
                  uporabljen za upravljanje baze podatkov za seznam projektov v Gvajani (slika
                  7).</p>
               <figure xml:id="Legacy-figure-35">
                  <graphic url="media/Zakrajsek7.jpg"/>
                  <head>
                     <hi rend="italic">Slika 7: Shema informacijskega sistema za načrtovanje in
                        projekte za Gvajano. Vir: Zakrajšek, F. Priporočila za razvoj
                        informacijskega sistema za načrtovanje v Republiki Gvajana. Georgetown:
                        Urbanistični inštitut Republike Slovenije, Center za načrtovanje razvoja,
                        1983</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub08" xml:lang="sl" corresp="#ch07-sub08-en">
               <head xml:id="Legacy-head-148">8. Primerjave in objave</head>
               <p style="text-align:justify;" xml:id="Legacy-p-477">Pri snovanju inovativnih
                  kompleksnih informacijskih sistemov sta potrebna nenehno preverjanje razvoja in
                  implementacija tujih izkušenj na tem področju. Dandanes je to zaradi interneta in
                  dostopnosti informacij veliko lažje. Takrat se je bilo treba opreti na najnovejše
                  strokovne knjige, znanstvene članke, objave s strokovnih konferenc in neposredne
                  obiske posameznih strokovnih ustanov. Da sem dobil informacije, sem moral leta
                  1983 obiskati nekatere univerze, inštitute in druge evropske ustanove ter narediti
                  oceno. Na koncu tega potovanja sem zapisal nekaj svojih opažanj:</p>
               <list type="unordered" xml:id="Legacy-list-11">
                  <item>Lahko trdimo, da so na področju urbanističnih informacijskih sistemov naše
                     raziskave povsem primerljive s tujimi (te so sicer bolj finančno podprte,
                     predvsem pa imajo na voljo boljšo računalniško opremo), zato računamo na
                     izmenjavo določenih rezultatov raziskav.</item>
                  <item>Tedanji razvoj je šel predvsem v smeri implementacije manj kompleksnih,
                     cenejših informacijskih sistemov, ki zagotavljajo finančne učinke v obliki
                     prihrankov v kratkem času.</item>
                  <item>Glede na stanje informacijskih sistemov, ki dejansko delujejo v praksi na
                     tem področju, so Švedska in nekatera mesta v Veliki Britaniji precej pred nami,
                     medtem ko denimo Škotsko na nekaterih področjih prekašamo z vidika
                     implementacije.</item>
                  <item>V državah, ki sem jih obiskal, so dajali velik poudarek uvajanju
                     mikroračunalnikov in razvoju programske opreme za mikroračunalnike. Kljub temu
                     v času mojega obiska še niso imeli pomembnejših izkušenj na tem
                     področju.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-478">Po drugi strani pa je tudi danes
                  še vedno pomembno, da preverimo rezultate raziskav v strokovnih revijah,
                  publikacijah in na konferencah. V tem obdobju smo skoraj vsako leto objavili
                  rezultate raziskav na vsaj dveh konferencah na območju bivše Jugoslavije, na eni s
                  področja prostorskega načrtovanja in drugi s področja računalništva in
                  informatike. Temeljna oblika širjenja informacij je bila tudi objava naših
                  dosežkov; nekaj naslovnih strani si lahko ogledate na sliki 8.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-479">Publikacije smo natisnili v več
                  sto izvodih in jih »prodali« ustanovam po nekdanji Jugoslaviji. Kljub temu, da so
                  bile publikacije napisane v slovenščini, je strokovna javnost zanje pokazala
                  veliko zanimanja.</p>
               <figure xml:id="Legacy-figure-36">
                  <graphic url="media/Zakrajsek8.jpg"/>
                  <head>
                     <hi rend="italic">Slika 8: Naslovne strani publikacije Informacijski sistem za
                        prostorsko načrtovanje. Letniki: Smernice za razvoj, Koncept sistema,
                        Mikroračunalniška oprema za upravljanje relacijskih podatkovnih baz,
                        Informacijski sistem regionalnih objektov, Možnosti uporabe ekspertnih
                        sistemov v postopku lokacijskega dovoljenja, Metode prostorskega načrtovanja
                        na občinski ravni – projekcije prebivalstva, Možnosti uporabe ekspertnih
                        sistemov pri prostorskem načrtovanju, Izhodišča za izbiro strojne in
                        programske opreme, Sistem kazalnikov načrtovanja za spremljanje rabe
                        zemljišča v Ljubljani, Prenova koncepta informacijskih sistemov.</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub09" xml:lang="sl" corresp="#ch07-sub09-en">
               <head xml:id="Legacy-head-150">9. 50 let pozneje</head>
               <p style="text-align:justify;" xml:id="Legacy-p-480">50 let pozneje smo še vedno zelo
                  prisotni na področju raziskav, razvoja in implementacije računalniške podpore v
                  urbanističnem načrtovanju. Na sliki 9 je na voljo nekaj povezav do našega
                  nedavnega dela.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-481">
                  <hi rend="italic">Slika 9: 50 let pozneje</hi>
               </p>
               <figure xml:id="Legacy-figure-37">
                  <graphic url="media/Zakrajsek9a.jpg"/>
                  <head>
                     <hi rend="italic">Slika 9a: 3D Urbanizem, Ljubljana, od leta 2010 dalje
                        Povezava:</hi>
                     <ref target="https://3durbanizem.ljubljana.si/3DUrbanizem/3DMesto/">
                        <hi rend="italic underline"
                           >https://3durbanizem.ljubljana.si/3DUrbanizem/3DMesto/</hi>
                     </ref>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-38">
                  <graphic url="media/Zakrajsek9b.jpg"/>
                  <head>
                     <hi rend="italic">Slika 9b: Agent-based Geographical Modeling of Public Library
                        Locations, od leta 2010 dalje. Povezava:</hi>
                     <ref
                        target="https://www.sciencedirect.com/science/article/pii/S0740818819302890">
                        <hi rend="italic underline"
                           >https://www.sciencedirect.com/science/article/pii/S0740818819302890</hi>
                     </ref>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-39">
                  <graphic url="media/Zakrajsek9c.jpg"/>
                  <head>
                     <hi rend="italic">Slika 9c: SMUR, Simulacijski model urbanega razvoja, od leta
                        2010 dalje. Zakrajšek, F. et al. Razvoj in implementacija regionalnega
                        simulacijskega modela za ljubljansko urbano regijo: regionalni simulacijski
                        model. Ljubljana: Urbanistični inštitut Republike Slovenije</hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-40">
                  <graphic url="media/Zakrajsek9d.jpg"/>
                  <head>
                     <hi rend="italic">Slika 9d: Simple Cellular Automata Model for Flood Estimation
                        and Determination of Culture Heritage on Risk, 2018–2022, STRENCH:
                        STRENgthening resilience of Cultural Heritage at risk in a changing
                        environment, Central Europe Programme, 2020–2022</hi>
                  </head>
               </figure>
            </div>
         </div>
         <div type="chapter" xml:id="ch07-en" xml:lang="en" corresp="#ch07">
            <head xml:id="Legacy-head-155">7. Pioneering Computer Support in Urban Planning,
               1970–1985</head>
            <docAuthor xml:id="Legacy-docAuthor-14">
               <ref target="#study01.8-en">Franc J. Zakrajšek</ref>
            </docAuthor>
            <div type="subchapter" xml:id="ch07-sub01-en" xml:lang="en" corresp="#ch07-sub01">
               <head xml:id="Legacy-head-156">1. Introduction</head>
               <p style="text-align:justify;" xml:id="Legacy-p-482">At the beginning of the 1980s,
                  the world witnessed the beginning of the intensive introduction of computer
                  technology into various professional fields and disciplines, causing a radical
                  transformation in many areas, including in terms of content, work processes, and
                  use.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-483">In the article, I share my
                  contribution to the research, development, and implementation of computer support
                  in urban planning in this period. My pioneering work in this field could only be
                  done with the cooperation of the innovative and efficient interdisciplinary team
                  of other mathematicians, computer scientists, architects, geographers, economists,
                  sociologists, and other experts. I am a researcher, developer, and consultant
                  employed at the Urban Planning Institute of the Republic of Slovenia.<note
                     place="foot" xml:id="ftn36-en" n="36">The Urban Planning Institute of the
                     Republic of Slovenia is one of the leading institutions in Slovenia and
                     ex-Yugoslavia regarding research, implementation, and consulting within urban
                     and regional planning. It was established in 1955, and is highly connected with
                     similar institutions in Europe and the USA. </note> The framework of this
                  article allows only a modest presentation of selected fragments of that period to
                  give the reader some impressions of that time and our role and contribution to
                  it.</p>
            </div>
            <div type="subchapter" xml:id="ch07-sub02-en" xml:lang="en" corresp="#ch07-sub02">
               <head xml:id="Legacy-head-157">2. Information system for spatial planning</head>
               <p style="text-align:justify;" xml:id="Legacy-p-485">We developed an information
                  system for spatial planning (urban/regional) (ISSP) with two components: a
                  database and a set of procedures. The database consists of data about past and
                  present states and data about planning decisions in the form suitable for use
                  within the planning processes. The essential part of the database is geocoded
                  (geographical reference) data. The set of procedures consists of procedures for
                  database creation and updating, as well as for database use and analysis. The
                  essential part is data use procedures such as data retrieval, methods of
                  statistical analysis, and urban and regional models.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-486">ISSP is a decision-support
                  system designed to satisfy data needs within various planning and monitoring
                  processes on communal, municipal and/or regional levels. It is a user-oriented
                  information system. The system’s main function is not data collection but data
                  processing for end-use. ISSP is not a stand-alone information system, it is highly
                  connected with the other information systems in the country. It thus uses data
                  originating in various information systems (e.g., administrative data, statistical
                  data), and produces data that could be used outside the planning area (e.g. data
                  for local administration).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-487">The primary development in this
                  system’s approach (in the sense of innovation and challenge) was integrating the
                  latest knowledge from the theory of information systems, especially that promoted
                  by the field guru at the time, James Martin. I am thinking here of his manifesto
                  of information systems, and the idea that data entities and thus data are more
                  stable than the procedures we want to automate, or that relational databases are
                  in the third normal form, along with work on information technology engineering,
                  computer-aided software engineering, fourth-generation programming languages, RAD
                  (Rapid Application Development), and more. I successfully integrated all this with
                  my mathematical knowledge of topological structures (point, line, polygon ...) and
                  their mutual relationships, which we now know as the basis of geographical
                  information systems.</p>
               <figure xml:id="Legacy-figure-41">
                  <graphic url="media/Zakrajsek1.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 1: Representation in physical space, mathematics of
                        geo-topological kernel, and third normal form. Source: Zakrajšek, F.:
                        Designing an information system at the level of the city of Ljubljana.
                        Ljubljana: Urban Planning Institute of the Republic of Slovenia, 1981</hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-42">
                  <graphic url="media/Zakrajsek2.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 2: Standard database of the information system for spatial
                        planning. Source:</hi> Zakrajšek, F. Information systems for urban and
                     regional planning. In: Gerckens, L.C. (ed.), et al. <hi rend="italic">Planning
                        in transition: regional development, urban form, information system:
                        symposium 1985, Columbus, 21–22 May 1985</hi>. Columbus: The Urban Institute
                     of Slovenia: The Ohio State University, The City and Regional Planning
                     Department, 1985.</head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub03-en" xml:lang="en" corresp="#ch07-sub03">
               <head xml:id="Legacy-head-160">3. Data capture example: centroids of house
                  numbers</head>
               <p style="text-align:justify;" xml:id="Legacy-p-488">In the 1980s, capturing graphic
                  data was a special challenge. Scanners of larger dimensions did not exist, and
                  those smaller than A4 were difficult to access. Therefore, we had to develop
                  semi-automatic, partly manual procedures for digitization as well as a whole
                  series of software interfaces for transferring data to/from punched paper tape.
                  Let me mention our special innovative approach for digitizing house numbers. The
                  coordinates of house numbers are essential in urban systems because, in this way,
                  we can monitor the state of “living” activity (residents and apartments) and the
                  activity of “work” in the space. We first successfully digitized the house numbers
                  of Celje (approx. 20,000 units) and, a little later, the house numbers of
                  Ljubljana. Their positional accuracy was 5 m. The Surveying and Mapping Authority
                  of the Republic of Slovenia then adopted our method for digitizing all house
                  numbers for the Republic of Slovenia. It transferred the data of the digitized
                  house numbers of Celje and Ljubljana to its EHIS database, which is still
                  regularly maintained. It is worth emphasizing that Slovenia was among the first
                  countries in the world to digitize all house numbers on its territory.</p>
               <figure xml:id="Legacy-figure-43">
                  <graphic url="media/Zakrajsek3.jpg"/>
                  <head>
                     <hi rend="italic">Figure 3: Data Capture, Centroids of House Numbers. Source:
                        Zakrajšek, F. et al.: Information design of the Municipality of Celje during
                        the preparation of the spatial plan. Ljubljana: Urban Planning Institute of
                        the Republic of Slovenia, 1979</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub04-en" xml:lang="en" corresp="#ch07-sub04">
               <head xml:id="Legacy-head-162">4. Data output example: first digital maps</head>
               <p style="text-align:justify;" xml:id="Legacy-p-489">Similar to large-format
                  scanners, there was also a problem with large-format plotters and printers at the
                  beginning of the 1980s. To make the first digital maps available to the greatest
                  extent possible, we initially used ordinary line character printers and created
                  fewer and darker areas of the map by overprinting. The problem of character size
                  (rectangle and not square) was solved by mathematical 2-dimensional
                  interpolation.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-490">We prepared a library of
                  computer programs for handling (processing and storage) the cellular organization
                  of the spatial database. The cellular organization of a spatial database is called
                  an organization, where the basic spatial unit is a grid cell (square) for which we
                  have a specified vector of data. The purpose of the program library is to simplify
                  the programming of applications for entering data, analysis (statistical,
                  spatial ...), models (projections, simulations ...), and for outputting results
                  (graphic displays, tables, diagrams ...). The library contains programs for:</p>
               <list type="unordered" xml:id="Legacy-list-12">
                  <item>creating, opening, closing, importing, and exporting data from the database
                     (C-files, CF-files),</item>
                  <item>print data to a line printer (GRAFC7, GRAFC8),</item>
                  <item>data plotting on a Versatec plotter (GRAFCP).</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-491">We wrote most of the programs in
                  the programming language FORTRAN (FTN), but some of them in COMPASS and PASCAL
                  6000. Cyber record manager-basic access methods (word addressable) are used to
                  manage the databases with the support of the NOS operating system, /BE 1.3 on a
                  CYBER 72 computer.</p>
               <figure xml:id="Legacy-figure-44">
                  <graphic url="media/Zakrajsek4.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 4: Printouts of maps for the Celje municipality. Source:
                        Zakrajšek, F. et al.: Information design of the Municipality of Celje during
                        the preparation of the spatial plan. Ljubljana: Urban Planning Institute of
                        the Republic of Slovenia, 1979</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub05-en" xml:lang="en" corresp="#ch07-sub05">
               <head xml:id="Legacy-head-164">5. Methods example: expert systems</head>
               <p style="text-align:justify;" xml:id="Legacy-p-492">In this period, we developed
                  several procedures for database creation and updating as well as for database use
                  and analysis:</p>
               <list type="unordered" xml:id="Legacy-list-13">
                  <item>elementary algorithms dealing with segment-oriented database (e.g.
                     point-in-polygon, minimal path), preparation of experimental software system
                     for management (update, retrieval) of the segment-oriented databases;</item>
                  <item>models of population projections and simulations (“cohort survival
                     method”);</item>
                  <item>spatial interaction models (Lowry-like models based on the principle of
                     entropy maximizing with inequality constraints);</item>
                  <item>employment model for estimation of the jobs needed, based on population
                     projection;</item>
                  <item>housing model for estimation of the apartments needed, based on population
                     growth and the existing housing fund;</item>
                  <item>multi-zoning population projections and simulations (“cohort survival
                     method”), maps overlapping, grid-based maps of different physical indicators
                     (e.g., type of soil, relief, land use) are overlaid with a combination of “and”
                     and “or” relations;</item>
                  <item>grid-based catchment area simulation model for the location of local
                     services (e.g. primary school, nursery school, health station).</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-493">We realized very early that
                  using rule-based expert systems or an automatic learning system is very promising
                  for use in urban and spatial planning. We collected some examples of the use of
                  expert systems in related fields, identified potential opportunities in spatial
                  planning, and reviewed the availability of existing end-user software. After
                  rethinking the gathered material we developed several expert system prototypes,
                  named UEXPERT (<hi rend="italic">Figure </hi>
                  <hi rend="italic">5</hi>).</p>
               <figure xml:id="Legacy-figure-45">
                  <graphic url="media/Zakrajsek5.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 5: UEXPERT prototype case. Source:</hi> Zakrajšek, F. <hi
                        rend="italic">Možnosti uporabe ekspertnih sistemov v lokacijskem
                        postopku</hi>. Ljubljana: Urbanistični inštitut SR Slovenije, 1985</head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub06-en" xml:lang="en" corresp="#ch07-sub06">
               <head xml:id="Legacy-head-166">6. Implementations: Celje and Ljubljana
                  municipalities</head>
               <p style="text-align:justify;" xml:id="Legacy-p-494">For me, the reason for getting
                  involved in implementation projects is twofold: to advise and assist in the actual
                  development of an information system for urban and/or regional planning in a
                  specific area, and get practical experience for further research work and
                  preparation of legal acts in the spatial planning field. In the period 1970–1985,
                  we implemented the following ISSP:</p>
               <list type="unordered" xml:id="Legacy-list-14">
                  <item>Municipality of Celje (60,000 inhabitants, 250 km<hi rend="superscript"
                        >2</hi>); Two databases were established. First, the “basic database” with a
                     house number as the basic georeferenced unit to which microdata from several
                     registers are linked (population, housing, business premises, vehicles).
                     Second, the “planning database”, where the base georeferenced unit was a grid
                     cell (100x100 m), data consisted of aggregated data from a basic database and
                     directly captured data on physical spatial characteristics (altitude, terrain
                     slope, orientation, soil stability, agricultural land, forest land, protected
                     areas, etc.). The database was used in the preparation of the Celje
                     municipality spatial plan.</item>
                  <item>Municipality Ljubljana–Center (32,000 inhabitants, 5 km<hi
                        rend="superscript">2</hi>); In designing the contents of Ljubljana
                     information system we used the general principles of ISSP, and also the
                     following specific demands have been considered: specific areas in the
                     Ljubljana–Center commune (CBD, renovation areas), besides urban planning it
                     also supported specific administrative procedures (e.g., a process for location
                     permission), existing data sources were used as much as possible (e.g., 1981
                     census data, register of business premises, register of territorial units),
                     this was the pilot implementation project for the establishment of the register
                     of buildings. The information system included a very detailed database with
                     micro data on business premises, buildings, households, and inhabitants (see
                     the scheme enclosed).</item>
                  <item>Municipality of Ljubljana (200,000 inhabitants, 500 km<hi rend="superscript"
                        >2</hi>); The essential part of the implementation of ISSP Ljubljana was
                     monitoring the actual land use compared to planned land use. The purpose of
                     this monitoring was to get permanent and systematic evidence of all changes in
                     planned land use, simple and publicly accessible insights into the regulation
                     status of planned land use, permanent and analytical comparisons between actual
                     and planned land use, and simple and objective evaluations of the consequences
                     of suggested changes in planned land use. The central part of the information
                     system was a database where various types of data were located in planning
                     zones. The information system was used in the preparation of spatial planning
                     acts, part of a project called Ljubljana 2000.</item>
                  <item>The Ljubljana region (16 communities, 600,000 inhabitants, 5,000 km<hi
                        rend="superscript">2</hi>); The regional locational model has been
                     implemented in the Ljubljana region within the preparation of the regional
                     development plan as part of the Ljubljana 2000 project. Six different
                     alternatives to urbanization have been prepared and examined with the support
                     of the regional locational model: concentration, deconcentration, north, south,
                     residential neighborhoods, and balanced.</item>
               </list>
               <figure xml:id="Legacy-figure-46">
                  <graphic url="media/Zakrajsek6.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 6: Information base of the information system for planning
                        the space of the municipality of Ljubljana. Sources: Zakrajšek, F. et al.:
                        Information design of the Municipality of Celje during the preparation of
                        the spatial plan. Ljubljana: Urban Planning Institute of the Republic of
                        Slovenia, 1979, Souvan, T., Zakrajšek, F. et al. ISUP: informacijski sistem
                        za urejanje prostora občine Ljubljana Center. Ljubljana: Urbanistični
                        inštitut SR Slovenije: Zavod za izgradnjo Ljubljane, TOZD Urbanizem-LUZ:
                        Uprava za avtomatsko obdelavo podatkov Skupščine mesta Ljubljane, 1985</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub07-en" xml:lang="en" corresp="#ch07-sub07">
               <head xml:id="Legacy-head-168">7. Implementation: Guyana</head>
               <p style="text-align:justify;" xml:id="Legacy-p-495">From 1983–1985, I had the
                  opportunity to participate as part of an international consulting team in Guyana
                  in the project “Institutional Support for National Systems of Planning and
                  Projects in Guyana”. The project was financed by the InterAmerican Development
                  Bank. I managed the sub-project “Information System for Planning and Projects”.
                  The Cooperative Republic of Guyana was a then developing country in South America
                  with about 800,000 inhabitants. The purpose of developing the information system
                  for planning and projects was to provide data support for national economic and
                  social planning and central coordination of sectoral and regional planning,
                  monitoring/planning projects, and corporation monitoring at the national level. We
                  developed the information system in two phases:</p>
               <list type="ordered" xml:id="Legacy-list-15">
                  <item>Recommendations: diagnosis, the concept of the information system,
                     information engineering for the information system, recommendations for
                     immediate improvement.</item>
                  <item>Initial implementation: the clarified concept of the information system, the
                     survey of existing data, the survey of computer resources, initial data
                     dictionary, experimental database – list of current projects, experimental data
                     base – 1980 census data.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-496">At that time we developed MDBMS2
                  (Micro Data Base Management System Version 2). It was a simple database management
                  system written in BASIC for ID-80 (Iskra Delta-80, the microcomputer that came
                  before the ID Partner). It was used for a database of urban planning documents
                  held by the City of Ljubljana. In Guyana we rewrote the program in BASIC for an
                  Apple IIe. The program was used for database management for a list of projects in
                  Guyana (<hi rend="italic">Figure</hi>
                  <hi rend="italic"> 7</hi>).</p>
               <figure xml:id="Legacy-figure-47">
                  <graphic url="media/Zakrajsek7.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 7: Scheme of information system for planning and projects
                        for Guyana. Source: Zakrajšek, F. Recommendations on development of an
                        information system for planning in Guyana. Georgetown: Urban Planning
                        Institute of Slovenia, Development Planning </hi>
                     <hi rend="italic">Center</hi>
                     <hi rend="italic">, 1983</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub08-en" xml:lang="en" corresp="#ch07-sub08">
               <head xml:id="Legacy-head-170">8. Comparisons and disseminations</head>
               <p style="text-align:justify;" xml:id="Legacy-p-497">When innovating complex
                  information systems, it is necessary to constantly check the development and
                  implementation of foreign efforts in this field. Nowadays, this is much easier due
                  to the Internet and the wider availability of information. At that time, it was
                  necessary to rely on the latest professional books, scientific articles,
                  publications from professional conferences, and direct visits to individual
                  professional institutions. Hence, to get information in 1983 I had to visit some
                  universities, institutes, and other European institutions and make an evaluation.
                  At the end of this trip, I wrote some observations:</p>
               <list type="unordered" xml:id="Legacy-list-16">
                  <item>In the field of urban planning information systems, we can claim that our
                     research is entirely comparable to that in foreign countries (although they are
                     otherwise more financially supported and, above all, have better computer
                     equipment at their disposal), so we count on the exchange of specific research
                     results.</item>
                  <item>The development is towards the implementation of less complex, cheaper
                     information systems, which provide financial effects in the form of savings in
                     a short period.</item>
                  <item>According to the state of information systems that actually work in practice
                     in this area, Sweden and some cities in Great Britain are well ahead of us,
                     while we can note that we surpass Scotland in some areas in terms of
                     implementation.</item>
                  <item>In the countries visited, they placed a great deal of emphasis on
                     introducing microcomputers and developing software for microcomputers. Still,
                     during the visit they did not yet have any significant experience in this
                     field.</item>
               </list>
               <p style="text-align:justify;" xml:id="Legacy-p-498">On the other hand, and despite
                  the easier access to information, it is still vital today to verify research
                  results in professional journals, publications, and conferences. During this
                  period, we published research results almost every year at least at two
                  conferences within the former Yugoslavia, one in the field of spatial planning and
                  the other in the field of computing and informatics. A fundamental form of
                  dissemination was also the publication of our achievements, and some title pages
                  are presented in <hi rend="italic">Figure</hi> 8.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-499">We printed several hundred
                  copies of the publications and “sold” them to institutions throughout the former
                  Yugoslavia. Despite the publications being in Slovenian, there was great interest
                  in them.</p>
               <figure xml:id="Legacy-figure-48">
                  <graphic url="media/Zakrajsek8.jpg"/>
                  <head>
                     <hi rend="italic">Figure</hi>
                     <hi rend="italic"> 8: Cover pages of the publication </hi>Information systems
                     for spatial planning<hi rend="italic">. Volumes: Guidelines for development,
                        The concept of the system, Microcomputer equipment for managing relational
                        databases, Information system of regional facilities, The possibilities of
                        using expert systems in the process of location permit, Spatial planning
                        methods at the municipal level – population projections, The possibilities
                        of using expert systems in spatial planning, Starting points for the
                        selection of hardware and software, System of planning indicators for
                        monitoring the land use in Ljubljana, Renewal of the concept of information
                        systems</hi>
                  </head>
               </figure>
            </div>
            <div type="subchapter" xml:id="ch07-sub09-en" xml:lang="en" corresp="#ch07-sub09">
               <head xml:id="Legacy-head-172">9. After 50 years</head>
               <p style="text-align:justify;" xml:id="Legacy-p-500">After 50 years, we are still
                  very present in the research, development, and implementation of computer support
                  in urban planning. Some links for our recent work are provided in <hi
                     rend="italic">Figure</hi> 9.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-501">
                  <hi rend="italic">Figure 9: After 50 years</hi>
               </p>
               <figure xml:id="Legacy-figure-49">
                  <graphic url="media/Zakrajsek9a.jpg"/>
                  <head>
                     <hi rend="italic">Figure 9a: 3D Urbanism, Ljubljana, 2010 onwards. Link:</hi>
                     <ref target="https://3durbanizem.ljubljana.si/3DUrbanizem/3DMesto/">
                        <hi rend="italic">https://3durbanizem.ljubljana.si/3DUrbanizem/3DMesto/</hi>
                     </ref>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-50">
                  <graphic url="media/Zakrajsek9b.jpg"/>
                  <head>
                     <hi rend="italic">Figure 9b: Agent-based Geographical Modeling of Public
                        Library Locations, 2010 onwards. Link:</hi>
                     <ref
                        target="https://www.sciencedirect.com/science/article/pii/S0740818819302890">
                        <hi rend="italic baseline underline"
                           >https://www.sciencedirect.com/science/article/pii/S0740818819302890</hi>
                     </ref>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-51">
                  <graphic url="media/Zakrajsek9c.jpg"/>
                  <head>
                     <hi rend="italic">Figure 9c: SMUR, Simulation Model of Urban Development, 2010
                        onwards. Zakrajšek, F. et al. Development and implementation of a regional
                        simulation model for the Ljubljana urban region: a regional simulation
                        model. Ljubljana: Urban Institute of the Republic of Slovenia</hi>
                  </head>
               </figure>
               <figure xml:id="Legacy-figure-52">
                  <graphic url="media/Zakrajsek9d.jpg"/>
                  <head>
                     <hi rend="italic">Figure 9d: Simple Cellular Automata Model for Flood
                        Estimation and Determination of Culture Heritage on Risk, 2018 –2022,
                        STRENCH: STRENgthening resilience of Cultural Heritage at risk in a changing
                        environment, Central Europe Programme, 2020–2022</hi>
                  </head>
               </figure>
            </div>
         </div>
         <div type="chapter" xml:id="ch08" xml:lang="sl" corresp="#ch08-en">
            <head xml:id="Legacy-head-177">8. So vrednote v razvoju programja časovno občutljive ali
               jih lahko shranimo?</head>
            <docAuthor xml:id="Legacy-docAuthor-15">
               <ref target="#study01.6">mag. Silvana Žorž (digitalna humanistka)</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-502">Namen tega prispevka je raziskati,
               ali je programje mogoče retrospektivno analizirati z vidika vrednot z uporabo
               metodologije vrednotno občutljivega oblikovanja (angl. <hi rend="italic">values
                  sensitive design</hi>, VSD), ki v trenutnem etičnem diskurzu na področju
               računalništva omogoča upoštevanje človeških vrednot pri načrtovanju programja.
               Prispevek je sestavljen iz tridelnega raziskovalnega procesa, tj. konceptualnega,
               empiričnega in tehničnega, pri čemer se empirični proces<note place="foot"
                  xml:id="ftn36" n="36">Metodologija VSD v tem delu je sestavljena iz intervjujev z
                  učinkom snežene kepe. Prvi intervju je opravljen z Rudijem Bricem, ustanoviteljem
                  družbe HERMES SoftLab (HSL), ki nam pomaga pri retroaktivni analizi morebitnega
                  obstoja in uporabe vrednot v procesu razvoja programja HSL. </note> osredotoča na
               proučevanje človeškega konteksta, v katerem se tehnologija nahaja oziroma se je
               nahajala, kot je to v našem primeru (Žorž 2017).</p>
            <div type="subchapter" xml:id="ch08-sub01" xml:lang="sl" corresp="#ch08-sub01-en">
               <head xml:id="Legacy-head-178">Empirična raziskava VSD – HERMES SoftLab,
                  Slovenija</head>
               <p style="text-align:justify;" xml:id="Legacy-p-504">Družba HERMES SoftLab (HSL) je
                  bila ustanovljena v prvem valu zagonskih podjetij po spremembi takratne družbene
                  ureditve. Oktobra leta 1990 so Rudi Bric, Tomaž Schara, Andrej Kuščer in Zoran
                  Zagorc ustanovili družbo za razvoj programske opreme na podlagi svojih izkušenj,
                  ki so jih med letoma 1984 in 1990 (v obdobju samoupravnega socializma) pridobili
                  pri delu za družbo Hewlett Packard (HP). Glavna dejavnost pa je bila razvoj
                  programja za druge uporabnike. Na vrhuncu leta 2002 je družba štela 700
                  zaposlenih, med drugim je zaposlovala pomemben odstotek razpoložljivih razvijalcev
                  programske opreme v Sloveniji, poleg tega pa je imela podružnice odprte doma in v
                  tujini.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-505"> Rudi Bric je prav zaradi
                  iskrenosti pri razvoju programske opreme sledil določenim vrednotam, ki jih je
                  prenesel tudi v družbo HSL. Ta pošten pristop je temeljil na njegovi izkušnji, ko
                  je med zaposlitvijo v podjetju ISKRA Računalniki leta 1980 (torej precej pred
                  ustanovitvijo družbe HSL) opazoval, kako je tuja družba odpravljala napako v
                  programski opremi.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-506"> Zaradi te napake je bila
                  ameriška družba Control Data Corporation (CDC), ki je izdelovala miniračunalnike
                  CYBER-18 in aplikacije programske opreme, položaju moči napram kupcu njihove
                  programske opreme, mehiški družbi DICONSA. Družba DICONSA je morala večkrat
                  plačati za »odpravo napake«, da je lahko še naprej uporabljala aplikacijo. Družba
                  CDC pa napake sploh ni odpravila, in Mehičane raje obtoževala, da so neuki
                  uporabniki, ki napako povzročajo znova in znova. Bric je točno vedel, kje tiči
                  problem in kako ga rešiti. Nazadnje so težavo razrešili inženirji v podjetju
                  ISKRA, vendar je Bric zaradi te izkušnje izgubil zaupanje v odnos nekaterih
                  velikih družb do svojih kupcev. Poleg tega pa se je začel zavedati, da je treba v
                  celoti razumeti vse posledice uporabe razvitega programja, da se ga lahko ustrezno
                  nadzoruje razvojni postopek in zagotovi kakovosten razvoj. Bric je po vseh teh
                  letih ravno zaradi te izkušnje v kulturo družbe HERMES SoftLab vpeljal močno
                  vrednoto odgovornosti pri razvoju, kar je dopolnil z rekom: »Dobro delo ustvarja
                  novo delo.«</p>
               <p style="text-align:justify;" xml:id="Legacy-p-507"> Prva največja stranka družbe
                  HSL je bila družba Hewlett Packard (HP), ki je bila v 90. letih sinonim za
                  standarde najvišje kakovosti na področju razvoja programske opreme. Pri HSL so
                  svoj razvojni proces oblikovali na podlagi procesov v družbi HP. Bric je želel
                  ugotoviti, ali so kot podjetje dovolj sposobni, organizirani in strokovno
                  podkovani, da se lahko pri razvoju programja kosajo s komer koli na svetu. Kot je
                  pojasnil Krajnik, je družba HP s inženirskega vidika veljala za zlati standard. Že
                  na samem začetku HSL so bile v proces vključene določene osebe, ki so bile
                  zadolžene za razmišljanje o procesu inženiringa programja in vseh povezanih
                  vidikih, ki bi vodili do razvoja programske opreme, s katero bi lahko samozavestno
                  nastopili na svetovnih trgih. Velik del znanja o podobnih procesih so prenesli iz
                  odnosa med HP in HSL, kar je Bric opisal kot srečno naključje sodelovanja med
                  ustanovitelji družbe HSL, prej zaposlenimi pri družbi HERMES (distributer za HP že
                  v času Jugoslavije), ter višjima raziskovalcema, zaposlenimapri HP-ju prof.
                  Zvonkom Fazarincem in dr. Francem Rodetom (oba sta bila tudi osebna prijatelja
                  ustanoviteljev Billa Hewletta in Davida Packarda). Leta 2000 je HP kupil
                  5-odstotni delež podjetja. Zaradi poglobljenega odnosa in vizije dobrega dela so
                  se HP-jeve dobre delovne prakse prenesle tudi v delovanje družbe HSL.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-508"> Kot je pojasnil Miro Germ,
                  direktor kakovosti v družbi HSL, ki je prišel iz podjetja HERMES Plus, so se
                     prakse<note place="foot" xml:id="ftn37" n="37">Te prakse so bile v HSL del
                     petkovih jutranjih sestankov, na katerih so zaposlenim predajali informacije o
                     trenutnem delovanju podjetja, predstavljanju dobrih in tudi negativnih praks,
                     pa tudi prihodnjih korakov. Uvedli so tudi politiko odprtih vrat, ki je vsem
                     omogočila zastavljanje vprašanj. </note> družbe HP iz njenega predstavništva v
                  Jugoslaviji prenesle v miselnost ustanoviteljev HSL. HP-jeva priporočila so
                  uporabili pri razvoju poslovne strategije in postopkov nadzora kakovosti prek
                  orodja Total Quality Management (TQM) in knjige Total Quality Essentials avtorja
                  Sarva Singha Soina, ki je bil tudi direktor celostnega zagotavljanja kakovosti pri
                  HP Pacific.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-510"> Pristop družbe HP »The HP Way«,
                  ki je zajemal poslovne cilje družbe HP in »kako to tukaj počnemo« (Lacy in
                  Mullins, 2002), je bil prav tako v celoti prenesen, saj je vodstvo delalo za HP
                  Yugoslavia na Dunaju. V tem pristopu je jasno navedeno, da morajo tako družba kot
                  zaposleni naslednjo trditev brezkompromisno upoštevati:</p>
               <p style="text-align:justify;" xml:id="Legacy-p-511">»<hi rend="italic">Zaposleni na
                     vseh ravneh morajo spoštovati najvišje standarde poslovne etike in razumeti, da
                     je vse drugo nesprejemljivo.</hi>« (HP Alumni, 2022)</p>
               <p style="text-align:justify;" xml:id="Legacy-p-512"> To bi lahko razumeli kot
                  razlago sedmega korporativnega cilja, tj. državljanstva, pri katerem je navedeno
                  naslednje:</p>
               <p style="text-align:justify;" xml:id="Legacy-p-513">»<hi rend="italic">Zaradi
                     zavezanosti k dobremu državljanstvu izpolnjujemo svoje obveznosti s
                     prispevanjem skupnosti in institucijam v naši družbi, ki sestavljajo okolje
                     našega delovanja</hi>.« (HP Alumni, 2022)</p>
               <p style="text-align:justify;" xml:id="Legacy-p-514"> Germ se je predstavil tudi
                  Evropski organizaciji za kakovost (EOQ) in s tem pokazal, da je družba HSL v
                  tistem času sodelovala v dialogu o kakovosti, pozneje pa je deloval tudi kot
                  ocenjevalec kakovosti pri različnih združenjih za zagotavljanje kakovosti. Primož
                  Krajnik, direktor podjetja Zaslon (slovenskega proizvajalca bančne programske
                  opreme, ki ga je družba HSL kupila leta 2000), je v tistem času spadal med
                  najmlajše ocenjevalce poslovne kakovosti za Evropski sklad za upravljanje
                  kakovosti. Pri HSL je bil proces zagotavljanja kakovosti zelo podrobno definiran
                  in šele po zaključku tega procesa so lahko začeli s programiranjem. V določenem
                  obdobju je za vsak projekt obstajala projektna nadzorna plošča, kjer so vodje
                  kakovosti spremljali, ali projekt poteka skladno s pravili, določenimi pred
                  njegovim začetkom. Tudi ta proces je izhajal iz družbe HP.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-515"> Bric je poudaril tudi dejstvo,
                  da se niso posvečali samo temu, kako vzpostaviti proces, temveč tudi temu, kako
                  zaposlenim približati pravilno upravljanje procesa razvoja programja in jih pri
                  tem tudi voditi. Vse to je prispevalo k oblikovanju inženirske kulture, v kateri
                  so se ekipe zaradi nenehnega učenja, razvoja, izmenjave najboljših praks,
                  popravljanja napak in osredotočanja na izjemno kakovost oblikovale v enakopravne
                  skupine, ki si prizadevajo doseči standardiziran cilj. Hkrati pa so bile ekipe
                  izjemno raznolike, saj so jih znotraj družbe sestavljali člani 14 različnih
                  narodnosti (Tagesspiegel, 1998).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-516"> Leta 1998 je družba HSL prejela
                  priznanje Republike Slovenije za poslovno odličnost (PRSPO) in tako postala prva
                  dobitnica takšne nagrade v Sloveniji (Rozoničnik in Valenci, 2017), pa tudi prvo
                  podjetje, ki sledi modelu odličnosti EFQM.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-517"> Poleg priznanja s strani
                  industrije in različnih združenj za zagotavljanje kakovosti je bil namen HSL
                  zagotavljati storitve, ki so v najboljšem interesu kupcev – ne v smislu
                  ustvarjanja čim večjega dobička, temveč resnično reševati težave kupcev s
                  programskimi rešitvami in jim zagotavljati neodvisnost, je še dodal Krajnik, ki je
                  bil zadolžen za prenos HSL-jevega načina dela v podjetje Zaslon. Dobiček je bil
                  posledica osredotočenosti na visoke standarde kakovosti na področju razvoja
                     programja.<note place="foot" xml:id="ftn38" n="38">Kot je poudaril Bric, je
                     bila vloga dobička v Packardovem načinu dela pri HP izražena tako, da je
                     dobiček najboljše posamezno merilo HP-jevega prispevka k družbi. Ta vir moči
                     podjetja HP dandanes v ameriškem sistemu vrednot zveni zelo »socialistično«,
                     takrat pa je bil zelo podoben HSL-jevemu pogledu na svet. </note>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-519"> Kot je pojasnil Zoran Zagorc,
                  eden od ustanoviteljev podjetja HSL, je ta praksa visokih standardov na področju
                  vodenja projektov rezultat znanja, ki so ga razvili ustanovitelji, in praks
                  vodenja nadzora kakovosti, ki jih je vpeljal Germ. To je bila glavna razlika med
                  HSL in drugimi podjetji, kar je pomagalo doseči njihov cilj, tj. zagotavljati
                  visokokakovostno programje mednarodnim strankam, kar je bila tudi začetna vizija
                  ustanoviteljev. S svojo prvo strategijo »dobro delo ustvarja novo delo« so se
                  osredotočili na dokončevanje projektov še pred njihovim rokom in preseganje
                  obljubljenega nivoja kakovosti, kar se je potem odražalo v znanju projektnega
                  vodenja, razvoja in nadzora kakovosti. Družba HSL je imela popoln nadzor nad
                  programjem v smislu razvoja in prednosti pri znanju o razvoju, zato bi lahko
                  programje upravljali, kot bi želeli, to pa bi lahko vodilo do moralno spornih
                  situacij. Miselnost podjetja pa ni bila usmerjena v nasprotovanje strankinim
                  interesom. Kot navaja Zagorc, so bili vsi zaposleni posamezniki pri HSL in
                  ustanovitelji zelo etični, ker je imela takratna družba zelo drugačno etično
                  naravnanost. Omenil pa je tudi trenutke, ko je bila etika zelo pomembna, npr. ko
                  so pri HSL razvijali programje za privatizacijo javnega sektorja. V tem primeru je
                  bila etika v središču razvojnega procesa pri HSL, kar je vodilo do razvoja
                  programja, ki je varovalo vlogo uporabnika in ne lastnika programja. Zagorc se je
                  zavedal, da bi mu lahko tak vpogled pomagal pridobiti nepošteno prednost, kar je
                  zaradi svojega etičnega značaja in poštenosti v celoti potisnil ob stran. To je še
                  eden od znakov moralnih vrednot v podjetju, ki so ga tudi druga podjetja ocenila
                  kot moralnega.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-520"> Pomembna je tudi ugotovitev
                  Luke Renka, tehnološkega vodje pri HSL, da je HSL pri razvoju izdelkov večji pomen
                  pripisoval potrebam končnega uporabnika in ne podjetja, ki je programje kupilo.
                  Poudarek je bil na zagotavljanju največje možne vrednosti za uporabnika, zato so
                  se lahko stališča družbe HSL in stranke razlikovala. Družba HSL se je tako prej
                  kot stranka proaktivno prilagodila potrebam trga<note place="foot" xml:id="ftn39"
                     n="39">V tistem času je bil poudarek na dodani vrednosti izdelka na trgu
                     (izdelek, ki rešuje težavo), ne pa na dodani vrednosti izdelka za uporabnika.
                  </note> in uporabnikov, zato je imela s svojimi strankami dolga leta odlične
                  poslovne odnose. Zaradi želje po neodvisnosti strank so bile hibridne ekipe in
                  intelektualna lastnina programja v rokah strank in ne družbe HSL, družba HSL pa je
                  zaradi svojih vrednot in standardov kakovosti lahko razvijala programsko opremo za
                  konkurenčne stranke tako, da so bile ekipe med seboj ločene in niso vedele, na
                  katerih projektih delajo drugi. Med strankami pa niso imeli nobene druge
                  neposredne konkurence HP-ju, za katerega je HSL razvijal programje. Treba je
                  poudariti, da je znotraj podjetja prišlo do trenj med kulturami dela za mednarodne
                  ali lokalne stranke, saj je obstajala razlika med razvojem izdelkov za mednarodne
                  stranke in ponujanjem storitev lokalnim strankam. Pri pojmu odgovorne programske
                  opreme pravzaprav ni šlo za vprašanje ali koncept, saj potrošniška programska
                  oprema takrat še ni bila standard uporabe programske opreme.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-522"> Družba HSL je v osnovi pri
                  razvoju poskušala uresničiti vrednote dobrega dela in neodvisnosti, ki bi jih
                  lahko retroaktivno prevedli v vrednote VSD lastništva, univerzalne uporabnosti in
                  avtonomije, kar nam omogoča začetek konceptualne raziskave VSD (Žorž, 2017).</p>
            </div>
            <div type="subchapter" xml:id="ch08-sub02" xml:lang="sl" corresp="#ch08-sub02-en">
               <head xml:id="Legacy-head-179">Trenutni zaključek</head>
               <p style="text-align:justify;" xml:id="Legacy-p-523"> Analiza VSD na podlagi študije
                  primera HERMES SoftLab (HSL) je odprla vrsto vprašanj glede analiziranja vrednot
                  pretekle programske opreme.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-524"> Prvo je dejstvo, da
                  zgodovinskega ozadja oz. konteksta, ki je oblikoval kulturo prebivalstva v tistem
                  času, ni več. Kot sta omenila Zagorc in Krajnik, so bile vrednote industrije
                  programske opreme v času delovanja HSL vrednote določenega časovnega obdobja in
                  kulturnega ozadja, kjer je vzgoja temeljila na prepričanju, da je dobrobit družbe
                  pomembnejša od dobrobiti posameznika. Po besedah Brica je bil način dela pri HP
                     (<hi rend="italic">The HP Way</hi>) podoben pristopu do dela v Sloveniji in v
                  Jugoslaviji, v zgodovinskem obdobju, v katerem so ustanovitelji HSL in zaposleni
                  tu tudi odraščali.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-525"> Druga težava pa je, da zaradi
                  prodaje podjetja HSL podjetju Comtrade leta 2008 dejansko ne moremo opraviti
                  tehnološke raziskave VSD, saj bi bilo treba dodatno raziskati, katero programje bi
                  lahko izpostavili kot artefakt za predstavitev podjetja HERMES SoftLab.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-526"> Iz tega lahko sklepamo, da so
                  vrednote na področju razvoja programske opreme časovno občutljive in jih je težko
                  shraniti zaradi spremenljive narave programske opreme, uporabe, lastništva ter
                  dokumentacijskih praks in standardov.</p>
               <figure xml:id="Legacy-figure-53">
                  <graphic url="media/zorz.jpg"/>
                  <head>
                     <hi rend="italic">Slika 1: Bronasta skulptura v poslovnih prostorih podjetja
                        HERMES SoftLab na Litijski cesti 51 v Ljubljani, delo avtorja Andreja Ajdiča
                        (1997). Na štirih ploskvah angelovih kril je napisano naslednje: Prenos
                        pogodbe družbe Hermes družbi HERMES SoftLab Hewlett Packard, pristop družbe
                        HP »The HP Way«, nagrada za podjetnika leta 1997 in telefonski register
                        zaposlenih iz leta 1996 (vir slike: Rudi Bric).</hi>
                  </head>
               </figure>
            </div>
         </div>
         <div type="chapter" xml:id="ch08-en" xml:lang="en" corresp="#ch08">
            <head xml:id="Legacy-head-181">8. Are values in software development time-critical or
               can they be stored?</head>
            <docAuthor xml:id="Legacy-docAuthor-16">
               <ref target="#study01.6-en">Silvana Žorž</ref>
            </docAuthor>
            <p style="text-align:justify;" xml:id="Legacy-p-527">The purpose of this paper is to
               investigate whether software can be analyzed retrospectively from the point of values
               through Values Sensitive Design methodology (VSD), which in the current ethics
               discourse in computing enables us to account for human values in software design. It
               consists of a tripartite investigation process – conceptual, empirical and technical
               – where the empirical<note place="foot" xml:id="ftn37-en" n="37">The methodology used
                  for this part of VSD is snowball effect interviews with the starting point being
                  Rudi Bric, founder of HERMES SoftLab (HSL), to help retroactively analyze the
                  possible existence and usage of values in the HSL software development process.
               </note> focuses on examining the human context in which the technology is, or in our
               case has been, situated (Žorž 2017).</p>
            <div type="subchapter" xml:id="ch08-sub01-en" xml:lang="en" corresp="#ch08-sub01">
               <head xml:id="Legacy-head-182">VSD Empirical Investigation – HERMES SoftLab,
                  Slovenia</head>
               <p style="text-align:justify;" xml:id="Legacy-p-529"> HERMES SoftLab (HSL) was born
                  in the first wave of business start-ups after a change in the prevailing social
                  order. Based on the experience of working with Hewlett Packard (HP) from 1984–1990
                  (a period of self-governed socialism), the four founders – Rudi Bric, Tomaž
                  Schara, Andrej Kuščer and Zoran Zagorc – started a software engineering company in
                  October 1990, with the main business activity being creating software for others.
                  At its high point in 2002 the company grew to 700 employees and absorbed an
                  important percentage of available software developers in Slovenia, establishing
                  branches at home and abroad.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-530"> Honesty in software programming
                  was the main motivator for Rudi Bric to follow a certain set of values in HSL
                  software development. This honest approach to software development was based on an
                  experience Bric had with regard to a bug in a piece of software made by a foreign
                  company that he encountered while working for ISKRA Računalniki in 1980, long
                  before starting HSL.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-531"> The bug in system software
                  actually enabled the American company Control Data Corporation (CDC), which
                  produced CYBER-18 mini computers and application software, to gain a position of
                  power against the buyer of the software, the Mexican company Diconsa. Diconsa had
                  to pay to “resolve the bug” repeatedly in order to be able to continue using the
                  application software. Moreover, the bug was not actually fixed by CDC, which
                  preferred to accuse the Mexicans of being ignorant users. Bric knew exactly where
                  the problem was, and how to solve it. Ultimately the problem was solved by ISKRA
                  engineers, but the dishonest relations between some big companies and their
                  customers made an impression on Bric, as well as the idea that you have to fully
                  understand all the implications of the use of the developed software in order to
                  adequately control and assure the quality of software development. This experience
                  led Bric to implant, years later, into HSL’s culture the value of responsibility
                  in development, as expressed in the saying “Good Work Creates New Work”.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-532"> HSL’s first really big client
                  was Hewlett Packard (HP). In the 1990s it was considered the standard in terms of
                  high-quality software development. HSL thus started to form its own development
                  process according to how this was done in HP. Bric was interested in finding out
                  if the company was capable, organized and knowledgeable enough to be able to
                  compete in the field of software development with anyone in the world. Approached
                  from an engineering perspective, HP was taken as the gold standard, as explained
                  by Krajnik. Already at the very early beginning of HSL specific people were
                  brought in whose role was to think about the software engineering process and all
                  related aspects, with the aim of being able to produce software that could compete
                  globally. Here, much knowledge of such processes was transferred from the
                  relationship between HP and HSL, defined by Bric as a lucky coincidence that
                  involved the founders of HSL, people from the previous company HERMES (already the
                  distributor for HP in Yugoslavia), and Prof Zvonko Fazarinc and Dr Franc Rode,
                  senior scientists employed in HP (and personal friends of both Hewlett and
                  Packard). In 2000 HP bought a 5% share in the company itself. This in-depth
                  relationship combined with the vision of good work led to the transfer of work
                  practices into HSL.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-533"> As explained by Miro Germ,
                  Director of Quality Control at HSL, who came from HERMES Plus, these
                     practices<note place="foot" xml:id="ftn38-en" n="38">These practices in HSL
                     were Friday morning presentations where employees were given information on the
                     company’s current workings, what was going well and what was not, along with
                     future steps, and an open door policy where everyone could come in with their
                     questions. </note> of HP were transferred through the HP Yugoslavia
                  representative company into the mindset of people creating HSL. HP recommendations
                  were used in creating business strategy and quality control processes through the
                  Total Quality Management (TQM) tool, as well as Total Quality Essentials by Sarv
                  Singh Soin, the TQM Director of HP Pacific.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-535"> The HP Way, which defined the
                  corporate objectives of HP and “the way things are done around here” (Lacy and
                  Mullins, 2002) was also fully transferred, as the management was working for HP
                  Yugoslavia in Vienna. The HP Way clearly states the following as an aim with
                  regard to uncompromising integrity as a company and goal for employees:</p>
               <p style="text-align:justify;" xml:id="Legacy-p-536">“<hi rend="italic">People at
                     every level are expected to adhere to the highest standards of business ethics
                     and must understand that anything less is unacceptable.</hi>” (HP Alumni,
                  2022)</p>
               <p style="text-align:justify;" xml:id="Legacy-p-537"> This can be understood as the
                  explanation of the 7th corporate objective, citizenship, which is defined:</p>
               <p style="text-align:justify;" xml:id="Legacy-p-538">“<hi rend="italic">To meet the
                     obligations of good citizenship by making contributions to the community and to
                     the institutions in our society which generate the environment in which we
                     operate</hi>.” (HP Alumni, 2022)</p>
               <p style="text-align:justify;" xml:id="Legacy-p-539"> Germ also made a presentation
                  at the European Organization of Quality (EOQ), showing that HSL was included in
                  the quality conversation at that time, and later also served as assessor of
                  quality in different quality management societies. Primož Krajnik, CEO of Zaslon
                  (a Slovenian company in the field of banking software that HSL bought in 2000) was
                  the youngest assessor of business quality for the European Foundation for Quality
                  Management at that time. HSL had a very defined quality assurance process which
                  came first, and only after this did the programming work begin. At one point a
                  project dashboard existed for each project, where quality managers signaled if the
                  project ran in adherence to the rules defined before the start of the project.
                  This process was also transferred from HP.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-540"> Another important notion set
                  out by Bric was the fact that it was not only thought about how to set up the
                  process, but also how to develop people to properly manage the software
                  development process and the management of people who were part of this process.
                  This led to the creation of an engineering culture where constant learning,
                  development, sharing of best practices, improving of mistakes and focus on
                  excellence in quality shaped teams into a formation of equals working towards a
                  standardized goal. At the same time the diversity of teams was high, as at one
                  point there were 14 different nationalities within the company (Tagesspiegel
                  1998).</p>
               <p style="text-align:justify;" xml:id="Legacy-p-541"> In 1998 the Republic of
                  Slovenia’s Business Excellence Prize (PRSPO) was awarded to HSL, making HSL the
                  first winner of such a prize in Slovenia (Rozoničnik and Valenci, 2017) and an
                  example of a company showing excellence on the EFQM model of excellence.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-542"> Besides the recognition from
                  the industry and different quality management associations, the idea behind HSL –
                  as explained by Krajnik, the person who was in charge of transferring the HSL
                  “way” into Zaslon – was to create work that has the client’s best interests in
                  mind, rather than simply trying to get the most profit out of the client, and
                  instead to really solve the client’s problem through software solutions and
                  ensuring their independence. Any resulting profit was the effect of this focus on
                  high standards of quality software production.<note place="foot" xml:id="ftn39-en"
                     n="39">As noted by Bric, the role of profit in Packard’s HP Way was based on
                     profit being the best single measure of HP contribution to society and source
                     of HP corporate strength, which sounds very “socialistic” in today’s American
                     value set, but was at that time very similar to HSL’s worldview. </note>
               </p>
               <p style="text-align:justify;" xml:id="Legacy-p-544"> As explained by Zoran Zagorc, a
                  founder of HSL, this high-standard practice of project management was based on the
                  know-how developed through the work of the founders and the quality control
                  management practices set out by Germ. This differentiated HSL from others, and
                  helped realize the goal of delivering high-quality software to international
                  clients, which was the starting vision of the founders. Their initial idea that
                  good work creates new work focused on overdelivering on deadlines and quality,
                  which then translated into know-how with regard to project management, development
                  and quality control. HSL had full control over software in terms of development,
                  and an advantage in development knowledge that gave it the opportunity to do
                  whatever it wanted with software, which could lead to moral issues. But going
                  against the clients’ interests was not the mindset of the company. As Zagorc
                  explains it, the individuals working for HSL and the founders were themselves
                  ethical people, due to differences in the ethical component of society at that
                  point in time. Zagorc also mentions the need for ethics in the case of HSL
                  creating software for privatization in Slovenia, and for public sector use. In
                  this case ethics were central to the development process at HSL, leading to
                  software that secured the role of the user and not the owner of the software. This
                  also gave Zagorc insights that could give him an unfair advantage, which his
                  ethical character and honesty prevented him from abusing. It also signals the
                  presence of moral character in the company, which has also been noted by
                  others.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-545"> An important notion expressed
                  by Luka Renko, Chief Technologist of HSL, is the fact that HSL was doing product
                  development in which the final users’ needs, and not the company that bought the
                  software, were of greater importance to HSL. The focus was on delivering the most
                  value to the user, which could lead to differing perspectives between HSL and the
                  client. This led to HSL being proactively attuned with the needs of the
                     market<note place="foot" xml:id="ftn40-en" n="40">At that time the focus was on
                     the added value of the product on the market (i.e. the product solving a
                     problem), not the added value of the product for the user. </note> and users
                  sooner than the client, and this produced many fruitful business relationships
                  between HSL and its clients for years to come. The wish for the greater
                  independence of clients led to hybrid teams and the intellectual property of
                  software being in the hands of clients and not HSL. HSL was, due to its values and
                  quality standards, able to develop software for competing clients by keeping teams
                  separate, so they did not know what the others were working on. But there was no
                  other direct competing client with regard to HP for which the company was
                  developing software. What is important to note is that within the company there
                  was a friction between the cultures of how work was being done for international
                  or local clients, where the difference was between product development for
                  international clients or local client servicing. The notion of responsible
                  software was not actually a defined issue or concept, as at that point consumer
                  software was not the standard of how software was used.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-547"> HSL in its essence tried to
                  achieve in its development the values of good work, and independence, which could
                  be retroactively translated into the VSD values of ownership, universal usability
                  and autonomy values allowing us to start the VSD conceptual investigation (Žorž,
                  2017).</p>
            </div>
            <div type="subchapter" xml:id="ch08-sub02-en" xml:lang="en" corresp="#ch08-sub02">
               <head xml:id="Legacy-head-183">Current conclusion</head>
               <p style="text-align:justify;" xml:id="Legacy-p-548"> The VSD analysis on the case
                  study of HERMES SoftLab (HSL) shows a series of issues with regard to analyzing
                  the values of past software.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-549"> The first is the fact that the
                  historical background – context – shaping the people’s culture at that time is no
                  more. As mentioned by Zagorc and Krajnik, the values of the software industry at
                  the time of HSL were the values of a certain period and cultural background, where
                  everyone had been raised to believe that what is best for society is more
                  important than what is best for an individual. As mentioned by Bric, the HP Way
                  was similar to the belief model that was promoted in Slovenia and Yugoslavia, the
                  societies in which the founders of the company and employees actually grew up.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-550"> The other issue is that due to
                  the fact that HSL was sold to Comtrade in 2008, we are actually unable to run a
                  VSD technological investigation as additional research should be needed to
                  determine which software could serve as the artifact representative of HERMES
                  SoftLab.</p>
               <p style="text-align:justify;" xml:id="Legacy-p-551"> From this we can conclude that
                  values in software development are time-critical and hard to store, due to the
                  shifting nature of software, usage, and ownership, as well as documentation
                  practices and standards.</p>
               <figure xml:id="Legacy-figure-54">
                  <graphic url="media/zorz.jpg"/>
                  <p style="text-align:justify;">
                     <hi rend="italic">Figure 1:</hi>
                     <hi rend="italic"> Bronze sculpture for HERMES SoftLab office at Litijska 51,
                        Slovenia, by Andrej Ajdič (1997) where the wings of an angel consist of four
                        surfaces on which the following is written: Hermes to HERMES SoftLab Hewlett
                        Packard contract transfer, the HP Way, the Award for Entrepreneur of the
                        Year 1997, and 1996 employee phone registry (Image courtesy Rudi Bric)</hi>
                  </p>
               </figure>
            </div>
         </div>
      </body>
      <back>
         <div type="study" xml:id="study01.1" corresp="#study01.1-en" xml:lang="sl">
            <head xml:id="Legacy-head-184">
               <ref target="#Legacy-docAuthor-1">Roberto Di Cosmo</ref>
            </head>
            <p xml:id="Legacy-p-553">Roberto Di Cosmo je računalniški znanstvenik, ki je leta 2010
               postal prvi direktor IRILL, pobude za inovacije in raziskave proste programske opreme
               (Initiative de Recherche et Innovation sur le Logiciel Libre). Po desetletju
               poučevanja na fakulteti Ecole Normale Supérieure v Parizu je leta 1999 postal redni
               profesor računalništva na Univerzi Paris Diderot. Aktivno se ukvarja z raziskavami na
               področju teoretičnega računalništva, zlasti funkcionalnega programiranja, vzporednih
               in porazdeljenih programov, semantike programskih jezikov, sistemov tipov in linearne
               logike. Zdaj se osredotoča na nove znanstvene probleme, ki jih je prinesla splošna
               uveljavitev proste programske opreme, kar je bilo jedro evropskega raziskovalnega
               projekta Mancoosi. Z velikim zanimanjem spremlja razvoj družbe pod vplivom
               informacijske tehnologije in je dolgoletni zagovornik proste programske opreme, poleg
               tega pa je prispeval k njeni uveljavitvi s knjižno uspešnico »Ugrabitev sveta« (Le
               Hold-Up planétaire, 1998). Leta 2007 je ustanovil tematsko skupino za prosto
               programsko opremo pri podjetju Systematic, ki je v zadnjih desetih letih spodbudila
               nastanek več kot 60 odprtokodnih raziskovalnih in razvojnih projektov. Di Cosmo je
               bil zgodnji član AFUL, združenja francoske skupnosti uporabnikov Linuxa. Njegov
               najbolj znan prispevek k Linuxu je prva »živa« distribucija Linuxa (od 2000 do 2002),
               imenovana demolinux, ki je omogočila zagon Linuxa s CD-ROM-a. Leta 2015 je ustanovil
               pobudo za vzpostavitev univerzalnega arhiva vse javno dostopne izvorne kode Software
               Heritage, ki jo sedaj tudi vodi.</p>
         </div>
         <div type="study" xml:id="study01.2" corresp="#study01.2-en" xml:lang="sl">
            <head xml:id="Legacy-head-185">
               <ref target="#Legacy-docAuthor-5">Primož Jakopin</ref>
            </head>
            <p xml:id="Legacy-p-554">Primož Jakopin se je rodil 30. junija 1949 v Ljubljani v
               jezikoslovno družino. Oče Franc je bil profesor vzhodnih slovanskih jezikov, ki je
               objavljal članke na področju slovnice in onomastike, mati Gitica pa je prevedla več
               kot 50 romanov iz angleščine, nemščine, francoščine, ruščine in poljščine. Ker se je
               v prostem času najraje ukvarjal z jamarstvom, se je sprva želel vpisati na študij
               geologije, nato pa je upošteval očetov nasvet in se odločil za študij matematike na
               Univerzi v Ljubljani, kjer je diplomiral leta 1972. Leta 1981 je na Univerzi v
               Zagrebu magistriral iz informacijskih znanosti z magistrskim delom <ref
                  target="http://www.jakopin.net/primoz/magisterij/index.php">Entropija v slovenskih
                  leposlovnih besedilih</ref>, leta 1999 pa je na Univerzi v Ljubljani doktoriral iz
               teorije informacij z disertacijo <ref
                  target="http://www.jakopin.net/primoz/disertacija/index.php">Zgornja meja
                  entropije pri leposlovnih besedilih v slovenskem jeziku</ref>. Med letoma 1972 in
               1984 je razvil numerični model za ocenjevanje in vizualizacijo kraških jam, ki je bil
               uporabljen za izračun volumna več jam in udornic v Sloveniji. Rezultati so bili
               objavljeni na <ref target="http://www.jakopin.net/primoz/clanki/1981_MCV/index.php"
                  >8. mednarodnem speleološkem kongresu </ref>in <ref
                  target="http://www.jakopin.net/primoz/clanki/1981_MECS/">3. evropskem stereološkem
                  simpoziju</ref>. Potem ko mu ni uspelo nadaljevati raziskovanja na Inštitutu za
               raziskovanje Krasa v Postojni, je zamenjal področje svojega delovanja in se posvetil
               jezikovnim tehnologijam, ki so bližje njegovemu primarnemu področju dela. Poleg tega
               je bil tudi velik ljubitelj programiranja. S programjem, ki ga je večinoma razvil
               doma, je uspel ustvariti kariero na področju računalniškega jezikoslovja, in sicer v
               raziskovalnih vodah kot vodja <ref
                  target="http://web.archive.org/web/20190406003335/http://bos.zrc-sazu.si:80/index_en.html"
                  >Korpusnega laboratorija</ref> na Inštitutu za slovenski jezik Frana Ramovša vse
               od ustanovitve leta 2001 do leta 2012 ter kot profesor na Filozofski fakulteti v
               Ljubljani (1993–2012) in na Fakulteti za Humanistiko v Novi Gorici (2012–2016).
               Najpomembnejše programje: STAT (statistični paket, Control Data Cyber, 1977), IBIS
               (programski paket za podatke spremenljive dolžine, ki se uporablja predvsem za
               obdelavo sekundarnih knjižničnih informacij, kot so podatki o knjigah in člankih,
               Digital DEC 10, 1981), INES (urejevalnik besedil z bazo podatkov in grafikami,
               Sinclair ZX Spectrum, 1985, zelo razširjen v Jugoslaviji), STEVE (16-bitni
               urejevalnik besedil z bazo podatkov, grafikami in namiznim založništvom, ATARI ST,
               1987–1992, distribuiran v Jugoslaviji, Nemčiji, državah Beneluksa in na Norveškem, na
               voljo so bili priročniki v angleščini, nemščini, slovenščini in srbščini/hrvaščini),
               EVA (urejevalnik besedil z bazo podatkov in jezikovnotehnološkimi funkcionalnostmi,
               135.000 vrstic kode v programskem jeziku C, za operacijski sistem DOS, 1992, in
               operacijski sistem Windows, 1996–), NEVA (iskalnik na osnovi EVA za strežnike
               Windows, 1999–).</p>
         </div>
         <div type="study" xml:id="study01.3" corresp="#study01.3-en" xml:lang="sl">
            <head xml:id="Legacy-head-186">
               <ref target="#Legacy-docAuthor-11">Matija Šuklje</ref>
            </head>
            <p xml:id="Legacy-p-555">Pravnik po izobrazbi in heker po duši, Matija Šuklje se
               najbolje počuti na stičišču obeh svetov. Od poznih 90. naprej se ukvarja s FOSS (Free
               &amp; Open Source Software) in pridobil je veliko izkušenj s tega področja v javnem,
               nevladnem in zasebnem sektorju. Dolga leta je vodil največjo globalno mrežo
               pravnikov, ki se specializirajo za odprtokodne tematike, in še vedno je njen aktiven
               član. Trenutno je višji svetovalec za avtorske pravice v mednarodnem podjetju
               Liferay.</p>
         </div>
         <div type="study" xml:id="study01.4" corresp="#study01.4-en" xml:lang="sl">
            <head xml:id="Legacy-head-187">
               <ref target="#Legacy-docAuthor-9">Boštjan Špetič</ref>
            </head>
            <p xml:id="Legacy-p-556">Boštjan Špetič je vodja muzejske zbirke Računalniškega muzeja,
               ambasador softverske dediščine pri organizaciji Software Heritage, podjetnik in
               mentor zagonskih podjetij, ki trenutno živi v Sloveniji, vendar je tesno povezan z
               New Yorkom, kjer je živel večino zadnjega desetletja. Boštjan Špetič je soustanovil,
               zgradil in prodal dva izdelka v okviru istega zagonskega podjetja Zemanta. Prvi je
               osebni pomočnik, ki je temeljil na semantičnem spletu in je bil prodan neodvisnemu
               založniško-tehnološkemu podjetju Sovrn, drugi pa prva programatična oglaševalska
               platforma (DSP), specializirana za nativno oglaševanje, ki je bila prodana podjetju
               Outbrain. Špetič trenutno dela v skupini za razvoj podjetja Outbrain kot produktni
               specialist, je mentor več podjetnikom, član upravnega odbora podjetja Rock Content in
               vodi Računalniški muzej.</p>
         </div>
         <div type="study" xml:id="study01.5" corresp="#study01.5-en" xml:lang="sl">
            <head xml:id="Legacy-head-188">
               <ref target="#Legacy-docAuthor-3">Saša Divjak</ref>
            </head>
            <p xml:id="Legacy-p-557">Saša Divjak je avtor različnih programskih aplikacij, vodil in
               sodeloval pa je pri mnogih mednarodnih in lokalnih projektih na področju računalniške
               avtomatizacije, robotizacije in multimedijskih tehnologij. Dejaven je bil v odborih
               različnih mednarodnih in lokalnih strokovnih združenj. Bil je vodja Oddelka za
               elektrotehniko na Institutu Jožef Stefan, pomočnik generalnega direktorja družbe
               Iskra Delta, dekan Fakultete za računalništvo in informatiko Univerze v Ljubljani ter
               direktor Laboratorija za računalniško grafiko in multimedije. Predaval je tudi
               predmete Programiranje 2, Sistemska programska oprema, Operacijski sistemi,
               Računalniška grafika.</p>
         </div>
         <div type="study" xml:id="study01.6" corresp="#study01.6-en" xml:lang="sl">
            <head xml:id="Legacy-head-189">
               <ref target="#Legacy-docAuthor-15">Silvana Žorž</ref>
            </head>
            <p xml:id="Legacy-p-558">Silvana Žorž je magistrica digitalne humanistike (KU Leuven) in
               magistrica ekonomije (Master in Business and Administration – IBM, Univerza v
               Ljubljani). V magistrskem delu je raziskovala odkrivanje diskriminatornih faktorjev
               pri oblikovanju programske opreme, in sicer pod mentorstvom dr. B. Berendta (KU
               Leuven, Belgija). Magistrsko delo je opravila s <hi rend="italic">cum laude</hi>,
               svoje delo pa posvetila vrednostnemu sistemu v oblikovalski metodologiji programske
               opreme. Sodelovala je s številnimi podjetji (Google, Outfit7 itd.) na področju
               digitalnega marketinga, razvoja digitalnih produktov, raziskovanja trga in
               potrošniških navad. Trenutno je kot višja specialistka zaposlena pri digitalni
               agenciji Red Orbit.</p>
         </div>
         <div type="study" xml:id="study01.7" corresp="#study01.7-en" xml:lang="sl">
            <head xml:id="Legacy-head-190">
               <ref target="#Legacy-docAuthor-7">Nataša Milić-Frayling</ref>
            </head>
            <p xml:id="Legacy-p-559">Nataša Milić-Frayling je ustanoviteljica in direktorica
               podjetja Intact Digital, ki nudi platformo in storitve za gostovanje podedovanih
               programskih namestitev z namenom omogočanja dolgotrajne berljivosti in uporabe
               digitalnih podatkov. Podjetje Intact Digital posluje z visoko reguliranimi sektorji,
               kot so farmacevtska industrija in naravoslovne znanosti, kjer nudi podporo pri
               doseganju skladnosti s predpisi za regulacijo podatkovne integritete ter
               rekonstrukciji raziskav in ponovljivosti podatkovnih analiz, vključno s strojnim
               učenjem in umetno inteligenco.</p>
            <p xml:id="Legacy-p-560">Nataša Milić-Frayling ima 25 let izkušenj na področju
               računalniške znanosti in inovacij, vključno s 17 leti izkušenj v podjetju Microsoft
               Research (MSR). Je avtorica prek 100 raziskovalnih objav in navedena je na desetinah
               odobrenih patentov. Poleg izvajanja raziskav je pri MSR vodila raziskovalni
               partnerski program, v katerem je promovirala sodelovanje z inovacijskimi partnerji na
               področju strateških izzivov, vključno z digitalno prezervacijo in dolgotrajnim
               dostopom do digitalnih vsebin (projekta EU <ref
                  target="http://www.planets-project.eu">
                  <hi rend="underline">PLANETS</hi>
               </ref> in <ref target="http://www.scape-project.eu/">
                  <hi rend="underline">SCAPE</hi>
               </ref>). Je zaslužna profesorica na Univerzi v Nottinghamu, kjer je 5 let vodila
               oddelek za podatkovne znanosti ter prispevala k univerzitetnim raziskovalnim
               strategijam na področju podatkovnih znanosti in umetne inteligence.</p>
            <p xml:id="Legacy-p-561">Nataša se v širšem strokovnem krogu aktivno angažira ob
               kritičnih vprašanjih, ki se porajajo ob razširjeni rabi digitalne tehnologije, in
               sicer vse od profesionalne etike, zasebnosti in jasnosti zasnove do digitalne
               zastarelosti in odgovornega inoviranja. Pri UNESCU je članica prezervacijskega
               pododbora v programu Spomin sveta (angl. <hi rend="italic">Memory of the World
                  Programme</hi>) in predseduje delovni skupini za raziskave in tehnologijo pri
               projektu PERSIST. Nataša Milić-Frayling je aktivna članica računalniškega združenja
               Association for Computing Machinery (ACM), poleg tega pa je bila svetnica v svetu
               združenja ACM Europe in predsedovala je izvršnemu odboru ACM Women Europe.</p>
         </div>
         <div type="study" xml:id="study01.8" corresp="#study01.8-en" xml:lang="sl">
            <head xml:id="Legacy-head-191">
               <ref target="#Legacy-docAuthor-13">Franc J. Zakrajšek</ref>
            </head>
            <p xml:id="Legacy-p-562">Franc J. Zakrajšek je matematik, višji raziskovalec,
               računalniški programer in svetovalec, ki od 70. let dalje razvija geografske
               informacijske sisteme za urbanizem in sorodna področja. Njegovo delo se osredotoča na
               inovativne pristope, metode, simulacijske modele in uvajanje umetne inteligence v
               e-načrtovanje. Do leta 2015 je deloval je kot član slovenske strokovne skupine za
               digitalizacijo in digitalno prezervacijo, ki jo je ustanovila Evropska komisija. Je
               začetnik Registra slovenske kulturne dediščine. Sodeloval je v več projektih EU, ki
               so uvajali geoprostorske informacije in 3D-modeliranje v področja kulturne dediščine,
               muzejev, knjižnic in arhivov kot del evropske digitalne knjižnice Europeana in razvil
               vseevropski e-kulturni zemljevid eCultureMap. Vodil je številne lokalne in nacionalne
               projekte in predaval je pri UNDP, UN-HABITAT in TAIEX. Delal je tudi kot svetovalec
               za razvojno banko InterAmerican Development Bank ter objavil več kot 500 člankov in
               prispevkov.</p>
         </div>
         <div type="study" xml:id="study01.1-en" corresp="#study01.1" xml:lang="en">
            <head xml:id="Legacy-head-192">
               <ref target="#Legacy-docAuthor-2">Roberto Di Cosmo</ref>
            </head>
            <p xml:id="Legacy-p-563">Roberto di Cosmo is a computer scientist, and in 2010 he was
               the first director of IRILL – Initiative de Recherche et Innovation sur le Logiciel
               Libre – an initiative for innovation and research with regard to free and open
               software. After a decade of teaching at the Ecole Normale Supérieure in Paris, he
               became a tenured professor of computer science at University Paris Diderot in 1999.
               He is active in research in the field of theoretical computing, especially functional
               programming, parallel and distributed programs, programming language semantics,
               system types and linear logic. He now focuses on new scientific problems created by
               the ubiquitous use of free and open-source software, which was core to the European
               research project Mancoosi. He is monitoring the social changes induced by information
               technology with great interest, is a long-time proponent of free software, and
               contributed to its establishment with a bestselling book, <hi rend="italic">Le
                  Hold-up planétaire</hi> (<hi rend="italic">The Planetary Hold-Up</hi>) in 1998. In
               2007 he founded a thematic group for free programming at Systematic, which has led to
               the creation of more than 60 open-source research and development projects over the
               last decade. Di Cosmo was an early member of AFUL, the French Linux society. His most
               known contribution to Linux is the first live distribution of Linux (2000 to 2002),
               demolinux, which enabled running Linux from a CD-ROM. In 2015 he established and now
               leads Software Heritage, an initiative for creating a universal archive of all
               publicly accessible source code.</p>
         </div>
         <div type="study" xml:id="study01.2-en" corresp="#study01.2" xml:lang="en">
            <head xml:id="Legacy-head-193">
               <ref target="#Legacy-docAuthor-6">Primož Jakopin</ref>
            </head>
            <p xml:id="Legacy-p-564">Primož Jakopin was born on June 30, 1949 in Ljubljana,
               Slovenia, into a family of linguists. His father Franc was a professor of eastern
               Slavic languages with publications in the field of grammar and onomastics, while his
               mother Gitica translated more than 50 novels from English, German, French, Russian
               and Polish. Because his main extracurricular activity was caving he intended to study
               geology, but followed his father’s advice with a degree in mathematics at the
               University of Ljubljana in 1972. In 1981 he received a Master’s degree in information
               science with the study “<ref
                  target="http://www.jakopin.net/primoz/magisterij/index.php">Entropy of Names and
                  Family Names in Slovenia</ref>” at the University of Zagreb, and in 1999 a PhD in
               information theory for “<ref
                  target="http://www.jakopin.net/primoz/disertacija/index.php">Upper Bound of
                  Entropy in Slovenian Literary Texts</ref>” at the University of Ljubljana. From
               1972 to 1984 he constructed a numerical model for the approximation and visualization
               of karst caves. It was used to compute the volume of several caves and collapsed
               dolinas in Slovenia, and the results were reported at the <ref
                  target="http://www.jakopin.net/primoz/clanki/1981_MCV/index.php">8</ref>
               <ref target="http://www.jakopin.net/primoz/clanki/1981_MCV/index.php">
                  <hi rend="superscript">th</hi>
               </ref>
               <ref target="http://www.jakopin.net/primoz/clanki/1981_MCV/index.php"> International
                  Congress of Speleology</ref> and <ref
                  target="http://www.jakopin.net/primoz/clanki/1981_MECS/">3</ref>
               <ref target="http://www.jakopin.net/primoz/clanki/1981_MECS/">
                  <hi rend="superscript">rd</hi>
               </ref>
               <ref target="http://www.jakopin.net/primoz/clanki/1981_MECS/"> European Symposium of
                  Stereology</ref>. After he failed to continue this research at the Karst Research
               Institute in Postojna, Jakopin changed his area of interest to language technology,
               closer to his parents field of work. Another great passion was also computer
               programming, and with software he developed mostly at home he managed to make a
               career in computational linguistics, both in research, as head of the <ref
                  target="http://web.archive.org/web/20190406003335/http://bos.zrc-sazu.si:80/index_en.html"
                  >Corpus Laboratory</ref> at the Fran Ramovš Institute of Slovenian Language, from
               its foundation in 2001 until 2012, and in teaching, at the Faculty of Arts in
               Ljubljana (1993–2012) and at the School of Humanities in Nova Gorica (2012–2016). The
               major pieces of software he worked on include: STAT (statistical package, Control
               Data Cyber, 1977), IBIS (software package for data of variable length, mainly used
               for handling secondary library information such as data on books and articles,
               Digital DEC 10, 1981), INES (text editor with database and graphics, Sinclair ZX
               Spectrum, 1985, widely used in ex-Yugoslavia), STEVE (16-bit character text editor
               with database, graphics and DTP, ATARI ST, 1987–1992, distributed in ex-Yugoslavia,
               Germany, Benelux and Norway, with manuals in English, German, Slovenian and
               Serbian/Croatian), EVA (text editor with database and language technology that
               features, 135,000 lines of code in C, for DOS in 1992 and Windows operating system in
               1996–), NEVA (EVA-based search engine for Windows servers, 1999–).</p>
         </div>
         <div type="study" xml:id="study01.3-en" corresp="#study01.3" xml:lang="en">
            <head xml:id="Legacy-head-194">
               <ref target="#Legacy-docAuthor-12">Matija Šuklje</ref>
            </head>
            <p xml:id="Legacy-p-565">A legal counsel by education, a hacker at heart, Matija Šuklje
               feels most at home at the crossing of both those worlds. Since the late 1990s he has
               dedicated his skills to FOSS (Free &amp; Open Source Software) and collected a vast
               array of experience in the field in the public, NGO and private sectors. He spent
               many years leading the largest global network of legal experts, specialized in
               open-source topics, where he is still an active member. He currently holds the
               position of Senior IP Counsel at Liferay.</p>
         </div>
         <div type="study" xml:id="study01.4-en" corresp="#study01.4" xml:lang="en">
            <head xml:id="Legacy-head-195">
               <ref target="#Legacy-docAuthor-10">Boštjan Špetič</ref>
            </head>
            <p xml:id="Legacy-p-566">Boštjan Špetič is Head of Museum Collections at the Computer
               History Museum, Software Heritage Ambassador, entrepreneur and start-up mentor,
               currently living in Slovenia, but keeping close connections with New York, where he
               lived for most of the past decade. Boštjan Špetič co-founded, built and sold two
               products within the same start-up, Zemanta. The first was a personal assistant based
               on semantic web technologies, which was acquired by an independent
               publishing-technology company Sovrn, the second product was the first programmatic
               advertising platform (DSP) specialized for native advertising, and was acquired by
               Outbrain. Boštjan currently works in Outbrain’s development group as a product
               specialist, is a mentor to several entrepreneurs worldwide, and a board member of
               Rock Content.</p>
         </div>
         <div type="study" xml:id="study01.5-en" corresp="#study01.5" xml:lang="en">
            <head xml:id="Legacy-head-196">
               <ref target="#Legacy-docAuthor-4">Saša Divjak</ref>
            </head>
            <p xml:id="Legacy-p-567">Saša Divjak is the author of various program applications, and
               lead and collaborator on a series of international and local projects in the field of
               computer automatization, robotization and multimedia technologies. He has been active
               on the boards of various international and local professional associations. He was
               head of the Department of Electrotechnics at the Institute Jožef Stefan, assistant to
               the CEO of Iskra Delta, Dean of the Faculty for Computer Science and Informatics at
               the University of Ljubljana, and Director of the Laboratory for Computer Graphics and
               Multimedia. He was a lecturer for the subjects Programming 2, System Software,
               Operating Systems, and Computer Graphics.</p>
         </div>
         <div type="study" xml:id="study01.6-en" corresp="#study01.6" xml:lang="en">
            <head xml:id="Legacy-head-197">
               <ref target="#Legacy-docAuthor-16">Silvana Žorž</ref>
            </head>
            <p xml:id="Legacy-p-568">Silvana Žorž, Master of Digital Humanities (KU Leuven) and
               Master of Economics (Master in Business and Administration – IBM, University of
               Ljubljana). In her Master’s thesis, she researched the discovery of discriminatory
               factors in software design, under the mentorship of Dr B. Berendt (KU Leuven,
               Belgium). She obtained her Master’s <hi rend="italic">cum laude</hi>, and dedicated
               her work to the value system in software design methodology. She has collaborated
               with many companies (Google and Outfit7, among others) in the field of digital
               marketing, digital product development, market research and consumer habits. She is
               currently a senior advertiser with the digital agency Red Orbit.</p>
         </div>
         <div type="study" xml:id="study01.7-en" corresp="#study01.7" xml:lang="en">
            <head xml:id="Legacy-head-198">
               <ref target="#Legacy-docAuthor-8">Nataša Milić-Frayling</ref>
            </head>
            <p xml:id="Legacy-p-569">Dr Nataša Milić-Frayling is a founder and the CEO of Intact
               Digital Ltd, a company that provides a platform and services for hosting legacy
               software installations to enable long-term readability and use of digital data.
               Intact Digital works with highly regulated sectors such as pharma and life sciences
               to support compliance with data integrity regulations, reconstruction of research
               studies and reproducibility of data analyses, including machine learning and AI.</p>
            <p xml:id="Legacy-p-570">Nataša Milić-Frayling has 25 years of experience in computer
               science research and innovation, including 17 years at Microsoft Research (MSR). She
               has authored over 100 research publications and has dozens of approved patents to her
               name. Besides her research, Nataša has also led the MSR Research Partnership
               Programme, promoting collaboration with innovation partners on strategic challenges,
               including digital preservation and long-term access to digital content (<ref
                  target="http://www.planets-project.eu">
                  <hi rend="underline">PLANETS</hi>
               </ref> and <ref target="http://www.scape-project.eu/">
                  <hi rend="underline">SCAPE</hi>
               </ref> EU projects). She is Professor Emerita at the University of Nottingham, where
               she spent five years serving as Chair of Data Science, contributing to the
               university’s research strategy on data science and AI.</p>
            <p xml:id="Legacy-p-571">She is actively engaged with the broader professional community
               on critical issues that arise from the prolific use of digital technologies, ranging
               from professional ethics, privacy and design transparency to digital obsolescence and
               responsible innovation. She is a member of the Preservation Sub-Committee within the
               UNESCO Memory of the World Programme and serves as Chair of the Research and
               Technology Working group for the UNESCO PERSIST project. Nataša is an active member
               of the Association for Computing Machinery (ACM). She served on the ACM Europe
               Council and as Chair of the ACM Women Europe Executive Committee.</p>
         </div>
         <div type="study" xml:id="study01.8-en" corresp="#study01.8" xml:lang="en">
            <head xml:id="Legacy-head-199">
               <ref target="#Legacy-docAuthor-14">Franc J. Zakrajšek</ref>
            </head>
            <p xml:id="Legacy-p-572">Franc J. Zakrajsek is a mathematician, senior researcher,
               computer programmer, and consultant, working since 1970 developing geographical
               information systems in urban planning and related areas. His work focuses on
               innovative approaches, methods, simulation models, and introducing artificial
               intelligence in e-planning. He was a member of the expert group on digitization and
               digital preservation established by the European Commission until 2015. He was one of
               the founders of the Register of Cultural Heritage in Slovenia. He participated in
               several EU projects introducing geospatial information and 3D modeling in the field
               of cultural heritage, museums, libraries, and archives as a part of the
               Europeana-European digital library and developed the Europe-wide eCultureMap. He also
               led numerous local and national projects and was appointed as a lecturer by UNDP,
               UN-HABITAT, and TAIEX. He was a consultant for the InterAmerican Development Bank and
               has published more than 500 articles and other publications.</p>
         </div>
      </back>
   </text>
</TEI>
